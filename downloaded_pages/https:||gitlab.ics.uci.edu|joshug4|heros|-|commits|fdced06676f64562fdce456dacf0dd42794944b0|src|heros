



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

Commits


















fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros
















31 Oct, 2013
1 commit









added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
3 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
3 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20













comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










11 Jul, 2013
2 commits









simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c













improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312










10 Jul, 2013
2 commits









removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe













shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575










09 Jul, 2013
4 commits









removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14













comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6













removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d













first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2










08 Jul, 2013
3 commits









bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2













bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670













don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd










07 Jul, 2013
2 commits









further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41













improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee










06 Jul, 2013
1 commit









don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83



















H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

Commits


















fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros
















31 Oct, 2013
1 commit









added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
3 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
3 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20













comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










11 Jul, 2013
2 commits









simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c













improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312










10 Jul, 2013
2 commits









removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe













shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575










09 Jul, 2013
4 commits









removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14













comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6













removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d













first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2










08 Jul, 2013
3 commits









bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2













bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670













don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd










07 Jul, 2013
2 commits









further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41













improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee










06 Jul, 2013
1 commit









don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83


















Open sidebar



Joshua Garcia heros

Commits







Open sidebar



Joshua Garcia heros

Commits




Open sidebar

Joshua Garcia heros

Commits


Joshua Garciaherosheros
Commits











fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros
















31 Oct, 2013
1 commit









added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
3 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
3 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20













comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










11 Jul, 2013
2 commits









simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c













improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312










10 Jul, 2013
2 commits









removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe













shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575










09 Jul, 2013
4 commits









removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14













comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6













removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d













first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2










08 Jul, 2013
3 commits









bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2













bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670













don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd










07 Jul, 2013
2 commits









further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41













improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee










06 Jul, 2013
1 commit









don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83






















fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros
















31 Oct, 2013
1 commit









added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
3 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
3 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20













comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










11 Jul, 2013
2 commits









simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c













improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312










10 Jul, 2013
2 commits









removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe













shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575










09 Jul, 2013
4 commits









removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14













comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6













removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d













first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2










08 Jul, 2013
3 commits









bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2













bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670













don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd










07 Jul, 2013
2 commits









further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41













improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee










06 Jul, 2013
1 commit









don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83


















fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros

















fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros















fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag









herossrcheros




fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag








fdced06676f64562fdce456dacf0dd42794944b0


Switch branch/tag





fdced06676f64562fdce456dacf0dd42794944b0

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tagherossrcheros













31 Oct, 2013
1 commit









added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
3 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
3 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20













comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










11 Jul, 2013
2 commits









simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c













improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312










10 Jul, 2013
2 commits









removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe













shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575










09 Jul, 2013
4 commits









removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14













comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6













removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d













first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2










08 Jul, 2013
3 commits









bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2













bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670













don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd










07 Jul, 2013
2 commits









further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41













improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee










06 Jul, 2013
1 commit









don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83











31 Oct, 2013
1 commit
31 Oct, 20131 commit







added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066














added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013


·
fdced066

Steven Arzt authored Oct 31, 2013




fdced066






fdced066




fdced066

28 Oct, 2013
5 commits
28 Oct, 20135 commits







Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6














Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b










Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b






Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver

·
3c46813b

Steven Arzt authored Oct 28, 2013




3c46813b






3c46813b




3c46813b






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013


·
e0e1cdaf

Eric Bodden authored Oct 28, 2013




e0e1cdaf






e0e1cdaf




e0e1cdaf






added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc










added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc






added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013


·
52970dcc

Eric Bodden authored Oct 28, 2013




52970dcc






52970dcc




52970dcc






fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb










fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb






fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013


·
2a1414bb

Eric Bodden authored Oct 28, 2013




2a1414bb






2a1414bb




2a1414bb






suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6






suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013


·
864f77c6

Eric Bodden authored Oct 28, 2013




864f77c6






864f77c6




864f77c6

26 Oct, 2013
3 commits
26 Oct, 20133 commits







Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85














Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e










Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e






Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.

·
3cad6e8e

Steven Arzt authored Oct 26, 2013




3cad6e8e






3cad6e8e




3cad6e8e






added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac










added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac






added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013


·
4f842bac

Steven Arzt authored Oct 26, 2013




4f842bac






4f842bac




4f842bac






removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85






removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013


·
02ad0f85

Steven Arzt authored Oct 26, 2013




02ad0f85






02ad0f85




02ad0f85

25 Oct, 2013
1 commit
25 Oct, 20131 commit







1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e














1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e






1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them

·
20810d2e

Steven Arzt authored Oct 25, 2013




20810d2e






20810d2e




20810d2e

23 Oct, 2013
1 commit
23 Oct, 20131 commit







added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047














added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047






added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013


·
ca17b047

Steven Arzt authored Oct 23, 2013




ca17b047






ca17b047




ca17b047

18 Oct, 2013
3 commits
18 Oct, 20133 commits







Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b














Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013










Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013






Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.

·
6a582013

Eric Bodden authored Oct 18, 2013




6a582013






6a582013




6a582013






Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc










Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.





4aa7bebc






Revert "comments for SummarizableAbstraction"

·
4aa7bebc





Eric Bodden authored Oct 18, 2013


This reverts commit 0b8c932a.

·
4aa7bebc

Eric Bodden authored Oct 18, 2013




4aa7bebc






4aa7bebc




4aa7bebc






added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b






added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths

·
d9ac548b

Eric Bodden authored Oct 18, 2013




d9ac548b






d9ac548b




d9ac548b

14 Oct, 2013
1 commit
14 Oct, 20131 commit







made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a














made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a






made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013


·
1211a53a

Steven Arzt authored Oct 14, 2013




1211a53a






1211a53a




1211a53a

10 Oct, 2013
4 commits
10 Oct, 20134 commits







Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7














Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e










Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e






Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013


·
51c1c00e

Marc-André Laverdière authored Oct 10, 2013




51c1c00e






51c1c00e




51c1c00e






Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2










Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2






Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013


·
69e499f2

Marc-André Laverdière authored Sep 20, 2013




69e499f2






69e499f2




69e499f2






Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3










Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3






Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013


·
8302b8d3

Marc-André Laverdière authored Sep 13, 2013




8302b8d3






8302b8d3




8302b8d3






1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7






1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted

·
aacc49a7

Steven Arzt authored Oct 10, 2013




aacc49a7






aacc49a7




aacc49a7

19 Sep, 2013
1 commit
19 Sep, 20131 commit







added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07














added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07






added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013


·
494c7a07

Steven Arzt authored Sep 19, 2013




494c7a07






494c7a07




494c7a07

18 Sep, 2013
1 commit
18 Sep, 20131 commit







Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f














Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f






Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.

·
25bbae8f

Steven Arzt authored Sep 18, 2013




25bbae8f






25bbae8f




25bbae8f

06 Sep, 2013
1 commit
06 Sep, 20131 commit







Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde














Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde






Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013


·
f0141dde

Marc-André Laverdière authored Sep 06, 2013




f0141dde






f0141dde




f0141dde

23 Jul, 2013
3 commits
23 Jul, 20133 commits







made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20













comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a














made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2










made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2






made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013


·
382bb1d2

Eric Bodden authored Jul 23, 2013




382bb1d2






382bb1d2




382bb1d2






bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20






bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013


·
b1fe6b20

Eric Bodden authored Jul 23, 2013




b1fe6b20






b1fe6b20




b1fe6b20






comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a










comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013






0b8c932a






comments for SummarizableAbstraction

·
0b8c932a


Eric Bodden authored Jul 23, 2013


·
0b8c932a

Eric Bodden authored Jul 23, 2013




0b8c932a






0b8c932a




0b8c932a

16 Jul, 2013
1 commit
16 Jul, 20131 commit







first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043














first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043






first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013


·
f161c043

Eric Bodden authored Jul 16, 2013




f161c043






f161c043




f161c043

11 Jul, 2013
2 commits
11 Jul, 20132 commits







simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c













improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312














simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c










simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013






bdc8348c






simplified exception handling

·
bdc8348c


Eric Bodden authored Jul 11, 2013


·
bdc8348c

Eric Bodden authored Jul 11, 2013




bdc8348c






bdc8348c




bdc8348c






improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312










improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013






f8827312






improved handling of number of threads (thanks Johannes!)

·
f8827312


Eric Bodden authored Jul 11, 2013


·
f8827312

Eric Bodden authored Jul 11, 2013




f8827312






f8827312




f8827312

10 Jul, 2013
2 commits
10 Jul, 20132 commits







removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe













shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575














removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe










removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013






3f7647fe






removing superfluous (hopefully?) call to scheduleEdgeProcessing

·
3f7647fe


Eric Bodden authored Jul 10, 2013


·
3f7647fe

Eric Bodden authored Jul 10, 2013




3f7647fe






3f7647fe




3f7647fe






shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575










shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013






cd7c8575






shutdown now

·
cd7c8575


Eric Bodden authored Jul 10, 2013


·
cd7c8575

Eric Bodden authored Jul 10, 2013




cd7c8575






cd7c8575




cd7c8575

09 Jul, 2013
4 commits
09 Jul, 20134 commits







removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14













comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6













removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d













first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2














removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14










removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013






83d31a14






removing notes

·
83d31a14


Eric Bodden authored Jul 09, 2013


·
83d31a14

Eric Bodden authored Jul 09, 2013




83d31a14






83d31a14




83d31a14






comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6










comments

·
14579ce6


Eric Bodden authored Jul 09, 2013






14579ce6






comments

·
14579ce6


Eric Bodden authored Jul 09, 2013


·
14579ce6

Eric Bodden authored Jul 09, 2013




14579ce6






14579ce6




14579ce6






removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d










removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013






4835598d






removed unused import

·
4835598d


Eric Bodden authored Jul 09, 2013


·
4835598d

Eric Bodden authored Jul 09, 2013




4835598d






4835598d




4835598d






first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2










first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns





1526d8d2






first version of fw-bw lockstep analysis that seems to be working; the trick...

·
1526d8d2





Eric Bodden authored Jul 09, 2013

first version of fw-bw lockstep analysis that seems to be working; the trick was apparently to distinguish balanced from unbalanced returns

·
1526d8d2

Eric Bodden authored Jul 09, 2013




1526d8d2






1526d8d2




1526d8d2

08 Jul, 2013
3 commits
08 Jul, 20133 commits







bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2













bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670













don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd














bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2










bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013






1a2d0aa2






bugfix: don't forget to change "source" attachment when unpausing an edge

·
1a2d0aa2


Eric Bodden authored Jul 08, 2013


·
1a2d0aa2

Eric Bodden authored Jul 08, 2013




1a2d0aa2






1a2d0aa2




1a2d0aa2






bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670










bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013






14372670






bugfix: must implement equals/hashCode for abstraction!

·
14372670


Eric Bodden authored Jul 08, 2013


·
14372670

Eric Bodden authored Jul 08, 2013




14372670






14372670




14372670






don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd










don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013






844fa2fd






don't pause conditional edges

·
844fa2fd


Eric Bodden authored Jul 08, 2013


·
844fa2fd

Eric Bodden authored Jul 08, 2013




844fa2fd






844fa2fd




844fa2fd

07 Jul, 2013
2 commits
07 Jul, 20132 commits







further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41













improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee














further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41










further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO





e8034a41






further fix for followReturnPastSeeds:

·
e8034a41





Eric Bodden authored Jul 08, 2013

regarding Steven's earlier fix we now follow a different strategy…
we propagate upwards in an unbalanced way only such facts that originate from ZERO

·
e8034a41

Eric Bodden authored Jul 08, 2013




e8034a41






e8034a41




e8034a41






improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee










improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier





44d17eee






improved and simplified handling of unbalanced problems:

·
44d17eee





Eric Bodden authored Jul 08, 2013

we now just propagate up the call stack in an unbalanced way if for the very flow fact we are looking at there
was no incoming flow observed earlier

·
44d17eee

Eric Bodden authored Jul 08, 2013




44d17eee






44d17eee




44d17eee

06 Jul, 2013
1 commit
06 Jul, 20131 commit







don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83














don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83










don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013






ae092b83






don't forget to clear pause list un unpause

·
ae092b83


Eric Bodden authored Jul 06, 2013


·
ae092b83

Eric Bodden authored Jul 06, 2013




ae092b83






ae092b83




ae092b83






