



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

b8ca40b0















Commit
b8ca40b0


authored
May 07, 2014
by


Johannes Lerch



Browse files




Tests for IDESolver







parent
f3b1b1f1













Changes
10




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ b8ca40b0






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true














junit.jar



0 → 100644




View file @ b8ca40b0





File added













org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0





File added













test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}














test/heros/Fact.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}














test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}














test/heros/Method.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}














test/heros/Statement.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}














test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

b8ca40b0















Commit
b8ca40b0


authored
May 07, 2014
by


Johannes Lerch



Browse files




Tests for IDESolver







parent
f3b1b1f1













Changes
10




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ b8ca40b0






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true














junit.jar



0 → 100644




View file @ b8ca40b0





File added













org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0





File added













test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}














test/heros/Fact.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}














test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}














test/heros/Method.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}














test/heros/Statement.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}














test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

b8ca40b0







Open sidebar



Joshua Garcia heros
Commits

b8ca40b0




Open sidebar

Joshua Garcia heros
Commits

b8ca40b0


Joshua GarciaherosherosCommits
b8ca40b0








Commit
b8ca40b0


authored
May 07, 2014
by


Johannes Lerch



Browse files




Tests for IDESolver







parent
f3b1b1f1













Changes
10




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ b8ca40b0






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true














junit.jar



0 → 100644




View file @ b8ca40b0





File added













org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0





File added













test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}














test/heros/Fact.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}














test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}














test/heros/Method.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}














test/heros/Statement.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}














test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
b8ca40b0


authored
May 07, 2014
by


Johannes Lerch



Browse files




Tests for IDESolver







parent
f3b1b1f1













Changes
10




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ b8ca40b0






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true














junit.jar



0 → 100644




View file @ b8ca40b0





File added













org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0





File added













test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}














test/heros/Fact.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}














test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}














test/heros/Method.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}














test/heros/Statement.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}














test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
b8ca40b0


authored
May 07, 2014
by


Johannes Lerch



Browse files



Commit
b8ca40b0


authored
May 07, 2014
by


Johannes Lerch

b8ca40b0authoredbyJohannes Lerch

Tests for IDESolver






parent
f3b1b1f1
















parent
f3b1b1f1





parent












Changes
10
10


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










.classpath








View file @ b8ca40b0






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true














junit.jar



0 → 100644




View file @ b8ca40b0





File added













org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0





File added













test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}














test/heros/Fact.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}














test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}














test/heros/Method.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}














test/heros/Statement.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}














test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}














.classpath








View file @ b8ca40b0






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>












.classpath








View file @ b8ca40b0








.classpath










View file @ b8ca40b0


b8ca40b0



......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>






......@@ -3,8 +3,11 @@









 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>


 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/><classpathentrykind="con"path="org.eclipse.jdt.launching.JRE_CONTAINER"/> <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/><classpathentrykind="con"path="org.eclipse.pde.core.requiredPlugins"/> <classpathentry kind="src" path="src"/><classpathentrykind="src"path="src"/> <classpathentry kind="src" path="test"/><classpathentrykind="src"path="test"/> <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/><classpathentryexported="true"kind="lib"path="guava-14.0.1.jar"/> <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/><classpathentryexported="true"kind="lib"path="slf4j-api-1.7.5.jar"/> <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/><classpathentryexported="true"kind="lib"path="slf4j-simple-1.7.5.jar"/> <classpathentry kind="lib" path="junit.jar"/><classpathentrykind="lib"path="junit.jar"/> <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/><classpathentrykind="lib"path="org.hamcrest.core_1.3.0.jar"/> <classpathentry kind="output" path="bin"/><classpathentrykind="output"path="bin"/></classpath></classpath>








.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true












.settings/org.eclipse.jdt.ui.prefs








View file @ b8ca40b0








.settings/org.eclipse.jdt.ui.prefs










View file @ b8ca40b0


b8ca40b0










eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true













eclipse.preferences.version=1










editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false










org.eclipse.jdt.ui.javadoc=false










org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>










sp_cleanup.add_default_serial_version_id=true










sp_cleanup.add_generated_serial_version_id=false










sp_cleanup.add_missing_annotations=true










sp_cleanup.add_missing_deprecated_annotations=true










sp_cleanup.add_missing_methods=false










sp_cleanup.add_missing_nls_tags=false










sp_cleanup.add_missing_override_annotations=true










sp_cleanup.add_missing_override_annotations_interface_methods=true










sp_cleanup.add_serial_version_id=false










sp_cleanup.always_use_blocks=true










sp_cleanup.always_use_parentheses_in_expressions=false










sp_cleanup.always_use_this_for_non_static_field_access=false










sp_cleanup.always_use_this_for_non_static_method_access=false










sp_cleanup.convert_to_enhanced_for_loop=false










sp_cleanup.correct_indentation=false










sp_cleanup.format_source_code=true










sp_cleanup.format_source_code_changes_only=false










sp_cleanup.make_local_variable_final=false










sp_cleanup.make_parameters_final=false










sp_cleanup.make_private_fields_final=true










sp_cleanup.make_type_abstract_if_missing_method=false










sp_cleanup.make_variable_declarations_final=true










sp_cleanup.never_use_blocks=false










sp_cleanup.never_use_parentheses_in_expressions=true










sp_cleanup.on_save_use_additional_actions=false










sp_cleanup.organize_imports=true










sp_cleanup.qualify_static_field_accesses_with_declaring_class=false










sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true










sp_cleanup.qualify_static_member_accesses_with_declaring_class=false










sp_cleanup.qualify_static_method_accesses_with_declaring_class=false










sp_cleanup.remove_private_constructors=true










sp_cleanup.remove_trailing_whitespaces=false










sp_cleanup.remove_trailing_whitespaces_all=true










sp_cleanup.remove_trailing_whitespaces_ignore_empty=false










sp_cleanup.remove_unnecessary_casts=true










sp_cleanup.remove_unnecessary_nls_tags=false










sp_cleanup.remove_unused_imports=false










sp_cleanup.remove_unused_local_variables=false










sp_cleanup.remove_unused_private_fields=true










sp_cleanup.remove_unused_private_members=false










sp_cleanup.remove_unused_private_methods=true










sp_cleanup.remove_unused_private_types=true










sp_cleanup.sort_members=false










sp_cleanup.sort_members_all=false










sp_cleanup.use_blocks=false










sp_cleanup.use_blocks_only_for_return_and_throw=false










sp_cleanup.use_parentheses_in_expressions=false










sp_cleanup.use_this_for_non_static_field_access=false










sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true










sp_cleanup.use_this_for_non_static_method_access=false










sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true


eclipse.preferences.version=1editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=falseorg.eclipse.jdt.ui.javadoc=falseorg.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="true" context\="gettercomment_context" deleted\="false" description\="Comment for getter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.gettercomment" name\="gettercomment">/**\n * @return the ${bare_field_name}\n */</template><template autoinsert\="true" context\="settercomment_context" deleted\="false" description\="Comment for setter method" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.settercomment" name\="settercomment">/**\n * @param ${param} the ${bare_field_name} to set\n */</template><template autoinsert\="true" context\="constructorcomment_context" deleted\="false" description\="Comment for created constructors" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorcomment" name\="constructorcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="filecomment_context" deleted\="false" description\="Comment for created Java files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.filecomment" name\="filecomment">/**\n * \n */</template><template autoinsert\="true" context\="typecomment_context" deleted\="false" description\="Comment for created types" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.typecomment" name\="typecomment">/**\n * @author ${user}\n *\n * ${tags}\n */</template><template autoinsert\="true" context\="fieldcomment_context" deleted\="false" description\="Comment for fields" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.fieldcomment" name\="fieldcomment">/**\n * \n */</template><template autoinsert\="true" context\="methodcomment_context" deleted\="false" description\="Comment for non-overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodcomment" name\="methodcomment">/**\n * ${tags}\n */</template><template autoinsert\="true" context\="overridecomment_context" deleted\="false" description\="Comment for overriding methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.overridecomment" name\="overridecomment">/* (non-Javadoc)\n * ${see_to_overridden}\n */</template><template autoinsert\="true" context\="delegatecomment_context" deleted\="false" description\="Comment for delegate methods" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.delegatecomment" name\="delegatecomment">/**\n * ${tags}\n * ${see_to_target}\n */</template><template autoinsert\="false" context\="newtype_context" deleted\="false" description\="Newly created files" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.newtype" name\="newtype">/*******************************************************************************\n * Copyright (c) ${year} Eric Bodden.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v2.1\n * which accompanies this distribution, and is available at\n * http\://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n * \n * Contributors\:\n *     Eric Bodden - initial API and implementation\n ******************************************************************************/\n${filecomment}\n${package_declaration}\n\n${typecomment}\n${type_declaration}</template><template autoinsert\="true" context\="classbody_context" deleted\="false" description\="Code in new class type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.classbody" name\="classbody">\n</template><template autoinsert\="true" context\="interfacebody_context" deleted\="false" description\="Code in new interface type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.interfacebody" name\="interfacebody">\n</template><template autoinsert\="true" context\="enumbody_context" deleted\="false" description\="Code in new enum type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.enumbody" name\="enumbody">\n</template><template autoinsert\="true" context\="annotationbody_context" deleted\="false" description\="Code in new annotation type bodies" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.annotationbody" name\="annotationbody">\n</template><template autoinsert\="true" context\="catchblock_context" deleted\="false" description\="Code in new catch blocks" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.catchblock" name\="catchblock">// ${todo} Auto-generated catch block\n${exception_var}.printStackTrace();</template><template autoinsert\="true" context\="methodbody_context" deleted\="false" description\="Code in created method stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.methodbody" name\="methodbody">// ${todo} Auto-generated method stub\n${body_statement}</template><template autoinsert\="true" context\="constructorbody_context" deleted\="false" description\="Code in created constructor stubs" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.constructorbody" name\="constructorbody">${body_statement}\n// ${todo} Auto-generated constructor stub</template><template autoinsert\="true" context\="getterbody_context" deleted\="false" description\="Code in created getters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.getterbody" name\="getterbody">return ${field};</template><template autoinsert\="true" context\="setterbody_context" deleted\="false" description\="Code in created setters" enabled\="true" id\="org.eclipse.jdt.ui.text.codetemplates.setterbody" name\="setterbody">${field} \= ${param};</template></templates>sp_cleanup.add_default_serial_version_id=truesp_cleanup.add_generated_serial_version_id=falsesp_cleanup.add_missing_annotations=truesp_cleanup.add_missing_deprecated_annotations=truesp_cleanup.add_missing_methods=falsesp_cleanup.add_missing_nls_tags=falsesp_cleanup.add_missing_override_annotations=truesp_cleanup.add_missing_override_annotations_interface_methods=truesp_cleanup.add_serial_version_id=falsesp_cleanup.always_use_blocks=truesp_cleanup.always_use_parentheses_in_expressions=falsesp_cleanup.always_use_this_for_non_static_field_access=falsesp_cleanup.always_use_this_for_non_static_method_access=falsesp_cleanup.convert_to_enhanced_for_loop=falsesp_cleanup.correct_indentation=falsesp_cleanup.format_source_code=truesp_cleanup.format_source_code_changes_only=falsesp_cleanup.make_local_variable_final=falsesp_cleanup.make_parameters_final=falsesp_cleanup.make_private_fields_final=truesp_cleanup.make_type_abstract_if_missing_method=falsesp_cleanup.make_variable_declarations_final=truesp_cleanup.never_use_blocks=falsesp_cleanup.never_use_parentheses_in_expressions=truesp_cleanup.on_save_use_additional_actions=falsesp_cleanup.organize_imports=truesp_cleanup.qualify_static_field_accesses_with_declaring_class=falsesp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=truesp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=truesp_cleanup.qualify_static_member_accesses_with_declaring_class=falsesp_cleanup.qualify_static_method_accesses_with_declaring_class=falsesp_cleanup.remove_private_constructors=truesp_cleanup.remove_trailing_whitespaces=falsesp_cleanup.remove_trailing_whitespaces_all=truesp_cleanup.remove_trailing_whitespaces_ignore_empty=falsesp_cleanup.remove_unnecessary_casts=truesp_cleanup.remove_unnecessary_nls_tags=falsesp_cleanup.remove_unused_imports=falsesp_cleanup.remove_unused_local_variables=falsesp_cleanup.remove_unused_private_fields=truesp_cleanup.remove_unused_private_members=falsesp_cleanup.remove_unused_private_methods=truesp_cleanup.remove_unused_private_types=truesp_cleanup.sort_members=falsesp_cleanup.sort_members_all=falsesp_cleanup.use_blocks=falsesp_cleanup.use_blocks_only_for_return_and_throw=falsesp_cleanup.use_parentheses_in_expressions=falsesp_cleanup.use_this_for_non_static_field_access=falsesp_cleanup.use_this_for_non_static_field_access_only_if_necessary=truesp_cleanup.use_this_for_non_static_method_access=falsesp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true








junit.jar



0 → 100644




View file @ b8ca40b0





File added











junit.jar



0 → 100644




View file @ b8ca40b0








junit.jar



0 → 100644






View file @ b8ca40b0
b8ca40b0


File added




File added


File added









org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0





File added











org.hamcrest.core_1.3.0.jar



0 → 100644




View file @ b8ca40b0








org.hamcrest.core_1.3.0.jar



0 → 100644






View file @ b8ca40b0
b8ca40b0


File added




File added


File added









test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}












test/heros/EdgeBuilder.java



0 → 100644







View file @ b8ca40b0








test/heros/EdgeBuilder.java



0 → 100644









View file @ b8ca40b0


b8ca40b0










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;





















import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;










import heros.TestHelper.ExpectedFlowFunction;










import heros.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {










 










 protected List<Edge> edges = Lists.newLinkedList();










 public Collection<Edge> edges() {










 if(edges.isEmpty()) {










 throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());










 }










 










 return edges;










 }





















 public static class CallSiteBuilder extends EdgeBuilder {





















 private Statement callSite;





















 public CallSiteBuilder(Statement callSite) {










 this.callSite = callSite;










 }





















 public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));










 return this;










 }










 










 public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));










 return this;










 }










 }










 










 public static class NormalStmtBuilder extends EdgeBuilder {





















 private Statement stmt;





















 public NormalStmtBuilder(Statement stmt) {










 this.stmt = stmt;










 }





















 public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));










 return this;










 }










 










 }










 










 public static class ExitStmtBuilder extends EdgeBuilder {





















 private Statement exitStmt;





















 public ExitStmtBuilder(Statement exitStmt) {










 this.exitStmt = exitStmt;










 }










 










 public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {










 edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));










 return this;










 }





















 public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {










 edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));










 return this;










 }










 










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import java.util.Collection;importjava.util.Collection;import java.util.List;importjava.util.List;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import heros.TestHelper.Edge;importheros.TestHelper.Edge;import heros.TestHelper.ExpectedFlowFunction;importheros.TestHelper.ExpectedFlowFunction;import heros.TestHelper.ReturnEdge;importheros.TestHelper.ReturnEdge;public abstract class EdgeBuilder {publicabstractclassEdgeBuilder{  protected List<Edge> edges = Lists.newLinkedList();protectedList<Edge>edges=Lists.newLinkedList(); public Collection<Edge> edges() {publicCollection<Edge>edges(){ if(edges.isEmpty()) {if(edges.isEmpty()){ throw new IllegalStateException("Not a single edge created on EdgeBuilder: "+toString());thrownewIllegalStateException("Not a single edge created on EdgeBuilder: "+toString()); }}  return edges;returnedges; }} public static class CallSiteBuilder extends EdgeBuilder {publicstaticclassCallSiteBuilderextendsEdgeBuilder{ private Statement callSite;privateStatementcallSite; public CallSiteBuilder(Statement callSite) {publicCallSiteBuilder(StatementcallSite){ this.callSite = callSite;this.callSite=callSite; }} public CallSiteBuilder calls(String method, ExpectedFlowFunction...flows) {publicCallSiteBuildercalls(Stringmethod,ExpectedFlowFunction...flows){ edges.add(new TestHelper.CallEdge(callSite, new Method(method), flows));edges.add(newTestHelper.CallEdge(callSite,newMethod(method),flows)); return this;returnthis; }}  public CallSiteBuilder retSite(String returnSite, ExpectedFlowFunction...flows) {publicCallSiteBuilderretSite(StringreturnSite,ExpectedFlowFunction...flows){ edges.add(new TestHelper.Call2ReturnEdge(callSite, new Statement(returnSite), flows));edges.add(newTestHelper.Call2ReturnEdge(callSite,newStatement(returnSite),flows)); return this;returnthis; }} }}  public static class NormalStmtBuilder extends EdgeBuilder {publicstaticclassNormalStmtBuilderextendsEdgeBuilder{ private Statement stmt;privateStatementstmt; public NormalStmtBuilder(Statement stmt) {publicNormalStmtBuilder(Statementstmt){ this.stmt = stmt;this.stmt=stmt; }} public NormalStmtBuilder succ(String succ, ExpectedFlowFunction... flows) {publicNormalStmtBuildersucc(Stringsucc,ExpectedFlowFunction...flows){ edges.add(new TestHelper.NormalEdge(stmt, new Statement(succ), flows));edges.add(newTestHelper.NormalEdge(stmt,newStatement(succ),flows)); return this;returnthis; }}  }}  public static class ExitStmtBuilder extends EdgeBuilder {publicstaticclassExitStmtBuilderextendsEdgeBuilder{ private Statement exitStmt;privateStatementexitStmt; public ExitStmtBuilder(Statement exitStmt) {publicExitStmtBuilder(StatementexitStmt){ this.exitStmt = exitStmt;this.exitStmt=exitStmt; }}  public ExitStmtBuilder expectArtificalFlow(ExpectedFlowFunction...flows) {publicExitStmtBuilderexpectArtificalFlow(ExpectedFlowFunction...flows){ edges.add(new TestHelper.ReturnEdge(null, exitStmt, null, flows));edges.add(newTestHelper.ReturnEdge(null,exitStmt,null,flows)); return this;returnthis; }} public ExitStmtBuilder returns(Statement callSite, Statement returnSite, ExpectedFlowFunction... flows) {publicExitStmtBuilderreturns(StatementcallSite,StatementreturnSite,ExpectedFlowFunction...flows){ edges.add(new TestHelper.ReturnEdge(callSite, exitStmt, returnSite, flows));edges.add(newTestHelper.ReturnEdge(callSite,exitStmt,returnSite,flows)); return this;returnthis; }}  }}}}








test/heros/Fact.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}












test/heros/Fact.java



0 → 100644







View file @ b8ca40b0








test/heros/Fact.java



0 → 100644









View file @ b8ca40b0


b8ca40b0










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Fact {





















 public final String name;










 










 public Fact(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Fact))










 return false;










 Fact other = (Fact) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Fact "+name+"]";










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;public class Fact {publicclassFact{ public final String name;publicfinalStringname;  public Fact(String name) {publicFact(Stringname){ this.name = name;this.name=name; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((name == null) ? 0 : name.hashCode());result=prime*result+((name==null)?0:name.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof Fact))if(!(objinstanceofFact)) return false;returnfalse; Fact other = (Fact) obj;Factother=(Fact)obj; if (name == null) {if(name==null){ if (other.name != null)if(other.name!=null) return false;returnfalse; } else if (!name.equals(other.name))}elseif(!name.equals(other.name)) return false;returnfalse; return true;returntrue; }}  @Override@Override public String toString() {publicStringtoString(){ return "[Fact "+name+"]";return"[Fact "+name+"]"; }}}}








test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}












test/heros/IFDSSolverTest.java



0 → 100644







View file @ b8ca40b0








test/heros/IFDSSolverTest.java



0 → 100644









View file @ b8ca40b0


b8ca40b0










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import org.junit.Before;










import org.junit.Test;





















import static heros.TestHelper.*;





















public class IFDSSolverTest {





















 private TestHelper helper;





















 @Before










 public void before() {










 helper = new TestHelper();










 }










 










 @Test










 public void test() {










 helper.method("bar", 










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "x")),










 normalStmt("b").succ("c", flow("x", "x")),










 callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));










 










 helper.method("foo",










 startPoints("d"),










 normalStmt("d").succ("e", flow("y", "y", "z")),










 exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void reuseSummary() {










 helper.method("foo", 










 startPoints("a"),










 callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),










 callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),










 normalStmt("c").succ("c0", flow("w", "0")));










 










 helper.method("bar",










 startPoints("d"),










 normalStmt("d").succ("e", flow("x", "z")),










 exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))










 .returns(over("b"), to("c"), flow("z", "w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void branch() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),










 normalStmt("b1").succ("c", flow("x", "x", "y")),










 normalStmt("b2").succ("c", flow("x", "x")),










 normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),










 normalStmt("d").succ("e", flow("z"), flow("w")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void unbalancedReturn() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));










 










 helper.method("bar", 










 startPoints("unused"),










 normalStmt("y").succ("z", flow("1", "2")));










 










 helper.runSolver(true, "a");










 }










 










 @Test










 public void artificalReturnEdgeForNoCallersCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 exitStmt("b").returns(null, null, flow("1", "1")));










 










 helper.runSolver(true, "a");










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import static heros.TestHelper.*;importstaticheros.TestHelper.*;public class IFDSSolverTest {publicclassIFDSSolverTest{ private TestHelper helper;privateTestHelperhelper; @Before@Before public void before() {publicvoidbefore(){ helper = new TestHelper();helper=newTestHelper(); }}  @Test@Test public void test() {publicvoidtest(){ helper.method("bar", helper.method("bar", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "x")),normalStmt("a").succ("b",flow("0","x")), normalStmt("b").succ("c", flow("x", "x")),normalStmt("b").succ("c",flow("x","x")), callSite("c").calls("foo", flow("x", "y")).retSite("f", flow("x", "x")));callSite("c").calls("foo",flow("x","y")).retSite("f",flow("x","x")));  helper.method("foo",helper.method("foo", startPoints("d"),startPoints("d"), normalStmt("d").succ("e", flow("y", "y", "z")),normalStmt("d").succ("e",flow("y","y","z")), exitStmt("e").returns(over("c"), to("f"), flow("z", "u"), flow("y")));exitStmt("e").returns(over("c"),to("f"),flow("z","u"),flow("y")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void reuseSummary() {publicvoidreuseSummary(){ helper.method("foo", helper.method("foo", startPoints("a"),startPoints("a"), callSite("a").calls("bar", flow("0", "x")).retSite("b", flow("0", "y")),callSite("a").calls("bar",flow("0","x")).retSite("b",flow("0","y")), callSite("b").calls("bar", flow("y", "x")).retSite("c", flow("y")),callSite("b").calls("bar",flow("y","x")).retSite("c",flow("y")), normalStmt("c").succ("c0", flow("w", "0")));normalStmt("c").succ("c0",flow("w","0")));  helper.method("bar",helper.method("bar", startPoints("d"),startPoints("d"), normalStmt("d").succ("e", flow("x", "z")),normalStmt("d").succ("e",flow("x","z")), exitStmt("e").returns(over("a"), to("b"), flow("z", "y"))exitStmt("e").returns(over("a"),to("b"),flow("z","y")) .returns(over("b"), to("c"), flow("z", "w")));.returns(over("b"),to("c"),flow("z","w")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void branch() {publicvoidbranch(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b1", flow("0", "x")).succ("b2", flow("0", "x")),normalStmt("a").succ("b1",flow("0","x")).succ("b2",flow("0","x")), normalStmt("b1").succ("c", flow("x", "x", "y")),normalStmt("b1").succ("c",flow("x","x","y")), normalStmt("b2").succ("c", flow("x", "x")),normalStmt("b2").succ("c",flow("x","x")), normalStmt("c").succ("d", flow("x", "z"), flow("y", "w")),normalStmt("c").succ("d",flow("x","z"),flow("y","w")), normalStmt("d").succ("e", flow("z"), flow("w")));normalStmt("d").succ("e",flow("z"),flow("w")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void unbalancedReturn() {publicvoidunbalancedReturn(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), exitStmt("b").returns(over("x"), to("y"), flow("1", "1")));exitStmt("b").returns(over("x"),to("y"),flow("1","1")));  helper.method("bar", helper.method("bar", startPoints("unused"),startPoints("unused"), normalStmt("y").succ("z", flow("1", "2")));normalStmt("y").succ("z",flow("1","2")));  helper.runSolver(true, "a");helper.runSolver(true,"a"); }}  @Test@Test public void artificalReturnEdgeForNoCallersCase() {publicvoidartificalReturnEdgeForNoCallersCase(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), exitStmt("b").returns(null, null, flow("1", "1")));exitStmt("b").returns(null,null,flow("1","1")));  helper.runSolver(true, "a");helper.runSolver(true,"a"); }}}}








test/heros/Method.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}












test/heros/Method.java



0 → 100644







View file @ b8ca40b0








test/heros/Method.java



0 → 100644









View file @ b8ca40b0


b8ca40b0










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Method {





















 public final String name;










 










 public Method(String name) {










 this.name = name;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((name == null) ? 0 : name.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 return false;










 Method other = (Method) obj;










 if (name == null) {










 if (other.name != null)










 return false;










 } else if (!name.equals(other.name))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Method "+name+"]";










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;public class Method {publicclassMethod{ public final String name;publicfinalStringname;  public Method(String name) {publicMethod(Stringname){ this.name = name;this.name=name; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((name == null) ? 0 : name.hashCode());result=prime*result+((name==null)?0:name.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof Method))if(!(objinstanceofMethod)) return false;returnfalse; Method other = (Method) obj;Methodother=(Method)obj; if (name == null) {if(name==null){ if (other.name != null)if(other.name!=null) return false;returnfalse; } else if (!name.equals(other.name))}elseif(!name.equals(other.name)) return false;returnfalse; return true;returntrue; }}  @Override@Override public String toString() {publicStringtoString(){ return "[Method "+name+"]";return"[Method "+name+"]"; }}}}








test/heros/Statement.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}












test/heros/Statement.java



0 → 100644







View file @ b8ca40b0








test/heros/Statement.java



0 → 100644









View file @ b8ca40b0


b8ca40b0










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















public class Statement {





















 public final String identifier;










 










 public Statement(String identifier) {










 this.identifier = identifier;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 return false;










 Statement other = (Statement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;










 } else if (!identifier.equals(other.identifier))










 return false;










 return true;










 }










 










 @Override










 public String toString() {










 return "[Statement "+identifier+"]";










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;public class Statement {publicclassStatement{ public final String identifier;publicfinalStringidentifier;  public Statement(String identifier) {publicStatement(Stringidentifier){ this.identifier = identifier;this.identifier=identifier; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((identifier == null) ? 0 : identifier.hashCode());result=prime*result+((identifier==null)?0:identifier.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof Statement))if(!(objinstanceofStatement)) return false;returnfalse; Statement other = (Statement) obj;Statementother=(Statement)obj; if (identifier == null) {if(identifier==null){ if (other.identifier != null)if(other.identifier!=null) return false;returnfalse; } else if (!identifier.equals(other.identifier))}elseif(!identifier.equals(other.identifier)) return false;returnfalse; return true;returntrue; }}  @Override@Override public String toString() {publicStringtoString(){ return "[Statement "+identifier+"]";return"[Statement "+identifier+"]"; }}}}








test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}












test/heros/TestHelper.java



0 → 100644







View file @ b8ca40b0








test/heros/TestHelper.java



0 → 100644









View file @ b8ca40b0


b8ca40b0










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros;





















import static org.junit.Assert.assertTrue;










import heros.solver.IFDSSolver;










import heros.solver.Pair;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Sets;





















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());










 }










 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;










 }










 return false;










 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {










 return edge.callSite.equals(stmt);










 }










 });










 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 for(ReturnEdge edge : returnEdges) {










 if(edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);










 }










 return result;










 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 for (ReturnEdge edge : returnEdges) {










 if (edge.includeInCfg && edge.calleeMethod.equals(m)) {










 result.add(edge.callSite);










 }










 }










 return result;










 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);










 }










 }










 return result;










 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };










 }





















 public void assertAllFlowFunctionsUsed() {










 assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),










 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;





















 public MethodHelper(Method method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 










 edge.accept(new EdgeVisitor() {










 @Override










 public void visit(heros.TestHelper.ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.exitStmt, method);










 edge.calleeMethod = method;










 returnEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.Call2ReturnEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 addOrVerifyStmt2Method(edge.returnSite, method);










 call2retEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.CallEdge edge) {










 addOrVerifyStmt2Method(edge.callSite, method);










 callEdges.add(edge);










 }










 










 @Override










 public void visit(heros.TestHelper.NormalEdge edge) {










 addOrVerifyStmt2Method(edge.unit, method);










 addOrVerifyStmt2Method(edge.succUnit, method);










 normalEdges.add(edge);










 }










 });










 }










 }





















 public void startPoints(Statement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final Fact[] targets;










 public Edge edge;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 this.source = source;










 this.targets = targets;










 }





















 @Override










 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 }










 










 private static interface EdgeVisitor {










 void visit(NormalEdge edge);










 void visit(CallEdge edge);










 void visit(Call2ReturnEdge edge);










 void visit(ReturnEdge edge);










 }





















 public static abstract class Edge {










 public final ExpectedFlowFunction[] flowFunctions;










 public boolean includeInCfg = true;





















 public Edge(ExpectedFlowFunction...flowFunctions) {










 this.flowFunctions = flowFunctions;










 for(ExpectedFlowFunction ff : flowFunctions) {










 ff.edge = this;










 }










 }










 










 public abstract void accept(EdgeVisitor visitor);










 }





















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;










 }





















 @Override










 public String toString() {










 return String.format("%s -normal-> %s", unit, succUnit);










 }





















 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;










 }





















 @Override










 public String toString() {










 return String.format("%s -call-> %s", callSite, destinationMethod);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;










 }





















 @Override










 public String toString() {










 return String.format("%s -call2ret-> %s", callSite, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }





















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;










 this.returnSite = returnSite;










 if(callSite == null || returnSite == null)










 includeInCfg = false;










 }





















 @Override










 public String toString() {










 return String.format("%s -return-> %s", exitStmt, returnSite);










 }










 










 @Override










 public void accept(EdgeVisitor visitor) {










 visitor.visit(this);










 }










 }










 










 private static boolean nullAwareEquals(Object a, Object b) {










 if(a == null)










 return b==null;










 else










 return a.equals(b);










 }





















 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, Fact, Method>() {





















 @Override










 public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,










 returnSite, callSite, calleeMethod));










 }





















 @Override










 public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 }





















 @Override










 public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));










 }





















 @Override










 public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<Fact>() {










 @Override










 public Set<Fact> computeTargets(Fact source) {










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 return Sets.newHashSet(ff.targets);










 } else {










 throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));










 }










 }










 }










 throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));










 }










 };










 }










 };










 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();










 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(










 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















 @Override










 public boolean followReturnsPastSeeds() {










 return followReturnsPastSeeds;










 }





















 @Override










 public boolean autoAddZero() {










 return false;










 }





















 @Override










 public int numThreads() {










 return 1;










 }





















 @Override










 public boolean computeValues() {










 return false;










 }





















 @Override










 public FlowFunctions<Statement, Fact, Method> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 }










 });





















 solver.solve();










 assertAllFlowFunctionsUsed();










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import heros.solver.Pair;importheros.solver.Pair;import java.util.Collection;importjava.util.Collection;import java.util.LinkedList;importjava.util.LinkedList;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.base.Function;importcom.google.common.base.Function;import com.google.common.base.Joiner;importcom.google.common.base.Joiner;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.collect.HashMultimap;importcom.google.common.collect.HashMultimap;import com.google.common.collect.Iterables;importcom.google.common.collect.Iterables;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Multimap;importcom.google.common.collect.Multimap;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public class TestHelper {publicclassTestHelper{ private Multimap<Method, Statement> method2startPoint = HashMultimap.create();privateMultimap<Method,Statement>method2startPoint=HashMultimap.create(); private List<NormalEdge> normalEdges = Lists.newLinkedList();privateList<NormalEdge>normalEdges=Lists.newLinkedList(); private List<CallEdge> callEdges = Lists.newLinkedList();privateList<CallEdge>callEdges=Lists.newLinkedList(); private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();privateList<Call2ReturnEdge>call2retEdges=Lists.newLinkedList(); private List<ReturnEdge> returnEdges = Lists.newLinkedList();privateList<ReturnEdge>returnEdges=Lists.newLinkedList(); private Map<Statement, Method> stmt2method = Maps.newHashMap();privateMap<Statement,Method>stmt2method=Maps.newHashMap(); private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();privateSet<ExpectedFlowFunction>remainingFlowFunctions=Sets.newHashSet(); public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {publicMethodHelpermethod(StringmethodName,Statement[]startingPoints,EdgeBuilder...edgeBuilders){ MethodHelper methodHelper = new MethodHelper(new Method(methodName));MethodHelpermethodHelper=newMethodHelper(newMethod(methodName)); methodHelper.startPoints(startingPoints);methodHelper.startPoints(startingPoints); for(EdgeBuilder edgeBuilder : edgeBuilders){for(EdgeBuilderedgeBuilder:edgeBuilders){ methodHelper.edges(edgeBuilder.edges());methodHelper.edges(edgeBuilder.edges()); }} return methodHelper;returnmethodHelper; }} public static Statement[] startPoints(String... startingPoints) {publicstaticStatement[]startPoints(String...startingPoints){ Statement[] result = new Statement[startingPoints.length];Statement[]result=newStatement[startingPoints.length]; for (int i = 0; i < result.length; i++) {for(inti=0;i<result.length;i++){ result[i] = new Statement(startingPoints[i]);result[i]=newStatement(startingPoints[i]); }} return result;returnresult; }} public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {publicstaticEdgeBuilder.NormalStmtBuildernormalStmt(Stringstmt){ return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));returnnewEdgeBuilder.NormalStmtBuilder(newStatement(stmt)); }}  public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {publicstaticEdgeBuilder.CallSiteBuildercallSite(StringcallSite){ return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));returnnewEdgeBuilder.CallSiteBuilder(newStatement(callSite)); }}  public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {publicstaticEdgeBuilder.ExitStmtBuilderexitStmt(StringexitStmt){ return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));returnnewEdgeBuilder.ExitStmtBuilder(newStatement(exitStmt)); }}  public static Statement over(String callSite) {publicstaticStatementover(StringcallSite){ return new Statement(callSite);returnnewStatement(callSite); }}  public static Statement to(String returnSite) {publicstaticStatementto(StringreturnSite){ return new Statement(returnSite);returnnewStatement(returnSite); }}  public static ExpectedFlowFunction flow(String source, String... targets) {publicstaticExpectedFlowFunctionflow(Stringsource,String...targets){ Fact[] targetFacts = new Fact[targets.length];Fact[]targetFacts=newFact[targets.length]; for(int i=0; i<targets.length; i++) {for(inti=0;i<targets.length;i++){ targetFacts[i] = new Fact(targets[i]);targetFacts[i]=newFact(targets[i]); }} return new ExpectedFlowFunction(new Fact(source), targetFacts);returnnewExpectedFlowFunction(newFact(source),targetFacts); }} public InterproceduralCFG<Statement, Method> buildIcfg() {publicInterproceduralCFG<Statement,Method>buildIcfg(){ return new InterproceduralCFG<Statement, Method>() {returnnewInterproceduralCFG<Statement,Method>(){ @Override@Override public boolean isStartPoint(Statement stmt) {publicbooleanisStartPoint(Statementstmt){ return method2startPoint.values().contains(stmt);returnmethod2startPoint.values().contains(stmt); }} @Override@Override public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {publicbooleanisFallThroughSuccessor(Statementstmt,Statementsucc){ throw new IllegalStateException();thrownewIllegalStateException(); }} @Override@Override public boolean isExitStmt(Statement stmt) {publicbooleanisExitStmt(Statementstmt){ for(ReturnEdge edge : returnEdges) {for(ReturnEdgeedge:returnEdges){ if(edge.exitStmt.equals(stmt))if(edge.exitStmt.equals(stmt)) return true;returntrue; }} return false;returnfalse; }} @Override@Override public boolean isCallStmt(final Statement stmt) {publicbooleanisCallStmt(finalStatementstmt){ return Iterables.any(callEdges, new Predicate<CallEdge>() {returnIterables.any(callEdges,newPredicate<CallEdge>(){ @Override@Override public boolean apply(CallEdge edge) {publicbooleanapply(CallEdgeedge){ return edge.callSite.equals(stmt);returnedge.callSite.equals(stmt); }} });}); }} @Override@Override public boolean isBranchTarget(Statement stmt, Statement succ) {publicbooleanisBranchTarget(Statementstmt,Statementsucc){ throw new IllegalStateException();thrownewIllegalStateException(); }} @Override@Override public List<Statement> getSuccsOf(Statement n) {publicList<Statement>getSuccsOf(Statementn){ LinkedList<Statement> result = Lists.newLinkedList();LinkedList<Statement>result=Lists.newLinkedList(); for (NormalEdge edge : normalEdges) {for(NormalEdgeedge:normalEdges){ if (edge.includeInCfg && edge.unit.equals(n))if(edge.includeInCfg&&edge.unit.equals(n)) result.add(edge.succUnit);result.add(edge.succUnit); }} return result;returnresult; }} @Override@Override public Collection<Statement> getStartPointsOf(Method m) {publicCollection<Statement>getStartPointsOf(Methodm){ return method2startPoint.get(m);returnmethod2startPoint.get(m); }} @Override@Override public Collection<Statement> getReturnSitesOfCallAt(Statement n) {publicCollection<Statement>getReturnSitesOfCallAt(Statementn){ Set<Statement> result = Sets.newHashSet();Set<Statement>result=Sets.newHashSet(); for (Call2ReturnEdge edge : call2retEdges) {for(Call2ReturnEdgeedge:call2retEdges){ if (edge.includeInCfg && edge.callSite.equals(n))if(edge.includeInCfg&&edge.callSite.equals(n)) result.add(edge.returnSite);result.add(edge.returnSite); }} for(ReturnEdge edge : returnEdges) {for(ReturnEdgeedge:returnEdges){ if(edge.includeInCfg && edge.callSite.equals(n))if(edge.includeInCfg&&edge.callSite.equals(n)) result.add(edge.returnSite);result.add(edge.returnSite); }} return result;returnresult; }} @Override@Override public Method getMethodOf(Statement n) {publicMethodgetMethodOf(Statementn){ return stmt2method.get(n);returnstmt2method.get(n); }} @Override@Override public Set<Statement> getCallsFromWithin(Method m) {publicSet<Statement>getCallsFromWithin(Methodm){ throw new IllegalStateException();thrownewIllegalStateException(); }} @Override@Override public Collection<Statement> getCallersOf(Method m) {publicCollection<Statement>getCallersOf(Methodm){ Set<Statement> result = Sets.newHashSet();Set<Statement>result=Sets.newHashSet(); for (CallEdge edge : callEdges) {for(CallEdgeedge:callEdges){ if (edge.includeInCfg && edge.destinationMethod.equals(m)) {if(edge.includeInCfg&&edge.destinationMethod.equals(m)){ result.add(edge.callSite);result.add(edge.callSite); }} }} for (ReturnEdge edge : returnEdges) {for(ReturnEdgeedge:returnEdges){ if (edge.includeInCfg && edge.calleeMethod.equals(m)) {if(edge.includeInCfg&&edge.calleeMethod.equals(m)){ result.add(edge.callSite);result.add(edge.callSite); }} }} return result;returnresult; }} @Override@Override public Collection<Method> getCalleesOfCallAt(Statement n) {publicCollection<Method>getCalleesOfCallAt(Statementn){ List<Method> result = Lists.newLinkedList();List<Method>result=Lists.newLinkedList(); for (CallEdge edge : callEdges) {for(CallEdgeedge:callEdges){ if (edge.includeInCfg && edge.callSite.equals(n)) {if(edge.includeInCfg&&edge.callSite.equals(n)){ result.add(edge.destinationMethod);result.add(edge.destinationMethod); }} }} return result;returnresult; }} @Override@Override public Set<Statement> allNonCallStartNodes() {publicSet<Statement>allNonCallStartNodes(){ throw new IllegalStateException();thrownewIllegalStateException(); }} };}; }} public void assertAllFlowFunctionsUsed() {publicvoidassertAllFlowFunctionsUsed(){ assertTrue("These Flow Functions were expected, but never used: \n" + Joiner.on(",\n").join(remainingFlowFunctions),assertTrue("These Flow Functions were expected, but never used: \n"+Joiner.on(",\n").join(remainingFlowFunctions), remainingFlowFunctions.isEmpty());remainingFlowFunctions.isEmpty()); }} private void addOrVerifyStmt2Method(Statement stmt, Method m) {privatevoidaddOrVerifyStmt2Method(Statementstmt,Methodm){ if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {if(stmt2method.containsKey(stmt)&&!stmt2method.get(stmt).equals(m)){ throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));thrownewIllegalArgumentException("Statement "+stmt+" is used in multiple methods: "+m+" and "+stmt2method.get(stmt)); }} stmt2method.put(stmt, m);stmt2method.put(stmt,m); }} public MethodHelper method(Method method) {publicMethodHelpermethod(Methodmethod){ MethodHelper h = new MethodHelper(method);MethodHelperh=newMethodHelper(method); return h;returnh; }} public class MethodHelper {publicclassMethodHelper{ private Method method;privateMethodmethod; public MethodHelper(Method method) {publicMethodHelper(Methodmethod){ this.method = method;this.method=method; }} public void edges(Collection<Edge> edges) {publicvoidedges(Collection<Edge>edges){ for(Edge edge : edges) {for(Edgeedge:edges){ remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));  edge.accept(new EdgeVisitor() {edge.accept(newEdgeVisitor(){ @Override@Override public void visit(heros.TestHelper.ReturnEdge edge) {publicvoidvisit(heros.TestHelper.ReturnEdgeedge){ addOrVerifyStmt2Method(edge.exitStmt, method);addOrVerifyStmt2Method(edge.exitStmt,method); edge.calleeMethod = method;edge.calleeMethod=method; returnEdges.add(edge);returnEdges.add(edge); }}  @Override@Override public void visit(heros.TestHelper.Call2ReturnEdge edge) {publicvoidvisit(heros.TestHelper.Call2ReturnEdgeedge){ addOrVerifyStmt2Method(edge.callSite, method);addOrVerifyStmt2Method(edge.callSite,method); addOrVerifyStmt2Method(edge.returnSite, method);addOrVerifyStmt2Method(edge.returnSite,method); call2retEdges.add(edge);call2retEdges.add(edge); }}  @Override@Override public void visit(heros.TestHelper.CallEdge edge) {publicvoidvisit(heros.TestHelper.CallEdgeedge){ addOrVerifyStmt2Method(edge.callSite, method);addOrVerifyStmt2Method(edge.callSite,method); callEdges.add(edge);callEdges.add(edge); }}  @Override@Override public void visit(heros.TestHelper.NormalEdge edge) {publicvoidvisit(heros.TestHelper.NormalEdgeedge){ addOrVerifyStmt2Method(edge.unit, method);addOrVerifyStmt2Method(edge.unit,method); addOrVerifyStmt2Method(edge.succUnit, method);addOrVerifyStmt2Method(edge.succUnit,method); normalEdges.add(edge);normalEdges.add(edge); }} });}); }} }} public void startPoints(Statement[] startingPoints) {publicvoidstartPoints(Statement[]startingPoints){ method2startPoint.putAll(method, Lists.newArrayList(startingPoints));method2startPoint.putAll(method,Lists.newArrayList(startingPoints)); }} }}  public static class ExpectedFlowFunction {publicstaticclassExpectedFlowFunction{ public final Fact source;publicfinalFactsource; public final Fact[] targets;publicfinalFact[]targets; public Edge edge;publicEdgeedge; public ExpectedFlowFunction(Fact source, Fact... targets) {publicExpectedFlowFunction(Factsource,Fact...targets){ this.source = source;this.source=source; this.targets = targets;this.targets=targets; }} @Override@Override public String toString() {publicStringtoString(){ return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));returnString.format("%s: %s -> {%s}",edge,source,Joiner.on(",").join(targets)); }} }}  private static interface EdgeVisitor {privatestaticinterfaceEdgeVisitor{ void visit(NormalEdge edge);voidvisit(NormalEdgeedge); void visit(CallEdge edge);voidvisit(CallEdgeedge); void visit(Call2ReturnEdge edge);voidvisit(Call2ReturnEdgeedge); void visit(ReturnEdge edge);voidvisit(ReturnEdgeedge); }} public static abstract class Edge {publicstaticabstractclassEdge{ public final ExpectedFlowFunction[] flowFunctions;publicfinalExpectedFlowFunction[]flowFunctions; public boolean includeInCfg = true;publicbooleanincludeInCfg=true; public Edge(ExpectedFlowFunction...flowFunctions) {publicEdge(ExpectedFlowFunction...flowFunctions){ this.flowFunctions = flowFunctions;this.flowFunctions=flowFunctions; for(ExpectedFlowFunction ff : flowFunctions) {for(ExpectedFlowFunctionff:flowFunctions){ ff.edge = this;ff.edge=this; }} }}  public abstract void accept(EdgeVisitor visitor);publicabstractvoidaccept(EdgeVisitorvisitor); }} public static class NormalEdge extends Edge {publicstaticclassNormalEdgeextendsEdge{ private Statement unit;privateStatementunit; private Statement succUnit;privateStatementsuccUnit; public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {publicNormalEdge(Statementunit,StatementsuccUnit,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.unit = unit;this.unit=unit; this.succUnit = succUnit;this.succUnit=succUnit; }} @Override@Override public String toString() {publicStringtoString(){ return String.format("%s -normal-> %s", unit, succUnit);returnString.format("%s -normal-> %s",unit,succUnit); }} @Override@Override public void accept(EdgeVisitor visitor) {publicvoidaccept(EdgeVisitorvisitor){ visitor.visit(this);visitor.visit(this); }} }} public static class CallEdge extends Edge {publicstaticclassCallEdgeextendsEdge{ private Statement callSite;privateStatementcallSite; private Method destinationMethod;privateMethoddestinationMethod; public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {publicCallEdge(StatementcallSite,MethoddestinationMethod,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.callSite = callSite;this.callSite=callSite; this.destinationMethod = destinationMethod;this.destinationMethod=destinationMethod; }} @Override@Override public String toString() {publicStringtoString(){ return String.format("%s -call-> %s", callSite, destinationMethod);returnString.format("%s -call-> %s",callSite,destinationMethod); }}  @Override@Override public void accept(EdgeVisitor visitor) {publicvoidaccept(EdgeVisitorvisitor){ visitor.visit(this);visitor.visit(this); }} }} public static class Call2ReturnEdge extends Edge {publicstaticclassCall2ReturnEdgeextendsEdge{ private Statement callSite;privateStatementcallSite; private Statement returnSite;privateStatementreturnSite; public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {publicCall2ReturnEdge(StatementcallSite,StatementreturnSite,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.callSite = callSite;this.callSite=callSite; this.returnSite = returnSite;this.returnSite=returnSite; }} @Override@Override public String toString() {publicStringtoString(){ return String.format("%s -call2ret-> %s", callSite, returnSite);returnString.format("%s -call2ret-> %s",callSite,returnSite); }}  @Override@Override public void accept(EdgeVisitor visitor) {publicvoidaccept(EdgeVisitorvisitor){ visitor.visit(this);visitor.visit(this); }} }} public static class ReturnEdge extends Edge {publicstaticclassReturnEdgeextendsEdge{ private Statement exitStmt;privateStatementexitStmt; private Statement returnSite;privateStatementreturnSite; private Statement callSite;privateStatementcallSite; private Method calleeMethod;privateMethodcalleeMethod; public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {publicReturnEdge(StatementcallSite,StatementexitStmt,StatementreturnSite,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.callSite = callSite;this.callSite=callSite; this.exitStmt = exitStmt;this.exitStmt=exitStmt; this.returnSite = returnSite;this.returnSite=returnSite; if(callSite == null || returnSite == null)if(callSite==null||returnSite==null) includeInCfg = false;includeInCfg=false; }} @Override@Override public String toString() {publicStringtoString(){ return String.format("%s -return-> %s", exitStmt, returnSite);returnString.format("%s -return-> %s",exitStmt,returnSite); }}  @Override@Override public void accept(EdgeVisitor visitor) {publicvoidaccept(EdgeVisitorvisitor){ visitor.visit(this);visitor.visit(this); }} }}  private static boolean nullAwareEquals(Object a, Object b) {privatestaticbooleannullAwareEquals(Objecta,Objectb){ if(a == null)if(a==null) return b==null;returnb==null; elseelse return a.equals(b);returna.equals(b); }} public FlowFunctions<Statement, Fact, Method> flowFunctions() {publicFlowFunctions<Statement,Fact,Method>flowFunctions(){ return new FlowFunctions<Statement, Fact, Method>() {returnnewFlowFunctions<Statement,Fact,Method>(){ @Override@Override public FlowFunction<Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {publicFlowFunction<Fact>getReturnFlowFunction(StatementcallSite,MethodcalleeMethod,StatementexitStmt,StatementreturnSite){ for (final ReturnEdge edge : returnEdges) {for(finalReturnEdgeedge:returnEdges){ if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)if(nullAwareEquals(callSite,edge.callSite)&&edge.calleeMethod.equals(calleeMethod) && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {&&edge.exitStmt.equals(exitStmt)&&nullAwareEquals(edge.returnSite,returnSite)){ return createFlowFunction(edge);returncreateFlowFunction(edge); }} }} throw new AssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)", exitStmt,thrownewAssertionError(String.format("No Flow Function expected for return edge %s -> %s (call edge: %s -> %s)",exitStmt, returnSite, callSite, calleeMethod));returnSite,callSite,calleeMethod)); }} @Override@Override public FlowFunction<Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {publicFlowFunction<Fact>getNormalFlowFunction(finalStatementcurr,finalStatementsucc){ for (final NormalEdge edge : normalEdges) {for(finalNormalEdgeedge:normalEdges){ if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {if(edge.unit.equals(curr)&&edge.succUnit.equals(succ)){ return createFlowFunction(edge);returncreateFlowFunction(edge); }} }} throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));thrownewAssertionError(String.format("No Flow Function expected for %s -> %s",curr,succ)); }} @Override@Override public FlowFunction<Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {publicFlowFunction<Fact>getCallToReturnFlowFunction(StatementcallSite,StatementreturnSite){ for (final Call2ReturnEdge edge : call2retEdges) {for(finalCall2ReturnEdgeedge:call2retEdges){ if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {if(edge.callSite.equals(callSite)&&edge.returnSite.equals(returnSite)){ return createFlowFunction(edge);returncreateFlowFunction(edge); }} }} throw new AssertionError(String.format("No Flow Function expected for call to return edge %s -> %s", callSite, returnSite));thrownewAssertionError(String.format("No Flow Function expected for call to return edge %s -> %s",callSite,returnSite)); }} @Override@Override public FlowFunction<Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {publicFlowFunction<Fact>getCallFlowFunction(StatementcallStmt,MethoddestinationMethod){ for (final CallEdge edge : callEdges) {for(finalCallEdgeedge:callEdges){ if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {if(edge.callSite.equals(callStmt)&&edge.destinationMethod.equals(destinationMethod)){ return createFlowFunction(edge);returncreateFlowFunction(edge); }} }} throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));thrownewAssertionError(String.format("No Flow Function expected for call %s -> %s",callStmt,destinationMethod)); }} private FlowFunction<Fact> createFlowFunction(final Edge edge) {privateFlowFunction<Fact>createFlowFunction(finalEdgeedge){ return new FlowFunction<Fact>() {returnnewFlowFunction<Fact>(){ @Override@Override public Set<Fact> computeTargets(Fact source) {publicSet<Fact>computeTargets(Factsource){ for (ExpectedFlowFunction ff : edge.flowFunctions) {for(ExpectedFlowFunctionff:edge.flowFunctions){ if (ff.source.equals(source)) {if(ff.source.equals(source)){ if (remainingFlowFunctions.remove(ff)) {if(remainingFlowFunctions.remove(ff)){ return Sets.newHashSet(ff.targets);returnSets.newHashSet(ff.targets); } else {}else{ throw new AssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'", ff, edge));thrownewAssertionError(String.format("Flow Function '%s' was used multiple times on edge '%s'",ff,edge)); }} }} }} throw new AssertionError(String.format("Fact '%s' was not expected at edge '%s'", source, edge));thrownewAssertionError(String.format("Fact '%s' was not expected at edge '%s'",source,edge)); }} };}; }} };}; }} public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {publicvoidrunSolver(finalbooleanfollowReturnsPastSeeds,finalString...initialSeeds){ final InterproceduralCFG<Statement, Method> icfg = buildIcfg();finalInterproceduralCFG<Statement,Method>icfg=buildIcfg(); final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();finalFlowFunctions<Statement,Fact,Method>flowFunctions=flowFunctions(); IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(IFDSSolver<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>solver=newIFDSSolver<>( new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {newIFDSTabulationProblem<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>(){ @Override@Override public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ return followReturnsPastSeeds;returnfollowReturnsPastSeeds; }} @Override@Override public boolean autoAddZero() {publicbooleanautoAddZero(){ return false;returnfalse; }} @Override@Override public int numThreads() {publicintnumThreads(){ return 1;return1; }} @Override@Override public boolean computeValues() {publicbooleancomputeValues(){ return false;returnfalse; }} @Override@Override public FlowFunctions<Statement, Fact, Method> flowFunctions() {publicFlowFunctions<Statement,Fact,Method>flowFunctions(){ return flowFunctions;returnflowFunctions; }} @Override@Override public InterproceduralCFG<Statement, Method> interproceduralCFG() {publicInterproceduralCFG<Statement,Method>interproceduralCFG(){ return icfg;returnicfg; }} @Override@Override public Map<Statement, Set<Fact>> initialSeeds() {publicMap<Statement,Set<Fact>>initialSeeds(){ Map<Statement, Set<Fact>> result = Maps.newHashMap();Map<Statement,Set<Fact>>result=Maps.newHashMap(); for (String stmt : initialSeeds) {for(Stringstmt:initialSeeds){ result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));result.put(newStatement(stmt),Sets.newHashSet(newFact("0"))); }} return result;returnresult; }} @Override@Override public Fact zeroValue() {publicFactzeroValue(){ return new Fact("0");returnnewFact("0"); }} });}); solver.solve();solver.solve(); assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed(); }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






