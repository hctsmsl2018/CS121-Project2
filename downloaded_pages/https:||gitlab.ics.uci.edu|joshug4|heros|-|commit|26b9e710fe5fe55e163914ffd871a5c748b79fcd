



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

26b9e710















Commit
26b9e710


authored
Jun 13, 2014
by


Johannes Lerch



Browse files




store calling context in abstraction to enable context sensitive path

building






parent
cbce681e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......














src/heros/solver/IDESolver.java








View file @ 26b9e710






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......














src/heros/solver/LinkedNode.java








View file @ 26b9e710






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file














test/heros/utilities/Fact.java








View file @ 26b9e710






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

26b9e710















Commit
26b9e710


authored
Jun 13, 2014
by


Johannes Lerch



Browse files




store calling context in abstraction to enable context sensitive path

building






parent
cbce681e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......














src/heros/solver/IDESolver.java








View file @ 26b9e710






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......














src/heros/solver/LinkedNode.java








View file @ 26b9e710






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file














test/heros/utilities/Fact.java








View file @ 26b9e710






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

26b9e710







Open sidebar



Joshua Garcia heros
Commits

26b9e710




Open sidebar

Joshua Garcia heros
Commits

26b9e710


Joshua GarciaherosherosCommits
26b9e710








Commit
26b9e710


authored
Jun 13, 2014
by


Johannes Lerch



Browse files




store calling context in abstraction to enable context sensitive path

building






parent
cbce681e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......














src/heros/solver/IDESolver.java








View file @ 26b9e710






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......














src/heros/solver/LinkedNode.java








View file @ 26b9e710






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file














test/heros/utilities/Fact.java








View file @ 26b9e710






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
26b9e710


authored
Jun 13, 2014
by


Johannes Lerch



Browse files




store calling context in abstraction to enable context sensitive path

building






parent
cbce681e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......














src/heros/solver/IDESolver.java








View file @ 26b9e710






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......














src/heros/solver/LinkedNode.java








View file @ 26b9e710






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file














test/heros/utilities/Fact.java








View file @ 26b9e710






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
26b9e710


authored
Jun 13, 2014
by


Johannes Lerch



Browse files



Commit
26b9e710


authored
Jun 13, 2014
by


Johannes Lerch

26b9e710authoredbyJohannes Lerch

store calling context in abstraction to enable context sensitive path

building





parent
cbce681e
















parent
cbce681e





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......














src/heros/solver/IDESolver.java








View file @ 26b9e710






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......














src/heros/solver/LinkedNode.java








View file @ 26b9e710






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file














test/heros/utilities/Fact.java








View file @ 26b9e710






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 26b9e710








src/heros/solver/BiDiIFDSSolver.java










View file @ 26b9e710


26b9e710



......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......






......@@ -16,7 +16,6 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;



......@@ -145,6 +144,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 



......@@ -250,6 +250,11 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 }










 










 /**



......


import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.Map;importjava.util.Map;  @Override@Override protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {protectedAbstractionWithSourceStmtrestoreContextOnReturnedFact(AbstractionWithSourceStmtd4,AbstractionWithSourceStmtd5){ d5.getAbstraction().setCallingContext(d4.getAbstraction());d5.getAbstraction().setCallingContext(d4.getAbstraction()); return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());returnnewAbstractionWithSourceStmt(d5.getAbstraction(),d4.getSourceStmt()); }}  getAbstraction().addNeighbor(originalAbstraction.getAbstraction());getAbstraction().addNeighbor(originalAbstraction.getAbstraction()); }} @Override@Override public void setCallingContext(AbstractionWithSourceStmt callingContext) {publicvoidsetCallingContext(AbstractionWithSourceStmtcallingContext){ abstraction.setCallingContext(callingContext.getAbstraction());abstraction.setCallingContext(callingContext.getAbstraction()); }} }}  /**/**








src/heros/solver/IDESolver.java








View file @ 26b9e710






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......












src/heros/solver/IDESolver.java








View file @ 26b9e710








src/heros/solver/IDESolver.java










View file @ 26b9e710


26b9e710



......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......






......@@ -510,7 +510,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 *            Fact that originally should be propagated to the caller.










	 * @return Fact that will be propagated to the caller.










	 */










 @SuppressWarnings("unchecked")










 protected D restoreContextOnReturnedFact(D d4, D d5) {










 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 return d5;










 }










 



......


	 *            Fact that originally should be propagated to the caller.	 *            Fact that originally should be propagated to the caller.	 * @return Fact that will be propagated to the caller.	 * @return Fact that will be propagated to the caller.	 */	 */ @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") protected D restoreContextOnReturnedFact(D d4, D d5) {protectedDrestoreContextOnReturnedFact(Dd4,Dd5){ if (d5 instanceof LinkedNode) {if(d5instanceofLinkedNode){ ((LinkedNode<D>) d5).setCallingContext(d4);((LinkedNode<D>)d5).setCallingContext(d4); }} return d5;returnd5; }} 








src/heros/solver/LinkedNode.java








View file @ 26b9e710






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file












src/heros/solver/LinkedNode.java








View file @ 26b9e710








src/heros/solver/LinkedNode.java










View file @ 26b9e710


26b9e710



......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file






......@@ -20,4 +20,6 @@ public interface LinkedNode<D> {









	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










 










 public void setCallingContext(D callingContext);










}




\ No newline at end of file


	 * with this one of paths were not being tracked.	 * with this one of paths were not being tracked.	 */	 */ public void addNeighbor(D originalAbstraction);publicvoidaddNeighbor(DoriginalAbstraction);  public void setCallingContext(D callingContext);publicvoidsetCallingContext(DcallingContext);}}








test/heros/utilities/Fact.java








View file @ 26b9e710






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}












test/heros/utilities/Fact.java








View file @ 26b9e710








test/heros/utilities/Fact.java










View file @ 26b9e710


26b9e710



......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}






......@@ -52,7 +52,11 @@ public class Fact implements LinkedNode<Fact> {




















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 // TODO Auto-generated method stub










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 }










}


 @Override@Override public void addNeighbor(Fact originalAbstraction) {publicvoidaddNeighbor(FactoriginalAbstraction){ // TODO Auto-generated method stub// TODO Auto-generated method stub  }} @Override@Override public void setCallingContext(Fact callingContext) {publicvoidsetCallingContext(FactcallingContext){  }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






