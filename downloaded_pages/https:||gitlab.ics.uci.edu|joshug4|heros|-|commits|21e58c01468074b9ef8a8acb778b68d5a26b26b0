



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

Commits


















21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros
















24 Jul, 2014
1 commit









added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01










25 Jun, 2014
14 commits









Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953













Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e













Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218













package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16













test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6













Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0










09 Jun, 2014
2 commits









Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3













Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










10 Mar, 2014
1 commit









fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
2 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc













generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
2 commits









include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207













cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
6 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266













Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43



















H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

Commits


















21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros
















24 Jul, 2014
1 commit









added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01










25 Jun, 2014
14 commits









Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953













Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e













Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218













package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16













test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6













Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0










09 Jun, 2014
2 commits









Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3













Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










10 Mar, 2014
1 commit









fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
2 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc













generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
2 commits









include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207













cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
6 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266













Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43


















Open sidebar



Joshua Garcia heros

Commits







Open sidebar



Joshua Garcia heros

Commits




Open sidebar

Joshua Garcia heros

Commits


Joshua Garciaherosheros
Commits











21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros
















24 Jul, 2014
1 commit









added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01










25 Jun, 2014
14 commits









Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953













Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e













Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218













package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16













test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6













Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0










09 Jun, 2014
2 commits









Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3













Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










10 Mar, 2014
1 commit









fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
2 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc













generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
2 commits









include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207













cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
6 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266













Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43






















21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros
















24 Jul, 2014
1 commit









added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01










25 Jun, 2014
14 commits









Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953













Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e













Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218













package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16













test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6













Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0










09 Jun, 2014
2 commits









Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3













Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










10 Mar, 2014
1 commit









fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
2 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc













generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
2 commits









include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207













cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
6 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266













Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43


















21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros

















21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros















21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag









heros




21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag








21e58c01468074b9ef8a8acb778b68d5a26b26b0


Switch branch/tag





21e58c01468074b9ef8a8acb778b68d5a26b26b0

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tagheros













24 Jul, 2014
1 commit









added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01










25 Jun, 2014
14 commits









Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953













Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e













Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218













package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16













test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6













Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0










09 Jun, 2014
2 commits









Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3













Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










10 Mar, 2014
1 commit









fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
2 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc













generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
2 commits









include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207













cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
6 commits









Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266













Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43











24 Jul, 2014
1 commit
24 Jul, 20141 commit







added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01














added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01










added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014






21e58c01






added test runner to build script

·
21e58c01


Steven Arzt authored Jul 24, 2014


·
21e58c01

Steven Arzt authored Jul 24, 2014




21e58c01






21e58c01




21e58c01

25 Jun, 2014
14 commits
25 Jun, 201414 commits







Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953













Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e













Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218













package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16













test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6













Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0














Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953










Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014






10400953






Merge branch 'tests/main' into develop

·
10400953


Johannes Lerch authored Jun 25, 2014


·
10400953

Johannes Lerch authored Jun 25, 2014




10400953






10400953




10400953






Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde










Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde






Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.

·
dd4a3cde

Johannes Lerch authored Jun 25, 2014




dd4a3cde






dd4a3cde




dd4a3cde






Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817










Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817






Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.

·
6fd38817

Johannes Lerch authored Jun 25, 2014




6fd38817






6fd38817




6fd38817






removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8










removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014






f1cee5b8






removed unused imports

·
f1cee5b8


Johannes Lerch authored Jun 25, 2014


·
f1cee5b8

Johannes Lerch authored Jun 25, 2014




f1cee5b8






f1cee5b8




f1cee5b8






Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d










Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d






Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014


·
663aa65d

Johannes Lerch authored Jun 25, 2014




663aa65d






663aa65d




663aa65d






Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda










Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda






Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.

·
d7737fda

Johannes Lerch authored Jun 25, 2014




d7737fda






d7737fda




d7737fda






Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868










Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868






Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014


·
6016a868

Johannes Lerch authored Jun 18, 2014




6016a868






6016a868




6016a868






test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0










test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)





40ad6af0






test case capturing that in the current implementation of BiDiIFDSSolver

·
40ad6af0





Johannes Lerch authored Jun 13, 2014

the time at which paused edges are resumed is wrong (they are resumed
even if no fact abstractions are propagated to callers, as resuming
happens before computing the return flow function)

·
40ad6af0

Johannes Lerch authored Jun 13, 2014




40ad6af0






40ad6af0




40ad6af0






store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710










store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710






store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building

·
26b9e710

Johannes Lerch authored Jun 13, 2014




26b9e710






26b9e710




26b9e710






Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e






Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.

·
cbce681e

Johannes Lerch authored Jun 11, 2014




cbce681e






cbce681e




cbce681e






Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218










Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014






65687218






Additional tests for BiDiSolver

·
65687218


Johannes Lerch authored Jun 11, 2014


·
65687218

Johannes Lerch authored Jun 11, 2014




65687218






65687218




65687218






package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16










package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014






c455fd16






package restructuring & initial test for BiDiSolver

·
c455fd16


Johannes Lerch authored Jun 11, 2014


·
c455fd16

Johannes Lerch authored Jun 11, 2014




c455fd16






c455fd16




c455fd16






test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6










test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014






5268a4c6






test case for reusing a summary on caller side

·
5268a4c6


Johannes Lerch authored Jun 11, 2014


·
5268a4c6

Johannes Lerch authored Jun 11, 2014




5268a4c6






5268a4c6




5268a4c6






Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0










Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014






b8ca40b0






Tests for IDESolver

·
b8ca40b0


Johannes Lerch authored May 07, 2014


·
b8ca40b0

Johannes Lerch authored May 07, 2014




b8ca40b0






b8ca40b0




b8ca40b0

09 Jun, 2014
2 commits
09 Jun, 20142 commits







Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3













Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89














Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3










Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder





34d361d3






Merge pull request #8 from sleepingpig/nullcheckofcachebuilder

·
34d361d3





Eric Bodden authored Jun 09, 2014


Add nullness check of CacheBuilder

·
34d361d3

Eric Bodden authored Jun 09, 2014




34d361d3






34d361d3




34d361d3






Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89






Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014


·
c16c1f89

sleepingpig authored Jun 09, 2014




c16c1f89






c16c1f89




c16c1f89

23 Apr, 2014
1 commit
23 Apr, 20141 commit







now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1














now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1






now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014


·
f3b1b1f1

Steven Arzt authored Apr 23, 2014




f3b1b1f1






f3b1b1f1




f3b1b1f1

02 Apr, 2014
1 commit
02 Apr, 20141 commit







generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977














generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977






generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014


·
3d7cf977

Steven Arzt authored Apr 02, 2014




3d7cf977






3d7cf977




3d7cf977

10 Mar, 2014
1 commit
10 Mar, 20141 commit







fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806














fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806










fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014






c61a8806






fixed the ant settings file

·
c61a8806


Steven Arzt authored Mar 10, 2014


·
c61a8806

Steven Arzt authored Mar 10, 2014




c61a8806






c61a8806




c61a8806

03 Mar, 2014
1 commit
03 Mar, 20141 commit







Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1














Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1






Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014


·
81655ff1

Johannes Lerch authored Mar 03, 2014




81655ff1






81655ff1




81655ff1

28 Feb, 2014
1 commit
28 Feb, 20141 commit







Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10














Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10






Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.

·
2c10ea10

Johannes Lerch authored Feb 28, 2014




2c10ea10






2c10ea10




2c10ea10

17 Jan, 2014
2 commits
17 Jan, 20142 commits







generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d














generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f










generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f






generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014


·
4b76e92f

Steven Arzt authored Jan 17, 2014




4b76e92f






4b76e92f




4b76e92f






caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d






caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014


·
3b6c322d

Steven Arzt authored Jan 17, 2014




3b6c322d






3b6c322d




3b6c322d

15 Jan, 2014
2 commits
15 Jan, 20142 commits







Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc













generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4














Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc










Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014






c9477ecc






Merge branch 'develop' of github.com:Sable/heros into develop

·
c9477ecc


Steven Arzt authored Jan 15, 2014


·
c9477ecc

Steven Arzt authored Jan 15, 2014




c9477ecc






c9477ecc




c9477ecc






generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4






generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014


·
0b0c5ba4

Steven Arzt authored Jan 15, 2014




0b0c5ba4






0b0c5ba4




0b0c5ba4

24 Dec, 2013
3 commits
24 Dec, 20133 commits







cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928














cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a










cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a






cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013


·
f21c884a

Eric Bodden authored Dec 24, 2013




f21c884a






f21c884a




f21c884a






made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc










made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc






made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013


·
802bc2dc

Eric Bodden authored Dec 24, 2013




802bc2dc






802bc2dc




802bc2dc






added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928






added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928





Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet

·
c52d9928

Eric Bodden authored Dec 24, 2013




c52d9928






c52d9928




c52d9928

15 Dec, 2013
2 commits
15 Dec, 20132 commits







include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207













cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7














include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207










include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013






35395207






include SLF4J in heros.jar

·
35395207


Eric Bodden authored Dec 15, 2013


·
35395207

Eric Bodden authored Dec 15, 2013




35395207






35395207




35395207






cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7






cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013


·
a278d4f7

Eric Bodden authored Dec 15, 2013




a278d4f7






a278d4f7




a278d4f7

28 Nov, 2013
1 commit
28 Nov, 20131 commit







pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f














pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f






pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013


·
3980d99f

Steven Arzt authored Nov 28, 2013




3980d99f






3980d99f




3980d99f

31 Oct, 2013
2 commits
31 Oct, 20132 commits







made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066














made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595










made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595






made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013


·
4d3ab595

Steven Arzt authored Oct 31, 2013




4d3ab595






4d3ab595




4d3ab595






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013


·
fdced066

Steven Arzt authored Oct 31, 2013




fdced066






fdced066




fdced066

28 Oct, 2013
6 commits
28 Oct, 20136 commits







Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266













Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43














Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266










Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013






fbd27266






Merge branch 'develop' of github.com:Sable/heros into develop

·
fbd27266


Steven Arzt authored Oct 28, 2013


·
fbd27266

Steven Arzt authored Oct 28, 2013




fbd27266






fbd27266




fbd27266






Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b










Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b






Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver

·
3c46813b

Steven Arzt authored Oct 28, 2013




3c46813b






3c46813b




3c46813b






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013


·
e0e1cdaf

Eric Bodden authored Oct 28, 2013




e0e1cdaf






e0e1cdaf




e0e1cdaf






added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc










added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc






added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013


·
52970dcc

Eric Bodden authored Oct 28, 2013




52970dcc






52970dcc




52970dcc






fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb










fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb






fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013


·
2a1414bb

Eric Bodden authored Oct 28, 2013




2a1414bb






2a1414bb




2a1414bb






exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43










exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013






d2e7bb43






exporting slf4j

·
d2e7bb43


Eric Bodden authored Oct 28, 2013


·
d2e7bb43

Eric Bodden authored Oct 28, 2013




d2e7bb43






d2e7bb43




d2e7bb43






