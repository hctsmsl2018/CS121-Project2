



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

1e7167fe















Commit
1e7167fe


authored
Jan 29, 2013
by


Eric Bodden



Browse files




number of threads is now configured through SolverConfiguration, a new super...

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem






parent
aa7b4340













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}














src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}














src/heros/solver/IDESolver.java








View file @ 1e7167fe






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......














src/heros/solver/IFDSSolver.java








View file @ 1e7167fe






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......














src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

1e7167fe















Commit
1e7167fe


authored
Jan 29, 2013
by


Eric Bodden



Browse files




number of threads is now configured through SolverConfiguration, a new super...

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem






parent
aa7b4340













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}














src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}














src/heros/solver/IDESolver.java








View file @ 1e7167fe






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......














src/heros/solver/IFDSSolver.java








View file @ 1e7167fe






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......














src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

1e7167fe







Open sidebar



Joshua Garcia heros
Commits

1e7167fe




Open sidebar

Joshua Garcia heros
Commits

1e7167fe


Joshua GarciaherosherosCommits
1e7167fe








Commit
1e7167fe


authored
Jan 29, 2013
by


Eric Bodden



Browse files




number of threads is now configured through SolverConfiguration, a new super...

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem






parent
aa7b4340













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}














src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}














src/heros/solver/IDESolver.java








View file @ 1e7167fe






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......














src/heros/solver/IFDSSolver.java








View file @ 1e7167fe






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......














src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
1e7167fe


authored
Jan 29, 2013
by


Eric Bodden



Browse files




number of threads is now configured through SolverConfiguration, a new super...

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem






parent
aa7b4340













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}














src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}














src/heros/solver/IDESolver.java








View file @ 1e7167fe






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......














src/heros/solver/IFDSSolver.java








View file @ 1e7167fe






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......














src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
1e7167fe


authored
Jan 29, 2013
by


Eric Bodden



Browse files



Commit
1e7167fe


authored
Jan 29, 2013
by


Eric Bodden

1e7167feauthoredbyEric Bodden

number of threads is now configured through SolverConfiguration, a new super...

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





parent
aa7b4340
















parent
aa7b4340





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}














src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}














src/heros/solver/IDESolver.java








View file @ 1e7167fe






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......














src/heros/solver/IFDSSolver.java








View file @ 1e7167fe






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......














src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}














src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}












src/heros/IFDSTabulationProblem.java








View file @ 1e7167fe








src/heros/IFDSTabulationProblem.java










View file @ 1e7167fe


1e7167fe



......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;










import heros.solver.IFDSSolver;





















import java.util.Set;



......@@ -26,7 +25,7 @@ import java.util.Set;









 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {










public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {





















 /**










	 * Returns a set of flow functions. Those functions are used to compute data-flow facts



......@@ -61,21 +60,5 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









	 * interface should therefore cache the return value! 










	 */










 D zeroValue();










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();





















}


 ******************************************************************************/ ******************************************************************************/package heros;packageheros;import heros.solver.IDESolver;importheros.solver.IDESolver;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import java.util.Set;importjava.util.Set; * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. * @param <I> The type of inter-procedural control-flow graph being used. * @param <I> The type of inter-procedural control-flow graph being used. */ */public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> {publicinterfaceIFDSTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>>{public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>> extends SolverConfiguration {publicinterfaceIFDSTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>>extendsextends SolverConfigurationSolverConfiguration { /**/**	 * Returns a set of flow functions. Those functions are used to compute data-flow facts	 * Returns a set of flow functions. Those functions are used to compute data-flow facts	 * interface should therefore cache the return value! 	 * interface should therefore cache the return value! 	 */	 */ D zeroValue();DzeroValue();  /**/**	 * If true, the analysis will compute a partially unbalanced analysis problem in which	 * If true, the analysis will compute a partially unbalanced analysis problem in which	 * function returns are followed also further up the call stack than where the initial seeds	 * function returns are followed also further up the call stack than where the initial seeds	 * started.	 * started.	 * 	 * 	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 */	 */ boolean followReturnsPastSeeds();booleanfollowReturnsPastSeeds();  /**/**	 * If true, the solver will automatically add the zero value to each flow-function call's result set.	 * If true, the solver will automatically add the zero value to each flow-function call's result set.	 * @see #zeroValue()	 * @see #zeroValue()	 */	 */ boolean autoAddZero();booleanautoAddZero();}}








src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}












src/heros/SolverConfiguration.java



0 â†’ 100644







View file @ 1e7167fe








src/heros/SolverConfiguration.java



0 â†’ 100644









View file @ 1e7167fe


1e7167fe










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import heros.solver.IDESolver;





















/**










 * Configuration parameters for {@link IDESolver}.










 */










public interface SolverConfiguration {










 










 










 /**










	 * If true, the analysis will compute a partially unbalanced analysis problem in which










	 * function returns are followed also further up the call stack than where the initial seeds










	 * started.










	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 */










 boolean followReturnsPastSeeds();










 










 /**










	 * If true, the solver will automatically add the zero value to each flow-function call's result set.










	 * @see #zeroValue()










	 */










 boolean autoAddZero();










 










 /**










	 * Returns the number of threads to be used by the solver. 










	 */










 int numThreads();





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import heros.solver.IDESolver;importheros.solver.IDESolver;/**/** * Configuration parameters for {@link IDESolver}. * Configuration parameters for {@link IDESolver}. */ */public interface SolverConfiguration {publicinterfaceSolverConfiguration{   /**/**	 * If true, the analysis will compute a partially unbalanced analysis problem in which	 * If true, the analysis will compute a partially unbalanced analysis problem in which	 * function returns are followed also further up the call stack than where the initial seeds	 * function returns are followed also further up the call stack than where the initial seeds	 * started.	 * started.	 * 	 * 	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 */	 */ boolean followReturnsPastSeeds();booleanfollowReturnsPastSeeds();  /**/**	 * If true, the solver will automatically add the zero value to each flow-function call's result set.	 * If true, the solver will automatically add the zero value to each flow-function call's result set.	 * @see #zeroValue()	 * @see #zeroValue()	 */	 */ boolean autoAddZero();booleanautoAddZero();  /**/**	 * Returns the number of threads to be used by the solver. 	 * Returns the number of threads to be used by the solver. 	 */	 */ int numThreads();intnumThreads();}}








src/heros/solver/IDESolver.java








View file @ 1e7167fe






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......












src/heros/solver/IDESolver.java








View file @ 1e7167fe








src/heros/solver/IDESolver.java










View file @ 1e7167fe


1e7167fe



......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......






......@@ -179,25 +179,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }





















 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * Uses a number of threads equal to the return value of










	 * <code>Runtime.getRuntime().availableProcessors()</code>.










	 */










 public void solve() {










 solve(Runtime.getRuntime().availableProcessors());










 }










 










 /**










	 * Runs the solver on the configured problem. This can take some time.










	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 public void solve() { 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



......


 this.allTop = tabulationProblem.allTopFunction();this.allTop=tabulationProblem.allTopFunction(); this.jumpFn = new JumpFunctions<N,D,V>(allTop);this.jumpFn=newJumpFunctions<N,D,V>(allTop); this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();this.followReturnsPastSeeds=tabulationProblem.followReturnsPastSeeds(); this.numThreads = Math.max(1,tabulationProblem.numThreads());this.numThreads=Math.max(1,tabulationProblem.numThreads()); this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newCountingThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }} /**/**	 * Runs the solver on the configured problem. This can take some time.	 * Runs the solver on the configured problem. This can take some time.	 * Uses a number of threads equal to the return value of	 * Uses a number of threads equal to the return value of	 * <code>Runtime.getRuntime().availableProcessors()</code>.	 * <code>Runtime.getRuntime().availableProcessors()</code>.	 */	 */ public void solve() {publicvoidsolve(){ solve(Runtime.getRuntime().availableProcessors());solve(Runtime.getRuntime().availableProcessors()); }}  /**/**	 * Runs the solver on the configured problem. This can take some time.	 * Runs the solver on the configured problem. This can take some time.	 * @param numThreads The number of threads to use.	 * @param numThreads The number of threads to use.	 */	 */ public void solve(int numThreads) {publicvoidsolve(intnumThreads){ this.numThreads = Math.max(1,numThreads);this.numThreads=Math.max(1,numThreads); this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newCountingThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>());  public void solve() { publicvoidsolve(){ for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ propagate(zeroValue, startPoint, zeroValue, allTop);propagate(zeroValue,startPoint,zeroValue,allTop); jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v());








src/heros/solver/IFDSSolver.java








View file @ 1e7167fe






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......












src/heros/solver/IFDSSolver.java








View file @ 1e7167fe








src/heros/solver/IFDSSolver.java










View file @ 1e7167fe


1e7167fe



......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......






......@@ -107,6 +107,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.autoAddZero();










 }










 










 @Override










 public int numThreads() {










 return ifdsProblem.numThreads();










 }










 










 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {










 










 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



......


 return ifdsProblem.autoAddZero();returnifdsProblem.autoAddZero(); }}  @Override@Override public int numThreads() {publicintnumThreads(){ return ifdsProblem.numThreads();returnifdsProblem.numThreads(); }}  class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {classIFDSEdgeFunctionsimplementsEdgeFunctions<N,D,M,BinaryDomain>{  public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {publicEdgeFunction<BinaryDomain>getNormalEdgeFunction(Nsrc,DsrcNode,Ntgt,DtgtNode){








src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}












src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 1e7167fe








src/heros/template/DefaultIFDSTabulationProblem.java










View file @ 1e7167fe


1e7167fe



......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}






......@@ -67,4 +67,9 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu









 public boolean autoAddZero() {










 return true;










 }










 










 @Override










 public int numThreads() {










 return Runtime.getRuntime().availableProcessors();










 }










}


 public boolean autoAddZero() {publicbooleanautoAddZero(){ return true;returntrue; }}  @Override@Override public int numThreads() {publicintnumThreads(){ return Runtime.getRuntime().availableProcessors();returnRuntime.getRuntime().availableProcessors(); }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






