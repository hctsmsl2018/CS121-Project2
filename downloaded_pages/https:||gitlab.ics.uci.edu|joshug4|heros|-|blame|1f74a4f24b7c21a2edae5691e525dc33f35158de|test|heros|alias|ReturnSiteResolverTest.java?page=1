



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

1f74a4f24b7c21a2edae5691e525dc33f35158de

















1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag










heros


test


heros


alias


ReturnSiteResolverTest.java



Find file
Normal viewHistoryPermalink






ReturnSiteResolverTest.java



10.8 KB









Newer










Older









rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




226




227




228




229




230




231




232




233




234




235




236




237




238




239




240




241




242




243




244




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ReturnSiteResolverTest {

	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {
		return new DeltaConstraint<>(getDelta(fieldRefs));
	}

	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);
		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);
	}

	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = new AccessPath<>();
		for (String fieldRef : fieldRefs) {
			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));
		}
		return accPath;
	}

	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;
	private TestStatement returnSite;
	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;
	private TestFact fact;
	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;
	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;

	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		returnSite = new TestStatement("returnSite");
		sut = new ReturnSiteResolver<>(analyzer, returnSite);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDelta() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDeltaTwice() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveViaDeltaAndThenViaCallSite() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(innerCallback).canBeResolvedEmpty();
	}

	@Test
	public void resolveViaCallEdgeResolverAtCallSite() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).canBeResolvedEmpty();
	}
	
	@Test
	public void resolveViaResolverAtCallSite() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaResolverAtCallSiteTwice() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));
		
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), secondCallback);
				return null;
			}
			
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveAsEmptyViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));
		
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.canBeResolvedEmpty();
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));

		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback, never()).canBeResolvedEmpty();
		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));
	}
	
	@Test
	public void resolveViaCallSiteResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	private class ReturnSiteResolverArgumentMatcher extends
			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {

		private AccessPath<TestFieldRef> accPath;

		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {
			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);
		}
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

1f74a4f24b7c21a2edae5691e525dc33f35158de

















1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag










heros


test


heros


alias


ReturnSiteResolverTest.java



Find file
Normal viewHistoryPermalink






ReturnSiteResolverTest.java



10.8 KB









Newer










Older









rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




226




227




228




229




230




231




232




233




234




235




236




237




238




239




240




241




242




243




244




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ReturnSiteResolverTest {

	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {
		return new DeltaConstraint<>(getDelta(fieldRefs));
	}

	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);
		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);
	}

	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = new AccessPath<>();
		for (String fieldRef : fieldRefs) {
			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));
		}
		return accPath;
	}

	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;
	private TestStatement returnSite;
	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;
	private TestFact fact;
	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;
	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;

	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		returnSite = new TestStatement("returnSite");
		sut = new ReturnSiteResolver<>(analyzer, returnSite);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDelta() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDeltaTwice() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveViaDeltaAndThenViaCallSite() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(innerCallback).canBeResolvedEmpty();
	}

	@Test
	public void resolveViaCallEdgeResolverAtCallSite() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).canBeResolvedEmpty();
	}
	
	@Test
	public void resolveViaResolverAtCallSite() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaResolverAtCallSiteTwice() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));
		
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), secondCallback);
				return null;
			}
			
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveAsEmptyViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));
		
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.canBeResolvedEmpty();
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));

		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback, never()).canBeResolvedEmpty();
		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));
	}
	
	@Test
	public void resolveViaCallSiteResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	private class ReturnSiteResolverArgumentMatcher extends
			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {

		private AccessPath<TestFieldRef> accPath;

		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {
			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);
		}
	}
}











Open sidebar



Joshua Garcia heros

1f74a4f24b7c21a2edae5691e525dc33f35158de







Open sidebar



Joshua Garcia heros

1f74a4f24b7c21a2edae5691e525dc33f35158de




Open sidebar

Joshua Garcia heros

1f74a4f24b7c21a2edae5691e525dc33f35158de


Joshua Garciaherosheros
1f74a4f24b7c21a2edae5691e525dc33f35158de










1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag










heros


test


heros


alias


ReturnSiteResolverTest.java



Find file
Normal viewHistoryPermalink






ReturnSiteResolverTest.java



10.8 KB









Newer










Older









rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




226




227




228




229




230




231




232




233




234




235




236




237




238




239




240




241




242




243




244




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ReturnSiteResolverTest {

	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {
		return new DeltaConstraint<>(getDelta(fieldRefs));
	}

	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);
		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);
	}

	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = new AccessPath<>();
		for (String fieldRef : fieldRefs) {
			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));
		}
		return accPath;
	}

	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;
	private TestStatement returnSite;
	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;
	private TestFact fact;
	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;
	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;

	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		returnSite = new TestStatement("returnSite");
		sut = new ReturnSiteResolver<>(analyzer, returnSite);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDelta() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDeltaTwice() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveViaDeltaAndThenViaCallSite() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(innerCallback).canBeResolvedEmpty();
	}

	@Test
	public void resolveViaCallEdgeResolverAtCallSite() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).canBeResolvedEmpty();
	}
	
	@Test
	public void resolveViaResolverAtCallSite() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaResolverAtCallSiteTwice() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));
		
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), secondCallback);
				return null;
			}
			
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveAsEmptyViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));
		
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.canBeResolvedEmpty();
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));

		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback, never()).canBeResolvedEmpty();
		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));
	}
	
	@Test
	public void resolveViaCallSiteResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	private class ReturnSiteResolverArgumentMatcher extends
			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {

		private AccessPath<TestFieldRef> accPath;

		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {
			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);
		}
	}
}














1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag










heros


test


heros


alias


ReturnSiteResolverTest.java



Find file
Normal viewHistoryPermalink






ReturnSiteResolverTest.java



10.8 KB









Newer










Older









rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




226




227




228




229




230




231




232




233




234




235




236




237




238




239




240




241




242




243




244




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ReturnSiteResolverTest {

	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {
		return new DeltaConstraint<>(getDelta(fieldRefs));
	}

	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);
		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);
	}

	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = new AccessPath<>();
		for (String fieldRef : fieldRefs) {
			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));
		}
		return accPath;
	}

	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;
	private TestStatement returnSite;
	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;
	private TestFact fact;
	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;
	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;

	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		returnSite = new TestStatement("returnSite");
		sut = new ReturnSiteResolver<>(analyzer, returnSite);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDelta() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDeltaTwice() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveViaDeltaAndThenViaCallSite() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(innerCallback).canBeResolvedEmpty();
	}

	@Test
	public void resolveViaCallEdgeResolverAtCallSite() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).canBeResolvedEmpty();
	}
	
	@Test
	public void resolveViaResolverAtCallSite() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaResolverAtCallSiteTwice() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));
		
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), secondCallback);
				return null;
			}
			
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveAsEmptyViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));
		
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.canBeResolvedEmpty();
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));

		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback, never()).canBeResolvedEmpty();
		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));
	}
	
	@Test
	public void resolveViaCallSiteResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	private class ReturnSiteResolverArgumentMatcher extends
			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {

		private AccessPath<TestFieldRef> accPath;

		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {
			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);
		}
	}
}










1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag










heros


test


heros


alias


ReturnSiteResolverTest.java



Find file
Normal viewHistoryPermalink




1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag










heros


test


heros


alias


ReturnSiteResolverTest.java





1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag








1f74a4f24b7c21a2edae5691e525dc33f35158de


Switch branch/tag





1f74a4f24b7c21a2edae5691e525dc33f35158de

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

test

heros

alias

ReturnSiteResolverTest.java
Find file
Normal viewHistoryPermalink




ReturnSiteResolverTest.java



10.8 KB









Newer










Older









rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




226




227




228




229




230




231




232




233




234




235




236




237




238




239




240




241




242




243




244




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ReturnSiteResolverTest {

	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {
		return new DeltaConstraint<>(getDelta(fieldRefs));
	}

	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);
		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);
	}

	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = new AccessPath<>();
		for (String fieldRef : fieldRefs) {
			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));
		}
		return accPath;
	}

	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;
	private TestStatement returnSite;
	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;
	private TestFact fact;
	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;
	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;

	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		returnSite = new TestStatement("returnSite");
		sut = new ReturnSiteResolver<>(analyzer, returnSite);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDelta() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDeltaTwice() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveViaDeltaAndThenViaCallSite() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(innerCallback).canBeResolvedEmpty();
	}

	@Test
	public void resolveViaCallEdgeResolverAtCallSite() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).canBeResolvedEmpty();
	}
	
	@Test
	public void resolveViaResolverAtCallSite() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaResolverAtCallSiteTwice() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));
		
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), secondCallback);
				return null;
			}
			
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveAsEmptyViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));
		
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.canBeResolvedEmpty();
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));

		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback, never()).canBeResolvedEmpty();
		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));
	}
	
	@Test
	public void resolveViaCallSiteResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	private class ReturnSiteResolverArgumentMatcher extends
			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {

		private AccessPath<TestFieldRef> accPath;

		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {
			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);
		}
	}
}








ReturnSiteResolverTest.java



10.8 KB










ReturnSiteResolverTest.java



10.8 KB









Newer










Older
NewerOlder







rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




226




227




228




229




230




231




232




233




234




235




236




237




238




239




240




241




242




243




244




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ReturnSiteResolverTest {

	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {
		return new DeltaConstraint<>(getDelta(fieldRefs));
	}

	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);
		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);
	}

	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {
		AccessPath<TestFieldRef> accPath = new AccessPath<>();
		for (String fieldRef : fieldRefs) {
			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));
		}
		return accPath;
	}

	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;
	private TestStatement returnSite;
	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;
	private TestFact fact;
	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;
	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;

	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		returnSite = new TestStatement("returnSite");
		sut = new ReturnSiteResolver<>(analyzer, returnSite);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDelta() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	@Test
	public void resolveViaDeltaTwice() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveViaDeltaAndThenViaCallSite() {
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), innerCallback);
				return null;
			}
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(innerCallback).canBeResolvedEmpty();
	}

	@Test
	public void resolveViaCallEdgeResolverAtCallSite() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(callback).canBeResolvedEmpty();
	}
	
	@Test
	public void resolveViaResolverAtCallSite() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaResolverAtCallSiteTwice() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.interest(analyzer, nestedResolver);
				return null;
			}
		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));
		
		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];
				resolver.resolve(getDeltaConstraint("b"), secondCallback);
				return null;
			}
			
		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));
	}
	
	@Test
	public void resolveAsEmptyViaIncomingResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));
		
		doAnswer(new Answer() {
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {
				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];
				innerCallback.canBeResolvedEmpty();
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));

		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback, never()).canBeResolvedEmpty();
		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));
	}
	
	@Test
	public void resolveViaCallSiteResolver() {
		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	private class ReturnSiteResolverArgumentMatcher extends
			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {

		private AccessPath<TestFieldRef> accPath;

		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {
			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);
		}
	}
}







rewrite of ifds solver



Â 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



Â 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

120

121

122

123

124

125

126

127

128

129

130

131

132

133

134

135

136

137

138

139

140

141

142

143

144

145

146

147

148

149

150

151

152

153

154

155

156

157

158

159

160

161

162

163

164

165

166

167

168

169

170

171

172

173

174

175

176

177

178

179

180

181

182

183

184

185

186

187

188

189

190

191

192

193

194

195

196

197

198

199

200

201

202

203

204

205

206

207

208

209

210

211

212

213

214

215

216

217

218

219

220

221

222

223

224

225

226

227

228

229

230

231

232

233

234

235

236

237

238

239

240

241

242

243

244
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import static org.mockito.Mockito.*;importstaticorg.mockito.Mockito.*;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import org.mockito.ArgumentMatcher;importorg.mockito.ArgumentMatcher;import org.mockito.Mockito;importorg.mockito.Mockito;import org.mockito.invocation.InvocationOnMock;importorg.mockito.invocation.InvocationOnMock;import org.mockito.stubbing.Answer;importorg.mockito.stubbing.Answer;import org.mockito.verification.VerificationMode;importorg.mockito.verification.VerificationMode;public class ReturnSiteResolverTest {publicclassReturnSiteResolverTest{	private static DeltaConstraint<TestFieldRef> getDeltaConstraint(String... fieldRefs) {privatestaticDeltaConstraint<TestFieldRef>getDeltaConstraint(String...fieldRefs){		return new DeltaConstraint<>(getDelta(fieldRefs));returnnewDeltaConstraint<>(getDelta(fieldRefs));	}}	private static Delta<TestFieldRef> getDelta(String... fieldRefs) {privatestaticDelta<TestFieldRef>getDelta(String...fieldRefs){		AccessPath<TestFieldRef> accPath = createAccessPath(fieldRefs);AccessPath<TestFieldRef>accPath=createAccessPath(fieldRefs);		return new AccessPath<TestFieldRef>().getDeltaTo(accPath);returnnewAccessPath<TestFieldRef>().getDeltaTo(accPath);	}}	protected static AccessPath<TestFieldRef> createAccessPath(String... fieldRefs) {protectedstaticAccessPath<TestFieldRef>createAccessPath(String...fieldRefs){		AccessPath<TestFieldRef> accPath = new AccessPath<>();AccessPath<TestFieldRef>accPath=newAccessPath<>();		for (String fieldRef : fieldRefs) {for(StringfieldRef:fieldRefs){			accPath = accPath.addFieldReference(new TestFieldRef(fieldRef));accPath=accPath.addFieldReference(newTestFieldRef(fieldRef));		}}		return accPath;returnaccPath;	}}	private PerAccessPathMethodAnalyzer<TestFieldRef, TestFact, TestStatement, TestMethod> analyzer;privatePerAccessPathMethodAnalyzer<TestFieldRef,TestFact,TestStatement,TestMethod>analyzer;	private TestStatement returnSite;privateTestStatementreturnSite;	private ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> sut;privateReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>sut;	private TestFact fact;privateTestFactfact;	private InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> callback;privateInterestCallback<TestFieldRef,TestFact,TestStatement,TestMethod>callback;	private Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> callEdgeResolver;privateResolver<TestFieldRef,TestFact,TestStatement,TestMethod>callEdgeResolver;	@Before@Before	public void before() {publicvoidbefore(){		analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class);		returnSite = new TestStatement("returnSite");returnSite=newTestStatement("returnSite");		sut = new ReturnSiteResolver<>(analyzer, returnSite);sut=newReturnSiteResolver<>(analyzer,returnSite);		fact = new TestFact("value");fact=newTestFact("value");		callback = mock(InterestCallback.class);callback=mock(InterestCallback.class);		callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class);	}}	@Test@Test	public void emptyIncomingFact() {publicvoidemptyIncomingFact(){		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),callEdgeResolver,getDelta());		verify(analyzer).scheduleEdgeTo(eq(new WrappedFactAtStatement<>(returnSite, new WrappedFact<>(fact, createAccessPath(), sut))));verify(analyzer).scheduleEdgeTo(eq(newWrappedFactAtStatement<>(returnSite,newWrappedFact<>(fact,createAccessPath(),sut))));		assertTrue(sut.isInterestGiven());assertTrue(sut.isInterestGiven());	}}	@Test@Test	public void resolveViaIncomingFact() {publicvoidresolveViaIncomingFact(){		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver), callEdgeResolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath("a"),callEdgeResolver),callEdgeResolver,getDelta());		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a"))));	}}	@Test@Test	public void registerCallbackAtIncomingResolver() {publicvoidregisterCallbackAtIncomingResolver(){		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),resolver),callEdgeResolver,getDelta());		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));verify(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));	}}		@Test@Test	public void resolveViaIncomingResolver() {publicvoidresolveViaIncomingResolver(){		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);finalResolver<TestFieldRef,TestFact,TestStatement,TestMethod>nestedResolver=mock(Resolver.class);		Mockito.doAnswer(new Answer(){Mockito.doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> argCallback = InterestCallback<TestFieldRef,TestFact,TestStatement,TestMethod>argCallback=						(InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];(InterestCallback<TestFieldRef,TestFact,TestStatement,TestMethod>)invocation.getArguments()[1];				argCallback.interest(null, nestedResolver);argCallback.interest(null,nestedResolver);				return null;returnnull;			}}		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));}).when(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));				sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),resolver),callEdgeResolver,getDelta());		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);				verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a"))));	}}		@Test@Test	public void resolveViaDelta() {publicvoidresolveViaDelta(){		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),callEdgeResolver,getDelta("a"));		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		verify(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a"))));	}}		@Test@Test	public void resolveViaDeltaTwice() {publicvoidresolveViaDeltaTwice(){		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);finalInterestCallback<TestFieldRef,TestFact,TestStatement,TestMethod>innerCallback=mock(InterestCallback.class);		doAnswer(new Answer() {doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];ReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=(ReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>)invocation.getArguments()[1];				resolver.resolve(getDeltaConstraint("b"), innerCallback);resolver.resolve(getDeltaConstraint("b"),innerCallback);				return null;returnnull;			}}		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));}).when(callback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a"))));				sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a", "b"));sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),callEdgeResolver,getDelta("a","b"));		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);				verify(innerCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));verify(innerCallback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a","b"))));	}}		@Test@Test	public void resolveViaDeltaAndThenViaCallSite() {publicvoidresolveViaDeltaAndThenViaCallSite(){		final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> innerCallback = mock(InterestCallback.class);finalInterestCallback<TestFieldRef,TestFact,TestStatement,TestMethod>innerCallback=mock(InterestCallback.class);		doAnswer(new Answer() {doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];ReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=(ReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>)invocation.getArguments()[1];				resolver.resolve(getDeltaConstraint("b"), innerCallback);resolver.resolve(getDeltaConstraint("b"),innerCallback);				return null;returnnull;			}}		}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));}).when(callback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a"))));				sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta("a"));sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),callEdgeResolver,getDelta("a"));		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		verify(innerCallback).canBeResolvedEmpty();verify(innerCallback).canBeResolvedEmpty();	}}	@Test@Test	public void resolveViaCallEdgeResolverAtCallSite() {publicvoidresolveViaCallEdgeResolverAtCallSite(){		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), callEdgeResolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),callEdgeResolver,getDelta());		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		verify(callback).canBeResolvedEmpty();verify(callback).canBeResolvedEmpty();	}}		@Test@Test	public void resolveViaResolverAtCallSite() {publicvoidresolveViaResolverAtCallSite(){		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),resolver,getDelta());		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));verify(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));	}}		@Test@Test	public void resolveViaResolverAtCallSiteTwice() {publicvoidresolveViaResolverAtCallSiteTwice(){		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);		final Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);finalResolver<TestFieldRef,TestFact,TestStatement,TestMethod>nestedResolver=mock(Resolver.class);		doAnswer(new Answer() {doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];InterestCallbackinnerCallback=(InterestCallback)invocation.getArguments()[1];				innerCallback.interest(analyzer, nestedResolver);innerCallback.interest(analyzer,nestedResolver);				return null;returnnull;			}}		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));}).when(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));		doAnswer(new Answer() {doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];InterestCallbackinnerCallback=(InterestCallback)invocation.getArguments()[1];				innerCallback.interest(analyzer, nestedResolver);innerCallback.interest(analyzer,nestedResolver);				return null;returnnull;			}}		}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")), any(InterestCallback.class));}).when(nestedResolver).resolve(eq(getDeltaConstraint("b")),any(InterestCallback.class));				final InterestCallback<TestFieldRef, TestFact, TestStatement, TestMethod> secondCallback = mock(InterestCallback.class);finalInterestCallback<TestFieldRef,TestFact,TestStatement,TestMethod>secondCallback=mock(InterestCallback.class);		doAnswer(new Answer() {doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];ReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=(ReturnSiteResolver)invocation.getArguments()[1];				resolver.resolve(getDeltaConstraint("b"), secondCallback);resolver.resolve(getDeltaConstraint("b"),secondCallback);				return null;returnnull;			}}					}).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));}).when(callback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a"))));				sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),resolver,getDelta());		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);				verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));verify(secondCallback).interest(eq(analyzer),argThat(newReturnSiteResolverArgumentMatcher(createAccessPath("a","b"))));	}}		@Test@Test	public void resolveAsEmptyViaIncomingResolver() {publicvoidresolveAsEmptyViaIncomingResolver(){		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);		Delta<TestFieldRef> delta = new AccessPath<TestFieldRef>().getDeltaTo(new AccessPath<TestFieldRef>().appendExcludedFieldReference(new TestFieldRef("a")));Delta<TestFieldRef>delta=newAccessPath<TestFieldRef>().getDeltaTo(newAccessPath<TestFieldRef>().appendExcludedFieldReference(newTestFieldRef("a")));				doAnswer(new Answer() {doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{				InterestCallback innerCallback = (InterestCallback) invocation.getArguments()[1];InterestCallbackinnerCallback=(InterestCallback)invocation.getArguments()[1];				innerCallback.canBeResolvedEmpty();innerCallback.canBeResolvedEmpty();				return null;returnnull;			}}		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));}).when(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver), callEdgeResolver, delta);sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),resolver),callEdgeResolver,delta);		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);				verify(callback, never()).canBeResolvedEmpty();verify(callback,never()).canBeResolvedEmpty();		verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));verify(callback,never()).interest(any(PerAccessPathMethodAnalyzer.class),any(Resolver.class));	}}		@Test@Test	public void resolveViaCallSiteResolver() {publicvoidresolveViaCallSiteResolver(){		Resolver<TestFieldRef, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<TestFieldRef,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);				sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver),resolver,getDelta());		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);				verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));verify(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));	}}		private class ReturnSiteResolverArgumentMatcher extendsprivateclassReturnSiteResolverArgumentMatcherextends			ArgumentMatcher<ReturnSiteResolver<TestFieldRef, TestFact, TestStatement, TestMethod>> {ArgumentMatcher<ReturnSiteResolver<TestFieldRef,TestFact,TestStatement,TestMethod>>{		private AccessPath<TestFieldRef> accPath;privateAccessPath<TestFieldRef>accPath;		public ReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef> accPath) {publicReturnSiteResolverArgumentMatcher(AccessPath<TestFieldRef>accPath){			this.accPath = accPath;this.accPath=accPath;		}}		@Override@Override		public boolean matches(Object argument) {publicbooleanmatches(Objectargument){			ReturnSiteResolver resolver = (ReturnSiteResolver) argument;ReturnSiteResolverresolver=(ReturnSiteResolver)argument;			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);returnresolver.isInterestGiven()&&resolver.getResolvedAccessPath().equals(accPath)&&resolver.getReturnSite().equals(returnSite);		}}	}}}}





