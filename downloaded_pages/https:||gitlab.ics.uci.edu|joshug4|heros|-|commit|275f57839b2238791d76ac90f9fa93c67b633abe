



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

275f5783















Commit
275f5783


authored
Jul 05, 2013
by


Eric Bodden



Browse files




changing initialization of analysis such that initialSeeds not is a mapping...

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way






parent
b6e78a8e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 275f5783






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/IDESolver.java








View file @ 275f5783






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 275f5783






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

275f5783















Commit
275f5783


authored
Jul 05, 2013
by


Eric Bodden



Browse files




changing initialization of analysis such that initialSeeds not is a mapping...

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way






parent
b6e78a8e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 275f5783






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/IDESolver.java








View file @ 275f5783






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 275f5783






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

275f5783







Open sidebar



Joshua Garcia heros
Commits

275f5783




Open sidebar

Joshua Garcia heros
Commits

275f5783


Joshua GarciaherosherosCommits
275f5783








Commit
275f5783


authored
Jul 05, 2013
by


Eric Bodden



Browse files




changing initialization of analysis such that initialSeeds not is a mapping...

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way






parent
b6e78a8e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 275f5783






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/IDESolver.java








View file @ 275f5783






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 275f5783






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
275f5783


authored
Jul 05, 2013
by


Eric Bodden



Browse files




changing initialization of analysis such that initialSeeds not is a mapping...

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way






parent
b6e78a8e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 275f5783






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/IDESolver.java








View file @ 275f5783






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 275f5783






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
275f5783


authored
Jul 05, 2013
by


Eric Bodden



Browse files



Commit
275f5783


authored
Jul 05, 2013
by


Eric Bodden

275f5783authoredbyEric Bodden

changing initialization of analysis such that initialSeeds not is a mapping...

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





parent
b6e78a8e
















parent
b6e78a8e





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 275f5783






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/IDESolver.java








View file @ 275f5783






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 275f5783






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......














src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}












src/heros/DefaultSeeds.java



0 â†’ 100644







View file @ 275f5783








src/heros/DefaultSeeds.java



0 â†’ 100644









View file @ 275f5783


275f5783










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;/**/** * A utility class for creating default seeds that cause an analysis to simply start at a given statement. * A utility class for creating default seeds that cause an analysis to simply start at a given statement. * This is useful if seeding is performed entirely through flow functions as used to be the case in  * This is useful if seeding is performed entirely through flow functions as used to be the case in  * earlier versions of Heros. * earlier versions of Heros. */ */public class DefaultSeeds {publicclassDefaultSeeds{  public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {publicstatic<N,D>Map<N,Set<D>>make(Set<N>units,DzeroNode){ Map<N,Set<D>> res = new HashMap<N, Set<D>>();Map<N,Set<D>>res=newHashMap<N,Set<D>>(); for (N n : units) {for(Nn:units){ res.put(n, Collections.singleton(zeroNode));res.put(n,Collections.singleton(zeroNode)); }} return res;returnres; }}}}








src/heros/IFDSTabulationProblem.java








View file @ 275f5783






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......












src/heros/IFDSTabulationProblem.java








View file @ 275f5783








src/heros/IFDSTabulationProblem.java










View file @ 275f5783


275f5783



......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......


import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set; I interproceduralCFG();IinterproceduralCFG();  /**/**	 * Returns initial seeds to be used for the analysis. (a set of statements)	 * Returns initial seeds to be used for the analysis. (a set of statements)(a set of statements)	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.This is a mapping of statements to initial analysis facts.	 */	 */ Set<N> initialSeeds();Set<NN>initialSeeds(); Map<N,Set<D>> initialSeeds();MapMap<<NN,,Set<DD>>>initialSeeds();  /**/**	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>








src/heros/solver/IDESolver.java








View file @ 275f5783






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......












src/heros/solver/IDESolver.java








View file @ 275f5783








src/heros/solver/IDESolver.java










View file @ 275f5783


275f5783



......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......






......@@ -98,7 +98,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -199,9 +199,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();



......@@ -511,10 +514,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -734,7 +740,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......


 protected final EdgeFunctions<N,D,M,V> edgeFunctions;protectedfinalEdgeFunctions<N,D,M,V>edgeFunctions; @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected final Set<N> initialSeeds;protectedfinalSet<NN>initialSeeds; protected final Map<N,Set<D>> initialSeeds;protectedfinalMapMap<<NN,,Set<DD>>>initialSeeds; @DontSynchronize("stateless")@DontSynchronize("stateless") protected final JoinLattice<V> valueLattice;protectedfinalJoinLattice<V>valueLattice;		   * lead to a catch block but on the other hand exit the method depending		   * lead to a catch block but on the other hand exit the method depending		   * on the exception being thrown.		   * on the exception being thrown.		   */		   */ for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ propagate(zeroValue, startPoint, zeroValue, allTop);propagate(zeroValue,startPoint,zeroValue,allTop); scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));scheduleEdgeProcessing(newPathEdge<N,D,M>(zeroValue,startPoint,zeroValue)); for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());propagate(zeroValue,startPoint,val,EdgeIdentity.<V>v()); scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));scheduleEdgeProcessing(newPathEdge<N,D,M>(zeroValue,startPoint,val)); }} jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v()); }} awaitCompletionComputeValuesAndShutdown();awaitCompletionComputeValuesAndShutdown();	 */	 */ private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ setVal(startPoint, zeroValue, valueLattice.bottomElement());setVal(startPoint,zeroValue,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,zeroValue); scheduleValueProcessing(new ValuePropagationTask(superGraphNode));scheduleValueProcessing(newValuePropagationTask(superGraphNode)); for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ setVal(startPoint, val, valueLattice.bottomElement());setVal(startPoint,val,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,val); scheduleValueProcessing(new ValuePropagationTask(superGraphNode));scheduleValueProcessing(newValuePropagationTask(superGraphNode)); }} }}  //await termination of tasks//await termination of tasks public void run() {publicvoidrun(){ N n = nAndD.getO1();Nn=nAndD.getO1(); if(icfg.isStartPoint(n) ||if(icfg.isStartPoint(n)|| initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.contains(n)){//our initial seeds are not necessarily method-start points but here they should be treated as such initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.containsKeyKey(n)){//our initial seeds are not necessarily method-start points but here they should be treated as such propagateValueAtStart(nAndD, n);propagateValueAtStart(nAndD,n); }} if(icfg.isCallStmt(n)) {if(icfg.isCallStmt(n)){








src/heros/solver/IFDSSolver.java








View file @ 275f5783






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......












src/heros/solver/IFDSSolver.java








View file @ 275f5783








src/heros/solver/IFDSSolver.java










View file @ 275f5783


275f5783



......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......


import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;importstaticheros.solver.IFDSSolver.BinaryDomain.BOTTOM;import static heros.solver.IFDSSolver.BinaryDomain.TOP;importstaticheros.solver.IFDSSolver.BinaryDomain.TOP;import heros.EdgeFunction;importheros.EdgeFunction;import heros.EdgeFunctions;importheros.EdgeFunctions;import heros.FlowFunctions;importheros.FlowFunctions;import heros.edgefunc.AllTop;importheros.edgefunc.AllTop;import heros.edgefunc.EdgeIdentity;importheros.edgefunc.EdgeIdentity;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;/**/** return ifdsProblem.interproceduralCFG();returnifdsProblem.interproceduralCFG(); }} public Set<N> initialSeeds() {publicSet<NN>initialSeeds(){ public Map<N,Set<D>> initialSeeds() {publicMapMap<<NN,,Set<DD>>>initialSeeds(){ return ifdsProblem.initialSeeds();returnifdsProblem.initialSeeds(); }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






