



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

6ebef3f5















Commit
6ebef3f5


authored
Jan 15, 2015
by


Johannes Lerch



Browse files




changed to single threaded; bugfix







parent
f08a8e49













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......














test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

6ebef3f5















Commit
6ebef3f5


authored
Jan 15, 2015
by


Johannes Lerch



Browse files




changed to single threaded; bugfix







parent
f08a8e49













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......














test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

6ebef3f5







Open sidebar



Joshua Garcia heros
Commits

6ebef3f5




Open sidebar

Joshua Garcia heros
Commits

6ebef3f5


Joshua GarciaherosherosCommits
6ebef3f5








Commit
6ebef3f5


authored
Jan 15, 2015
by


Johannes Lerch



Browse files




changed to single threaded; bugfix







parent
f08a8e49













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......














test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
6ebef3f5


authored
Jan 15, 2015
by


Johannes Lerch



Browse files




changed to single threaded; bugfix







parent
f08a8e49













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......














test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
6ebef3f5


authored
Jan 15, 2015
by


Johannes Lerch



Browse files



Commit
6ebef3f5


authored
Jan 15, 2015
by


Johannes Lerch

6ebef3f5authoredbyJohannes Lerch

changed to single threaded; bugfix






parent
f08a8e49
















parent
f08a8e49





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......














test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 6ebef3f5








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 6ebef3f5


6ebef3f5



......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......






......@@ -23,6 +23,7 @@ import heros.solver.PathEdge;









import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -35,6 +36,7 @@ import org.slf4j.LoggerFactory;









import com.google.common.base.Optional;










import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {



......@@ -71,7 +73,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =










 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();










 










 protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();










 protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();










 










 @DontSynchronize("stateless")










 protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;



......@@ -90,6 +92,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 










 










 /**



......@@ -124,8 +128,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 this.initialSeeds = tabulationProblem.initialSeeds();










 this.jumpFn = new JumpFunctions<N,D>();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.numThreads = Math.max(1,tabulationProblem.numThreads());










 this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe










 this.executor = getExecutor();










 this.worklist = Lists.newLinkedList();










 }





















 /**



......@@ -175,14 +180,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */










 private void runExecutorAndAwaitCompletion() {










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 Throwable exception = executor.getException();










 if(exception!=null) {










 throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		try {










//			executor.awaitCompletion();










//		} catch (InterruptedException e) {










//			e.printStackTrace();










//		}










//		Throwable exception = executor.getException();










//		if(exception!=null) {










//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);










//		}










 while(!worklist.isEmpty()) {










 worklist.pop().run();










 }










 }














......@@ -193,9 +201,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










//    	if (executor.isTerminating())










//    		return;










//    	executor.execute(new PathEdgeProcessingTask(edge));










 worklist.add(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 



......@@ -282,7 +291,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen




















 private void resumeEdges(M method, D factAtMethodStartPoint) {










 //TODO: Check for concurrency issues










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {



......@@ -308,7 +317,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));










 }










 }










 }



......@@ -362,7 +371,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //register end-summary










 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);










 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))










 return;










 return; //FIXME: should never be reached?! -> assert ?










 










 //for each incoming call edge already processed










 //(see processCall(..))



......@@ -480,15 +489,18 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?










 if(equal)










 System.out.println();










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);



......@@ -509,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 private void pauseEdge(PathEdge<N,D> edge) {










 M method = icfg.getMethodOf(edge.getTarget());










 Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());










 if(edges.add(edge)) {










 logger.trace("PAUSED: {}: {}", method, edge);










 }



......@@ -562,8 +574,6 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))



......


import java.util.Collection;importjava.util.Collection;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.LinkedList;importjava.util.LinkedList;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import com.google.common.base.Optional;importcom.google.common.base.Optional;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {publicclassFieldSensitiveIFDSSolver<N,BaseValue,FieldRef,DextendsFieldSensitiveFact<BaseValue,FieldRef,D>,M,IextendsInterproceduralCFG<N,M>>{ protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =protectedfinalMyConcurrentHashMap<M,Set<IncomingEdge<D,N>>>incoming= new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();newMyConcurrentHashMap<M,Set<IncomingEdge<D,N>>>();  protected final MyConcurrentHashMap<M, Set<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, Set<PathEdge<N,D>>>();protectedfinalMyConcurrentHashMap<M,Set<PathEdge<N,D>>>pausedEdges=newMyConcurrentHashMap<M,Set<PathEdge<N,D>>>(); protected final MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>> pausedEdges = new MyConcurrentHashMap<M, ConcurrentHashSet<PathEdge<N,D>>>();protectedfinalMyConcurrentHashMap<M,ConcurrentHashSetConcurrentHash<PathEdge<N,D>>>pausedEdges=newMyConcurrentHashMap<M,ConcurrentHashSetConcurrentHash<PathEdge<N,D>>>();  @DontSynchronize("stateless")@DontSynchronize("stateless") protected final FlowFunctions<N, FieldRef, D, M> flowFunctions;protectedfinalFlowFunctions<N,FieldRef,D,M>flowFunctions;  @DontSynchronize("readOnly")@DontSynchronize("readOnly") protected final boolean followReturnsPastSeeds;protectedfinalbooleanfollowReturnsPastSeeds; private LinkedList<Runnable> worklist;privateLinkedList<Runnable>worklist;   /**/** this.initialSeeds = tabulationProblem.initialSeeds();this.initialSeeds=tabulationProblem.initialSeeds(); this.jumpFn = new JumpFunctions<N,D>();this.jumpFn=newJumpFunctions<N,D>(); this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();this.followReturnsPastSeeds=tabulationProblem.followReturnsPastSeeds(); this.numThreads = Math.max(1,tabulationProblem.numThreads());this.numThreads=Math.max(1,tabulationProblem.numThreads()); this.numThreads = 1; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safethis.numThreads=11;; //Math.max(1,tabulationProblem.numThreads()); //solution is in the current state not thread safe// //solution is in the current state not thread safe this.executor = getExecutor();this.executor=getExecutor(); this.worklist = Lists.newLinkedList();this.worklist=Lists.newLinkedList(); }} /**/**	 * Runs execution, re-throwing exceptions that might be thrown during its execution.	 * Runs execution, re-throwing exceptions that might be thrown during its execution.	 */	 */ private void runExecutorAndAwaitCompletion() {privatevoidrunExecutorAndAwaitCompletion(){ try {try{ executor.awaitCompletion();executor.awaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }} Throwable exception = executor.getException();Throwableexception=executor.getException(); if(exception!=null) {if(exception!=null){ throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);thrownewRuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);//		try {//		try {//			executor.awaitCompletion();//			executor.awaitCompletion();//		} catch (InterruptedException e) {//		} catch (InterruptedException e) {//			e.printStackTrace();//			e.printStackTrace();//		}//		}//		Throwable exception = executor.getException();//		Throwable exception = executor.getException();//		if(exception!=null) {//		if(exception!=null) {//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);//			throw new RuntimeException("There were exceptions during IFDS analysis. Exiting.",exception);//		}//		} while(!worklist.isEmpty()) {while(!worklist.isEmpty()){ worklist.pop().run();worklist.pop().run(); }} }} protected void scheduleEdgeProcessing(PathEdge<N,D> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D>edge){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge));//    	if (executor.isTerminating())//    	if (executor.isTerminating())//    		return;//    		return;//    	executor.execute(new PathEdgeProcessingTask(edge));//    	executor.execute(new PathEdgeProcessingTask(edge)); worklist.add(new PathEdgeProcessingTask(edge));worklist.add(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}  private void resumeEdges(M method, D factAtMethodStartPoint) {privatevoidresumeEdges(Mmethod,DfactAtMethodStartPoint){ //TODO: Check for concurrency issues//TODO: Check for concurrency issues Set<PathEdge<N, D>> edges = pausedEdges.get(method);Set<PathEdge<N,D>>edges=pausedEdges.get(method); ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);ConcurrentHashSetConcurrentHash<PathEdge<N,D>>edges=pausedEdges.get(method); if(edges != null) {if(edges!=null){ for(PathEdge<N, D> edge : edges) {for(PathEdge<N,D>edge:edges){ if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {if(AccessPathUtil.isPrefixOf(edge.factAtSource(),factAtMethodStartPoint)){ incomingEdge.getCallSite(), incomingEdge.getCallSite(), applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),applyConstraint(constraint,incomingEdge.getCallerCallSiteFact()), method,method, edge.factAtSource()));edgeedge..factAtSourcefactAtSource()));( applyConstraint(constraint, incomingEdge.getCalleeSourceFact())));applyConstraintapplyConstraint((constraintconstraint,, incomingEdgeincomingEdge..getCalleeSourceFactgetCalleeSourceFact())));() }} }} }} //register end-summary//register end-summary SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);SummaryEdge<D,N>summaryEdge=newSummaryEdge<D,N>(d1,n,d2); if (!addEndSummary(methodThatNeedsSummary, summaryEdge))if(!addEndSummary(methodThatNeedsSummary,summaryEdge)) return;return; return; //FIXME: should never be reached?! -> assert ?return; //FIXME: should never be reached?! -> assert ?//FIXME: should never be reached?! -> assert ?  //for each incoming call edge already processed//for each incoming call edge already processed //(see processCall(..))//(see processCall(..)) propagate |= visited.get(incEdge.getCallSite());propagate|=visited.get(incEdge.getCallSite()); }} else {else{ boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for thisbooleanequal=incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource());//TODO: write test case for this boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this //useless check?booleanequal=incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource());//TODO: write test case for this //useless check? if(equal)if(equal) System.out.println();System.out.println(); if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {if(!equal&&!callSitesWithInterest.contains(incEdge.getCallSite())){ Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());Constraint<FieldRef>callerConstraint=newDeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(),pathEdge.factAtSource().getAccessPath());  PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(PathEdge<N,D>callerEdge=newConcretizationPathEdge<>( applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), applyConstraint(callerConstraint,incEdge.getCallerSourceFact()), incEdge.getCallSite(), incEdge.getCallSite(), applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),applyConstraint(callerConstraint,incEdge.getCallerCallSiteFact()), calleeMethod,calleeMethod, pathEdge.factAtSource());pathEdgepathEdge..factAtSourcefactAtSource());( applyConstraint(callerConstraint, incEdge.getCalleeSourceFact()));applyConstraintapplyConstraint((callerConstraintcallerConstraint,, incEdgeincEdge..getCalleeSourceFactgetCalleeSourceFact()));() visited.put(incEdge.getCallSite(), null);visited.put(incEdge.getCallSite(),null); boolean result = propagateConstrained(callerEdge, visited);booleanresult=propagateConstrained(callerEdge,visited); visited.put(incEdge.getCallSite(), result);visited.put(incEdge.getCallSite(),result);  private void pauseEdge(PathEdge<N,D> edge) {privatevoidpauseEdge(PathEdge<N,D>edge){ M method = icfg.getMethodOf(edge.getTarget());Mmethod=icfg.getMethodOf(edge.getTarget()); Set<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());Set<PathEdge<N,D>>edges=pausedEdges.putIfAbsentElseGet(method,newConcurrentHashSet<PathEdge<N,D>>()); ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.putIfAbsentElseGet(method, new ConcurrentHashSet<PathEdge<N,D>>());ConcurrentHashSetConcurrentHash<PathEdge<N,D>>edges=pausedEdges.putIfAbsentElseGet(method,newConcurrentHashSet<PathEdge<N,D>>()); if(edges.add(edge)) {if(edges.add(edge)){ logger.trace("PAUSED: {}: {}", method, edge);logger.trace("PAUSED: {}: {}",method,edge); }}  if(edge instanceof ConcretizationPathEdge) {if(edgeinstanceofConcretizationPathEdge){ ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;ConcretizationPathEdge<M,N,D>concEdge=(ConcretizationPathEdge<M,N,D>)edge; jumpFn.addFunction(concEdge);jumpFn.addFunction(concEdge);  IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), IncomingEdge<D,N>incomingEdge=newIncomingEdge<D,N>(concEdge.getCalleeSourceFact(), concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());concEdge.getTarget(),concEdge.factAtSource(),concEdge.factAtTarget()); if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))if(!addIncoming(concEdge.getCalleeMethod(),incomingEdge))








test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......












test/heros/alias/AccessPathUtilTest.java








View file @ 6ebef3f5








test/heros/alias/AccessPathUtilTest.java










View file @ 6ebef3f5


6ebef3f5



......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......






......@@ -65,10 +65,9 @@ public class AccessPathUtilTest {









 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test



......


  @Test@Test public void testMultipleExclusions() {publicvoidtestMultipleExclusions(){ assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));assertTrue(isPrefixOf(newFact("a^f,g"),newFact("a^f"))); assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));assertFalse(isPrefixOf(newFact("a^f"),newFact("a^f,g"))); assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));assertTrue(isPrefixOf(newFact("a^f,g"),newFact("a^f"))); assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));assertTrue(isPrefixOf(newFact("a^f,g"),newFact("a^g"))); assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));assertFalse(isPrefixOf(newFact("a^f"),newFact("a^f,g"))); }} @Test@Test








test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......












test/heros/alias/FieldSensitiveSolverTest.java








View file @ 6ebef3f5








test/heros/alias/FieldSensitiveSolverTest.java










View file @ 6ebef3f5


6ebef3f5



......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......






......@@ -358,6 +358,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 @Ignore("assumes alternative to k-limitting is used")










 public void mergeExcludedField() {










 helper.method("foo",










 startPoints("a"),



......


 }}  @Test@Test @Ignore("assumes alternative to k-limitting is used")@Ignore("assumes alternative to k-limitting is used") public void mergeExcludedField() {publicvoidmergeExcludedField(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"),









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






