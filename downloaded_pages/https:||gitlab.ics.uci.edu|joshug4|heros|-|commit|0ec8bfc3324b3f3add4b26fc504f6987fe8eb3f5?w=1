



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

0ec8bfc3















Commit
0ec8bfc3


authored
Jun 16, 2013
by


Steven Arzt



Browse files




fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.






parent
4ae358b3













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0ec8bfc3






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

0ec8bfc3















Commit
0ec8bfc3


authored
Jun 16, 2013
by


Steven Arzt



Browse files




fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.






parent
4ae358b3













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0ec8bfc3






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

0ec8bfc3







Open sidebar



Joshua Garcia heros
Commits

0ec8bfc3




Open sidebar

Joshua Garcia heros
Commits

0ec8bfc3


Joshua GarciaherosherosCommits
0ec8bfc3








Commit
0ec8bfc3


authored
Jun 16, 2013
by


Steven Arzt



Browse files




fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.






parent
4ae358b3













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0ec8bfc3






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
0ec8bfc3


authored
Jun 16, 2013
by


Steven Arzt



Browse files




fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.






parent
4ae358b3













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0ec8bfc3






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
0ec8bfc3


authored
Jun 16, 2013
by


Steven Arzt



Browse files



Commit
0ec8bfc3


authored
Jun 16, 2013
by


Steven Arzt

0ec8bfc3authoredbySteven Arzt

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





parent
4ae358b3
















parent
4ae358b3





parent












Changes
1
1


Show whitespace changes

Inline
Side-by-side






Show whitespace changes

Inline
Side-by-side




Show whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 0ec8bfc3






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......














src/heros/solver/IDESolver.java








View file @ 0ec8bfc3






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......












src/heros/solver/IDESolver.java








View file @ 0ec8bfc3








src/heros/solver/IDESolver.java










View file @ 0ec8bfc3


0ec8bfc3



......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......






......@@ -413,6 +413,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -435,6 +444,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.



......


  //handling for unbalanced problems where we return out of a method whose call was never processed//handling for unbalanced problems where we return out of a method whose call was never processed if(inc.isEmpty() && followReturnsPastSeeds) {if(inc.isEmpty()&&followReturnsPastSeeds){ // Make sure that the whole method was never called, regardless of the// Make sure that the whole method was never called, regardless of the // calling jump function.// calling jump function. boolean wasCalled = false;booleanwasCalled=false; for(N sP: startPointsOf)for(NsP:startPointsOf) if (incoming.containsRow(sP)) {if(incoming.containsRow(sP)){ wasCalled = true;wasCalled=true; break;break; }} if(!wasCalled && followReturnsPastSeeds) {if(!wasCalled&&followReturnsPastSeeds){ Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);Set<N>callers=icfg.getCallersOf(methodThatNeedsSummary); for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ }} }} }} }}  /**/**	 * Lines 33-37 of the algorithm.	 * Lines 33-37 of the algorithm.









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






