



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5

















e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


ControlFlowJoinResolverTest.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolverTest.java



4.56 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ControlFlowJoinResolverTest {










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






27




	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




30




		return new DeltaConstraint<>(getDelta(fieldRefs));
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	private static Delta<String> getDelta(String... fieldRefs) {
		AccessPath<String> accPath = createAccessPath(fieldRefs);
		return new AccessPath<String>().getDeltaTo(accPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






34




35




	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






36




37




	protected static AccessPath<String> createAccessPath(String... fieldRefs) {
		AccessPath<String> accPath = new AccessPath<>();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






38




		for (String fieldRef : fieldRefs) {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






39




			accPath = accPath.append(fieldRef);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






40




41




42




43




		}
		return accPath;
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




	private TestStatement joinStmt;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






46




	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






47




	private TestFact fact;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






48




49




	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;
	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76





	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		joinStmt = new TestStatement("joinStmt");
		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));
		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






77




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






78




79




80




81




82




83




84




		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






85




86




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






87




88




89




		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






90




91




				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




94




95




96




97




98




99




100




101




102




103




104




				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	
	private class ResolverArgumentMatcher extends









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






105




			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






106














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






107




		private AccessPath<String> accPath;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






108














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






109




		public ResolverArgumentMatcher(AccessPath<String> accPath) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






110




111




112




113




114




115




116




117




118




119




			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);
		}
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5

















e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


ControlFlowJoinResolverTest.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolverTest.java



4.56 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ControlFlowJoinResolverTest {










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






27




	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




30




		return new DeltaConstraint<>(getDelta(fieldRefs));
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	private static Delta<String> getDelta(String... fieldRefs) {
		AccessPath<String> accPath = createAccessPath(fieldRefs);
		return new AccessPath<String>().getDeltaTo(accPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






34




35




	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






36




37




	protected static AccessPath<String> createAccessPath(String... fieldRefs) {
		AccessPath<String> accPath = new AccessPath<>();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






38




		for (String fieldRef : fieldRefs) {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






39




			accPath = accPath.append(fieldRef);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






40




41




42




43




		}
		return accPath;
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




	private TestStatement joinStmt;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






46




	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






47




	private TestFact fact;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






48




49




	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;
	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76





	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		joinStmt = new TestStatement("joinStmt");
		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));
		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






77




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






78




79




80




81




82




83




84




		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






85




86




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






87




88




89




		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






90




91




				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




94




95




96




97




98




99




100




101




102




103




104




				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	
	private class ResolverArgumentMatcher extends









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






105




			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






106














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






107




		private AccessPath<String> accPath;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






108














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






109




		public ResolverArgumentMatcher(AccessPath<String> accPath) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






110




111




112




113




114




115




116




117




118




119




			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);
		}
	}
}











Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5







Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5




Open sidebar

Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5


Joshua Garciaherosheros
e60e669d8960a04c584fcc00bb971e7e34b3cce5










e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


ControlFlowJoinResolverTest.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolverTest.java



4.56 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ControlFlowJoinResolverTest {










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






27




	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




30




		return new DeltaConstraint<>(getDelta(fieldRefs));
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	private static Delta<String> getDelta(String... fieldRefs) {
		AccessPath<String> accPath = createAccessPath(fieldRefs);
		return new AccessPath<String>().getDeltaTo(accPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






34




35




	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






36




37




	protected static AccessPath<String> createAccessPath(String... fieldRefs) {
		AccessPath<String> accPath = new AccessPath<>();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






38




		for (String fieldRef : fieldRefs) {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






39




			accPath = accPath.append(fieldRef);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






40




41




42




43




		}
		return accPath;
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




	private TestStatement joinStmt;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






46




	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






47




	private TestFact fact;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






48




49




	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;
	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76





	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		joinStmt = new TestStatement("joinStmt");
		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));
		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






77




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






78




79




80




81




82




83




84




		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






85




86




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






87




88




89




		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






90




91




				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




94




95




96




97




98




99




100




101




102




103




104




				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	
	private class ResolverArgumentMatcher extends









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






105




			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






106














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






107




		private AccessPath<String> accPath;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






108














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






109




		public ResolverArgumentMatcher(AccessPath<String> accPath) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






110




111




112




113




114




115




116




117




118




119




			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);
		}
	}
}














e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


ControlFlowJoinResolverTest.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolverTest.java



4.56 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ControlFlowJoinResolverTest {










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






27




	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




30




		return new DeltaConstraint<>(getDelta(fieldRefs));
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	private static Delta<String> getDelta(String... fieldRefs) {
		AccessPath<String> accPath = createAccessPath(fieldRefs);
		return new AccessPath<String>().getDeltaTo(accPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






34




35




	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






36




37




	protected static AccessPath<String> createAccessPath(String... fieldRefs) {
		AccessPath<String> accPath = new AccessPath<>();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






38




		for (String fieldRef : fieldRefs) {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






39




			accPath = accPath.append(fieldRef);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






40




41




42




43




		}
		return accPath;
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




	private TestStatement joinStmt;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






46




	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






47




	private TestFact fact;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






48




49




	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;
	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76





	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		joinStmt = new TestStatement("joinStmt");
		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));
		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






77




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






78




79




80




81




82




83




84




		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






85




86




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






87




88




89




		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






90




91




				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




94




95




96




97




98




99




100




101




102




103




104




				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	
	private class ResolverArgumentMatcher extends









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






105




			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






106














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






107




		private AccessPath<String> accPath;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






108














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






109




		public ResolverArgumentMatcher(AccessPath<String> accPath) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






110




111




112




113




114




115




116




117




118




119




			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);
		}
	}
}










e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


ControlFlowJoinResolverTest.java



Find file
Normal viewHistoryPermalink




e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


ControlFlowJoinResolverTest.java





e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag








e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag





e60e669d8960a04c584fcc00bb971e7e34b3cce5

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

test

heros

alias

ControlFlowJoinResolverTest.java
Find file
Normal viewHistoryPermalink




ControlFlowJoinResolverTest.java



4.56 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ControlFlowJoinResolverTest {










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






27




	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




30




		return new DeltaConstraint<>(getDelta(fieldRefs));
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	private static Delta<String> getDelta(String... fieldRefs) {
		AccessPath<String> accPath = createAccessPath(fieldRefs);
		return new AccessPath<String>().getDeltaTo(accPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






34




35




	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






36




37




	protected static AccessPath<String> createAccessPath(String... fieldRefs) {
		AccessPath<String> accPath = new AccessPath<>();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






38




		for (String fieldRef : fieldRefs) {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






39




			accPath = accPath.append(fieldRef);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






40




41




42




43




		}
		return accPath;
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




	private TestStatement joinStmt;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






46




	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






47




	private TestFact fact;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






48




49




	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;
	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76





	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		joinStmt = new TestStatement("joinStmt");
		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));
		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






77




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






78




79




80




81




82




83




84




		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






85




86




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






87




88




89




		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






90




91




				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




94




95




96




97




98




99




100




101




102




103




104




				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	
	private class ResolverArgumentMatcher extends









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






105




			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






106














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






107




		private AccessPath<String> accPath;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






108














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






109




		public ResolverArgumentMatcher(AccessPath<String> accPath) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






110




111




112




113




114




115




116




117




118




119




			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);
		}
	}
}








ControlFlowJoinResolverTest.java



4.56 KB










ControlFlowJoinResolverTest.java



4.56 KB









Newer










Older
NewerOlder







rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;
import heros.alias.AccessPath.Delta;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

public class ControlFlowJoinResolverTest {










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






27




	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




30




		return new DeltaConstraint<>(getDelta(fieldRefs));
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	private static Delta<String> getDelta(String... fieldRefs) {
		AccessPath<String> accPath = createAccessPath(fieldRefs);
		return new AccessPath<String>().getDeltaTo(accPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






34




35




	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






36




37




	protected static AccessPath<String> createAccessPath(String... fieldRefs) {
		AccessPath<String> accPath = new AccessPath<>();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






38




		for (String fieldRef : fieldRefs) {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






39




			accPath = accPath.append(fieldRef);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






40




41




42




43




		}
		return accPath;
	}










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




	private TestStatement joinStmt;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






46




	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






47




	private TestFact fact;









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






48




49




	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;
	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76





	@Before
	public void before() {
		analyzer = mock(PerAccessPathMethodAnalyzer.class);
		joinStmt = new TestStatement("joinStmt");
		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);
		fact = new TestFact("value");
		callback = mock(InterestCallback.class);
		callEdgeResolver = mock(CallEdgeResolver.class);
	}

	@Test
	public void emptyIncomingFact() {
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));
		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));
		assertTrue(sut.isInterestGiven());
	}

	@Test
	public void resolveViaIncomingFact() {
		sut.resolve(getDeltaConstraint("a"), callback);
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}

	@Test
	public void registerCallbackAtIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






77




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






78




79




80




81




82




83




84




		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
	}
	
	@Test
	public void resolveViaIncomingResolver() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






85




86




		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);
		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






87




88




89




		Mockito.doAnswer(new Answer(){
			@Override
			public Object answer(InvocationOnMock invocation) throws Throwable {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






90




91




				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = 
						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




94




95




96




97




98




99




100




101




102




103




104




				argCallback.interest(null, nestedResolver);
				return null;
			}
		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));
		
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));
		sut.resolve(getDeltaConstraint("a"), callback);
		
		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));
	}
	
	
	private class ResolverArgumentMatcher extends









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






105




			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






106














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






107




		private AccessPath<String> accPath;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






108














removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






109




		public ResolverArgumentMatcher(AccessPath<String> accPath) {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






110




111




112




113




114




115




116




117




118




119




			this.accPath = accPath;
		}

		@Override
		public boolean matches(Object argument) {
			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;
			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);
		}
	}
}







rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import static org.mockito.Mockito.*;importstaticorg.mockito.Mockito.*;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import org.mockito.ArgumentMatcher;importorg.mockito.ArgumentMatcher;import org.mockito.Mockito;importorg.mockito.Mockito;import org.mockito.invocation.InvocationOnMock;importorg.mockito.invocation.InvocationOnMock;import org.mockito.stubbing.Answer;importorg.mockito.stubbing.Answer;import org.mockito.verification.VerificationMode;importorg.mockito.verification.VerificationMode;public class ControlFlowJoinResolverTest {publicclassControlFlowJoinResolverTest{



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

27
	private static DeltaConstraint<String> getDeltaConstraint(String... fieldRefs) {privatestaticDeltaConstraint<String>getDeltaConstraint(String...fieldRefs){



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

28

29

30
		return new DeltaConstraint<>(getDelta(fieldRefs));returnnewDeltaConstraint<>(getDelta(fieldRefs));	}}



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

31

32

33
	private static Delta<String> getDelta(String... fieldRefs) {privatestaticDelta<String>getDelta(String...fieldRefs){		AccessPath<String> accPath = createAccessPath(fieldRefs);AccessPath<String>accPath=createAccessPath(fieldRefs);		return new AccessPath<String>().getDeltaTo(accPath);returnnewAccessPath<String>().getDeltaTo(accPath);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

34

35
	}}



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

36

37
	protected static AccessPath<String> createAccessPath(String... fieldRefs) {protectedstaticAccessPath<String>createAccessPath(String...fieldRefs){		AccessPath<String> accPath = new AccessPath<>();AccessPath<String>accPath=newAccessPath<>();



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

38
		for (String fieldRef : fieldRefs) {for(StringfieldRef:fieldRefs){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

39
			accPath = accPath.append(fieldRef);accPath=accPath.append(fieldRef);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

40

41

42

43
		}}		return accPath;returnaccPath;	}}



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

44
	private PerAccessPathMethodAnalyzer<String, TestFact, TestStatement, TestMethod> analyzer;privatePerAccessPathMethodAnalyzer<String,TestFact,TestStatement,TestMethod>analyzer;



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

45
	private TestStatement joinStmt;privateTestStatementjoinStmt;



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

46
	private ControlFlowJoinResolver<String, TestFact, TestStatement, TestMethod> sut;privateControlFlowJoinResolver<String,TestFact,TestStatement,TestMethod>sut;



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

47
	private TestFact fact;privateTestFactfact;



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

48

49
	private InterestCallback<String, TestFact, TestStatement, TestMethod> callback;privateInterestCallback<String,TestFact,TestStatement,TestMethod>callback;	private Resolver<String, TestFact, TestStatement, TestMethod> callEdgeResolver;privateResolver<String,TestFact,TestStatement,TestMethod>callEdgeResolver;



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76
	@Before@Before	public void before() {publicvoidbefore(){		analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class);		joinStmt = new TestStatement("joinStmt");joinStmt=newTestStatement("joinStmt");		sut = new ControlFlowJoinResolver<>(analyzer, joinStmt);sut=newControlFlowJoinResolver<>(analyzer,joinStmt);		fact = new TestFact("value");fact=newTestFact("value");		callback = mock(InterestCallback.class);callback=mock(InterestCallback.class);		callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class);	}}	@Test@Test	public void emptyIncomingFact() {publicvoidemptyIncomingFact(){		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), callEdgeResolver));sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),callEdgeResolver));		verify(analyzer).processFlowFromJoinStmt(eq(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(fact, createAccessPath(), sut))));verify(analyzer).processFlowFromJoinStmt(eq(newWrappedFactAtStatement<>(joinStmt,newWrappedFact<>(fact,createAccessPath(),sut))));		assertTrue(sut.isInterestGiven());assertTrue(sut.isInterestGiven());	}}	@Test@Test	public void resolveViaIncomingFact() {publicvoidresolveViaIncomingFact(){		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		sut.addIncoming(new WrappedFact<>(fact, createAccessPath("a"), callEdgeResolver));sut.addIncoming(newWrappedFact<>(fact,createAccessPath("a"),callEdgeResolver));		verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThat(newResolverArgumentMatcher(createAccessPath("a"))));	}}	@Test@Test	public void registerCallbackAtIncomingResolver() {publicvoidregisterCallbackAtIncomingResolver(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

77
		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<String,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

78

79

80

81

82

83

84
		sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),resolver));		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);		verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));verify(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));	}}		@Test@Test	public void resolveViaIncomingResolver() {publicvoidresolveViaIncomingResolver(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

85

86
		Resolver<String, TestFact, TestStatement, TestMethod> resolver = mock(Resolver.class);Resolver<String,TestFact,TestStatement,TestMethod>resolver=mock(Resolver.class);		final Resolver<String, TestFact, TestStatement, TestMethod> nestedResolver = mock(Resolver.class);finalResolver<String,TestFact,TestStatement,TestMethod>nestedResolver=mock(Resolver.class);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

87

88

89
		Mockito.doAnswer(new Answer(){Mockito.doAnswer(newAnswer(){			@Override@Override			public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

90

91
				InterestCallback<String, TestFact, TestStatement, TestMethod> argCallback = InterestCallback<String,TestFact,TestStatement,TestMethod>argCallback=						(InterestCallback<String, TestFact, TestStatement, TestMethod>) invocation.getArguments()[1];(InterestCallback<String,TestFact,TestStatement,TestMethod>)invocation.getArguments()[1];



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

92

93

94

95

96

97

98

99

100

101

102

103

104
				argCallback.interest(null, nestedResolver);argCallback.interest(null,nestedResolver);				return null;returnnull;			}}		}).when(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));}).when(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class));				sut.addIncoming(new WrappedFact<>(fact, createAccessPath(), resolver));sut.addIncoming(newWrappedFact<>(fact,createAccessPath(),resolver));		sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);				verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThat(newResolverArgumentMatcher(createAccessPath("a"))));	}}			private class ResolverArgumentMatcher extendsprivateclassResolverArgumentMatcherextends



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

105
			ArgumentMatcher<ReturnSiteResolver<String, TestFact, TestStatement, TestMethod>> {ArgumentMatcher<ReturnSiteResolver<String,TestFact,TestStatement,TestMethod>>{



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

106




removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

107
		private AccessPath<String> accPath;privateAccessPath<String>accPath;



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

108




removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

109
		public ResolverArgumentMatcher(AccessPath<String> accPath) {publicResolverArgumentMatcher(AccessPath<String>accPath){



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

110

111

112

113

114

115

116

117

118

119
			this.accPath = accPath;this.accPath=accPath;		}}		@Override@Override		public boolean matches(Object argument) {publicbooleanmatches(Objectargument){			ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;ControlFlowJoinResolverresolver=(ControlFlowJoinResolver)argument;			return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);returnresolver.isInterestGiven()&&resolver.getResolvedAccessPath().equals(accPath)&&resolver.getJoinStmt().equals(joinStmt);		}}	}}}}





