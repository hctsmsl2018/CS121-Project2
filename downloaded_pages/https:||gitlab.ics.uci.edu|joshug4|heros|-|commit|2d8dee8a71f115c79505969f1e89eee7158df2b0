



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

2d8dee8a















Commit
2d8dee8a


authored
Feb 09, 2015
by


Johannes Lerch



Browse files




subumption + debugging







parent
d7cafbe8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 2d8dee8a






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}














test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

2d8dee8a















Commit
2d8dee8a


authored
Feb 09, 2015
by


Johannes Lerch



Browse files




subumption + debugging







parent
d7cafbe8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 2d8dee8a






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}














test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

2d8dee8a







Open sidebar



Joshua Garcia heros
Commits

2d8dee8a




Open sidebar

Joshua Garcia heros
Commits

2d8dee8a


Joshua GarciaherosherosCommits
2d8dee8a








Commit
2d8dee8a


authored
Feb 09, 2015
by


Johannes Lerch



Browse files




subumption + debugging







parent
d7cafbe8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 2d8dee8a






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}














test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
2d8dee8a


authored
Feb 09, 2015
by


Johannes Lerch



Browse files




subumption + debugging







parent
d7cafbe8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 2d8dee8a






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}














test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
2d8dee8a


authored
Feb 09, 2015
by


Johannes Lerch



Browse files



Commit
2d8dee8a


authored
Feb 09, 2015
by


Johannes Lerch

2d8dee8aauthoredbyJohannes Lerch

subumption + debugging






parent
d7cafbe8
















parent
d7cafbe8





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPath.java








View file @ 2d8dee8a






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}














test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}














src/heros/alias/AccessPath.java








View file @ 2d8dee8a






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}












src/heros/alias/AccessPath.java








View file @ 2d8dee8a








src/heros/alias/AccessPath.java










View file @ 2d8dee8a


2d8dee8a



......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}






......@@ -17,6 +17,7 @@ import heros.alias.Transition.MatchResult;









import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;










import java.util.List;










import java.util.Set;





















import com.google.common.base.Joiner;



......@@ -40,6 +41,8 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public AccessPath() {










 accesses = new SubAccessPath[0];










 exclusions = new Set[0];










 if(exclusions.length > 1) 










 System.out.println("Exclusion depth: "+exclusions.length);










 }










 










 AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {



......@@ -331,28 +334,6 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 }










 










 return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);










 










//		int currentIndex = 0;










//		for(SubAccessPath<T> sub : accesses) {










//			if(!(sub instanceof SpecificFieldAccess))










//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());










//			










//			T field = sub.elements().iterator().next();










//			










//			while(true) {










//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {










//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)










//						currentIndex++;










//					break;










//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {










//					currentIndex++;










//				}










//				else










//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);










//			}










//		}










//		










//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);










 }










 










 public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {



......@@ -451,4 +432,70 @@ public class AccessPath<T extends AccessPath.FieldRef<T>> {









 public boolean hasEmptyAccessPath() {










 return accesses.length == 0;










 }





















 public boolean subsumes(AccessPath<T> accPath) {










 int currIndex = 0;










 int otherIndex = 0;










 










 










 outer: while(true) {










 Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);










 Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);





















 if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) 










 && otherIndex>=accPath.accesses.length-1) {










 if(transitions.isEmpty())










 return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);










 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(!match.hasMatched())










 return false;










 } 










 }










 return hasAtLeastTheSameExclusionsAs(accPath);










 }





















 for(Transition<T> transition : transitions) {










 for(Transition<T> otherTransition : otherTransitions) {










 MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);










 if(match.hasMatched()) {










 if(otherIndex == otherTransition.transitionToIndex())










 continue;










 










 currIndex = transition.transitionToIndex();










 otherIndex = otherTransition.transitionToIndex();










 continue outer;










 }










 }










 }










 return false;










 }










 }










 










 private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {










 if(exclusions.length > accPath.exclusions.length)










 return false;










 










 for(int i=0; i<accPath.exclusions.length; i++) {










 if(i<exclusions.length) {










 if(!accPath.exclusions[i].containsAll(exclusions[i]))










 return false;










 }










 else










 return true;










 }










 return true;










 }





















 public Collection<String> tokenize() {










 List<String> result = Lists.newLinkedList();










 for(SubAccessPath<T> s : accesses) {










 result.add(s.toString());










 }










 for(Set<T> excl : exclusions) {










 result.add("^"+Joiner.on(",").join(excl));










 }










 return result;










 }










}


import java.util.Arrays;importjava.util.Arrays;import java.util.Collection;importjava.util.Collection;import java.util.HashSet;importjava.util.HashSet;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import com.google.common.base.Joiner;importcom.google.common.base.Joiner; public AccessPath() {publicAccessPath(){ accesses = new SubAccessPath[0];accesses=newSubAccessPath[0]; exclusions = new Set[0];exclusions=newSet[0]; if(exclusions.length > 1) if(exclusions.length>1) System.out.println("Exclusion depth: "+exclusions.length);System.out.println("Exclusion depth: "+exclusions.length); }}  AccessPath(SubAccessPath<T>[] accesses, Set<T>[] exclusions) {AccessPath(SubAccessPath<T>[]accesses,Set<T>[]exclusions){ }}  return Arrays.copyOfRange(accPath.accesses, otherIndex, accPath.accesses.length);returnArrays.copyOfRange(accPath.accesses,otherIndex,accPath.accesses.length); //		int currentIndex = 0;//		int currentIndex = 0;//		for(SubAccessPath<T> sub : accesses) {//		for(SubAccessPath<T> sub : accesses) {//			if(!(sub instanceof SpecificFieldAccess))//			if(!(sub instanceof SpecificFieldAccess))//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());//				throw new IllegalArgumentException("Cannot calculate delta to. Current AccessPath contains set elements: "+toString());//			//			//			T field = sub.elements().iterator().next();//			T field = sub.elements().iterator().next();//			//			//			while(true) {//			while(true) {//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {//				if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex].contains(field)) {//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)//					if(accPath.accesses[currentIndex] instanceof SpecificFieldAccess)//						currentIndex++;//						currentIndex++;//					break;//					break;//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {//				} else if(currentIndex<accPath.accesses.length && accPath.accesses[currentIndex] instanceof SetOfPossibleFieldAccesses) {//					currentIndex++;//					currentIndex++;//				}//				}//				else//				else//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);//					throw new IllegalArgumentException("'"+toString()+ "' is not a prefix of the given AccessPath: "+accPath);//			}//			}//		}//		}//		//		//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length);//		return Arrays.copyOfRange(accPath.accesses, currentIndex, accPath.accesses.length); }}  public AccessPath<T> mergeExcludedFieldReferences(AccessPath<T> accPath) {publicAccessPath<T>mergeExcludedFieldReferences(AccessPath<T>accPath){ public boolean hasEmptyAccessPath() {publicbooleanhasEmptyAccessPath(){ return accesses.length == 0;returnaccesses.length==0; }} public boolean subsumes(AccessPath<T> accPath) {publicbooleansubsumes(AccessPath<T>accPath){ int currIndex = 0;intcurrIndex=0; int otherIndex = 0;intotherIndex=0;   outer: while(true) {outer:while(true){ Collection<Transition<T>> transitions = possibleTransitions(currIndex, false);Collection<Transition<T>>transitions=possibleTransitions(currIndex,false); Collection<Transition<T>> otherTransitions = accPath.possibleTransitions(otherIndex, false);Collection<Transition<T>>otherTransitions=accPath.possibleTransitions(otherIndex,false); if((currIndex >= accesses.length || (currIndex == accesses.length-1 && accesses[currIndex] instanceof SetOfPossibleFieldAccesses)) if((currIndex>=accesses.length||(currIndex==accesses.length-1&&accesses[currIndex]instanceofSetOfPossibleFieldAccesses)) && otherIndex>=accPath.accesses.length-1) {&&otherIndex>=accPath.accesses.length-1){ if(transitions.isEmpty())if(transitions.isEmpty()) return otherTransitions.isEmpty() && hasAtLeastTheSameExclusionsAs(accPath);returnotherTransitions.isEmpty()&&hasAtLeastTheSameExclusionsAs(accPath); for(Transition<T> transition : transitions) {for(Transition<T>transition:transitions){ for(Transition<T> otherTransition : otherTransitions) {for(Transition<T>otherTransition:otherTransitions){ MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);MatchResult<Transition<T>>match=transition.isPrefixMatchOf(otherTransition); if(!match.hasMatched())if(!match.hasMatched()) return false;returnfalse; } } }} return hasAtLeastTheSameExclusionsAs(accPath);returnhasAtLeastTheSameExclusionsAs(accPath); }} for(Transition<T> transition : transitions) {for(Transition<T>transition:transitions){ for(Transition<T> otherTransition : otherTransitions) {for(Transition<T>otherTransition:otherTransitions){ MatchResult<Transition<T>> match = transition.isPrefixMatchOf(otherTransition);MatchResult<Transition<T>>match=transition.isPrefixMatchOf(otherTransition); if(match.hasMatched()) {if(match.hasMatched()){ if(otherIndex == otherTransition.transitionToIndex())if(otherIndex==otherTransition.transitionToIndex()) continue;continue;  currIndex = transition.transitionToIndex();currIndex=transition.transitionToIndex(); otherIndex = otherTransition.transitionToIndex();otherIndex=otherTransition.transitionToIndex(); continue outer;continueouter; }} }} }} return false;returnfalse; }} }}  private boolean hasAtLeastTheSameExclusionsAs(AccessPath<T> accPath) {privatebooleanhasAtLeastTheSameExclusionsAs(AccessPath<T>accPath){ if(exclusions.length > accPath.exclusions.length)if(exclusions.length>accPath.exclusions.length) return false;returnfalse;  for(int i=0; i<accPath.exclusions.length; i++) {for(inti=0;i<accPath.exclusions.length;i++){ if(i<exclusions.length) {if(i<exclusions.length){ if(!accPath.exclusions[i].containsAll(exclusions[i]))if(!accPath.exclusions[i].containsAll(exclusions[i])) return false;returnfalse; }} elseelse return true;returntrue; }} return true;returntrue; }} public Collection<String> tokenize() {publicCollection<String>tokenize(){ List<String> result = Lists.newLinkedList();List<String>result=Lists.newLinkedList(); for(SubAccessPath<T> s : accesses) {for(SubAccessPath<T>s:accesses){ result.add(s.toString());result.add(s.toString()); }} for(Set<T> excl : exclusions) {for(Set<T>excl:exclusions){ result.add("^"+Joiner.on(",").join(excl));result.add("^"+Joiner.on(",").join(excl)); }} return result;returnresult; }}}}








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 2d8dee8a








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 2d8dee8a


2d8dee8a



......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}






......@@ -15,18 +15,29 @@ import heros.FlowFunctionCache;









import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;










import heros.solver.PathEdge;





















import java.io.BufferedOutputStream;










import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.FileWriter;










import java.io.IOException;










import java.util.Arrays;










import java.util.Collection;










import java.util.Collections;










import java.util.Comparator;










import java.util.Enumeration;










import java.util.HashMap;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.PriorityQueue;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;



......@@ -38,8 +49,10 @@ import com.google.common.base.Optional;









import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.Iterators;










import com.google.common.collect.Lists;










import com.google.common.collect.Sets;










import com.sun.org.apache.xpath.internal.axes.IteratorPool;





















public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {














......@@ -95,7 +108,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 private LinkedList<Runnable> worklist;










 private LinkedList<PathEdgeProcessingTask> worklist;










 










 










 /**



......@@ -141,6 +154,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 public void solve() { 










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 writeDebugFile();










 }





















 /**



......@@ -200,7 +214,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 while(!worklist.isEmpty()) {










//			if(jobCounter % 100_000 == 0)










 










 PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();










 PathEdgeProcessingTask current = worklist.removeLast();










 int size = worklist.size();










 current.run();










 jobCounter++;



......@@ -212,11 +226,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));










//				}










//			}










 










 if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {










 if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {










 System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










 String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +










//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));










 }










 }














......@@ -330,6 +345,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {










 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 if(edges.size() > 100)










 System.out.println("Paused edges for method "+method+": "+edges.size());










 










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);



......@@ -603,10 +621,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 propagate(edge, relatedCallSite, true);










 }










 










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();










 private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();










 private int cacheHits = 0;










 private int cacheMerges = 0;










 private int cacheOppositePrefix = 0;










 private int cacheSourceBaseValue = 0;










 private int concretizationEdges = 0;










 private int cacheEquals = 0;










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param edge the PathEdge that should be propagated



......@@ -622,6 +644,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 final D existingVal = jumpFn.addFunction(edge);










 










 if(edge instanceof ConcretizationPathEdge) {










 concretizationEdges++;










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());



......@@ -631,39 +654,58 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {










 System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",










 cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));










 }










 










 










 if (existingVal != null) {










 cacheEquals++;










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());










 










 if(sourceBaseValueCache.containsKey(sourceValueKey)) {










 cacheSourceBaseValue++;










 }










 sourceBaseValueCache.put(sourceValueKey, edge);










 










 










 CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());










 if(cache.containsKey(key)) {










 if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {










 System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










 System.out.println(edge);










 System.out.println(icfg.getMethodOf(edge.getTarget()));










//					if(cacheHits % 10_000 == 0) {










//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));










//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));










//						System.out.println(edge);










//						System.out.println(icfg.getMethodOf(edge.getTarget()));










//						System.out.println("---");










//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//							System.out.println(cachedEdge);










//						}










//						System.out.println("---");










 }










//					}










 cacheHits++;










//					boolean opposite = false;










//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {










//						//FIXME: Actually it should be a test for suffix?!










//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {










//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










//							cacheMerges++;










//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










//							return;










//						}










//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)










 boolean opposite = false;










 for(PathEdge<N,D> cachedEdge : cache.get(key)) {










 if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {










 cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());










 cacheMerges++;










 logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);










 return;










 }










//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))










//							opposite=true;










//					}





















 }










//					if(opposite)










//						cacheOppositePrefix++;










//					else if(cache.get(key).size() > 500) {










//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");










//						System.out.println(edge.factAtTarget());










//					}










 } 










 










 cache.put(key, edge);



......@@ -676,23 +718,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 










 private static class CacheKey<N, D, BaseValue> {





















 private N target;










 private D factAtSource;










 private BaseValue baseValueAtTarget;










 private Object[] values;





















 public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {










 this.target = target;










 this.factAtSource = factAtSource;










 this.baseValueAtTarget = baseValueAtTarget;










 public CacheKey(Object...values) {










 this.values = values;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());










 result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());










 result = prime * result + ((target == null) ? 0 : target.hashCode());










 result = prime * result + Arrays.hashCode(values);










 return result;










 }














......@@ -705,20 +741,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 if (!(obj instanceof CacheKey))










 return false;










 CacheKey other = (CacheKey) obj;










 if (baseValueAtTarget == null) {










 if (other.baseValueAtTarget != null)










 return false;










 } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))










 return false;










 if (factAtSource == null) {










 if (other.factAtSource != null)










 return false;










 } else if (!factAtSource.equals(other.factAtSource))










 return false;










 if (target == null) {










 if (other.target != null)










 return false;










 } else if (!target.equals(other.target))










 if (!Arrays.equals(values, other.values))










 return false;










 return true;










 }



......@@ -826,4 +849,55 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.









 }










 





















 public void writeDebugFile() {










 try {










 FileWriter writer = new FileWriter("debug-solver-dump.json");










 writer.write("var methods= {\n\t");










 Enumeration<M> summaryEnumerable = endSummary.keys();










 










 while(summaryEnumerable.hasMoreElements()) {










 M m = summaryEnumerable.nextElement();










 writer.write("\""+m.toString()+"\"");










 writer.write(": { \n\t\tsummaries: [\n");










 for(SummaryEdge<D,N> summary : endSummary.get(m)) {










 writer.write("\t\t\t{ \n\t\t\t\tsource: ");










 writeFact(writer, summary.getSourceFact());










 writer.write(",\n\t\t\t\ttarget: ");










 writeFact(writer, summary.getTargetFact());










 writer.write("\n\t\t\t},");










 }










 writer.write("\n\t\t],");










 writer.write("\n\t\tincoming: [\n");










 Set<IncomingEdge<D, N>> incEdges = incoming.get(m);










 if(incEdges!=null)










 for(IncomingEdge<D,N> incEdge : incEdges) {










 writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");










 writeFact(writer, incEdge.getCalleeSourceFact());










 writer.write(",\n\t\t\t\tcalling_method: ");










 writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");










 writer.write("\n\t\t\t},");










 }










 










 writer.write("\n\t\t]");










 writer.write("\n\t},\n");










 }










 










 writer.write("}");










 writer.flush();










 writer.close();










 } catch (IOException e) {










 e.printStackTrace();










 }










 }





















 private void writeFact(FileWriter writer, D sourceFact) throws IOException {










 writer.write("{");










 writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");










 writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");










 writer.write("accPath: [");










 for(String s :sourceFact.getAccessPath().tokenize()) {










 writer.write("\""+s+"\",");










 }










 writer.write("]}");










 }










}


import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;importheros.alias.BiDiFieldSensitiveIFDSSolver.AbstractionWithSourceStmt;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFact;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;import heros.solver.CountingThreadPoolExecutor;importheros.solver.CountingThreadPoolExecutor;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import heros.solver.PathEdge;importheros.solver.PathEdge;import java.io.BufferedOutputStream;importjava.io.BufferedOutputStream;import java.io.FileNotFoundException;importjava.io.FileNotFoundException;import java.io.FileOutputStream;importjava.io.FileOutputStream;import java.io.FileWriter;importjava.io.FileWriter;import java.io.IOException;importjava.io.IOException;import java.util.Arrays;importjava.util.Arrays;import java.util.Collection;importjava.util.Collection;import java.util.Collections;importjava.util.Collections;import java.util.Comparator;importjava.util.Comparator;import java.util.Enumeration;importjava.util.Enumeration;import java.util.HashMap;importjava.util.HashMap;import java.util.LinkedList;importjava.util.LinkedList;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.PriorityQueue;importjava.util.PriorityQueue;import java.util.Set;importjava.util.Set;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.collect.HashMultimap;importcom.google.common.collect.HashMultimap;import com.google.common.collect.Iterators;importcom.google.common.collect.Iterators;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import com.sun.org.apache.xpath.internal.axes.IteratorPool;importcom.sun.org.apache.xpath.internal.axes.IteratorPool;public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef extends AccessPath.FieldRef<FieldRef>, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {publicclassFieldSensitiveIFDSSolver<N,BaseValue,FieldRefextendsAccessPath.FieldRef<FieldRef>,DextendsFieldSensitiveFact<BaseValue,FieldRef,D>,M,IextendsInterproceduralCFG<N,M>>{ @DontSynchronize("readOnly")@DontSynchronize("readOnly") protected final boolean followReturnsPastSeeds;protectedfinalbooleanfollowReturnsPastSeeds; private LinkedList<Runnable> worklist;privateLinkedList<RunnableRunnable>worklist; private LinkedList<PathEdgeProcessingTask> worklist;privateLinkedList<PathEdgeProcessingTaskPathEdgeProcessingTask>worklist;   /**/** public void solve() { publicvoidsolve(){ submitInitialSeeds();submitInitialSeeds(); awaitCompletionComputeValuesAndShutdown();awaitCompletionComputeValuesAndShutdown(); writeDebugFile();writeDebugFile(); }} /**/** while(!worklist.isEmpty()) {while(!worklist.isEmpty()){//			if(jobCounter % 100_000 == 0)//			if(jobCounter % 100_000 == 0)  PathEdgeProcessingTask current = (PathEdgeProcessingTask) worklist.removeLast();PathEdgeProcessingTaskcurrent=((PathEdgeProcessingTaskPathEdgeProcessingTask)) worklist.removeLast(); PathEdgeProcessingTask current = worklist.removeLast();PathEdgeProcessingTaskcurrent=worklist.removeLast(); int size = worklist.size();intsize=worklist.size(); current.run();current.run(); jobCounter++;jobCounter++;//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));//					System.out.println(String.format("%-50.50s -> %-100.100s @stmt: %s", edge.factAtSource(), edge.factAtTarget(), edge.getTarget()));//				}//				}//			}//			}  if(worklist.size() > size + 100 || jobCounter%100_000 == 0) {if(worklist.size()>size+100||jobCounter%100_000==0){ if(worklist.size() > size + 100 || jobCounter%10_000 == 0) {if(worklist.size()>size+100||jobCounter%10_000==0){ System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ",size,worklist.size(),jobCounter)+ String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s",method,current.edge.factAtSource(),current.edge.factAtTarget(),current.edge.getTarget())); }}//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +//			System.err.println(String.format("worklist: %,6d -> %,6d, processed: %,8d ", size, worklist.size(), jobCounter) +//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget()));//					String.format("%-100.100s: %-50.50s -> %-100.100s @stmt: %s", method, current.edge.factAtSource(), current.edge.factAtTarget(), current.edge.getTarget())); }} }} private void registerInterestedCaller(M method, IncomingEdge<D, N> incomingEdge) {privatevoidregisterInterestedCaller(Mmethod,IncomingEdge<D,N>incomingEdge){ Set<PathEdge<N, D>> edges = pausedEdges.get(method);Set<PathEdge<N,D>>edges=pausedEdges.get(method); if(edges != null) {if(edges!=null){ if(edges.size() > 100)if(edges.size()>100) System.out.println("Paused edges for method "+method+": "+edges.size());System.out.println("Paused edges for method "+method+": "+edges.size());  for(final PathEdge<N, D> edge : edges) {for(finalPathEdge<N,D>edge:edges){ if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(),edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}",edge,incomingEdge); propagate(edge, relatedCallSite, true);propagate(edge,relatedCallSite,true); }}  private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> sourceBaseValueCache = HashMultimap.create();privateHashMultimap<CacheKey<N,D,BaseValue>,PathEdge<N,D>>sourceBaseValueCache=HashMultimap.create(); private HashMultimap<CacheKey<N,D,BaseValue>, PathEdge<N,D>> cache = HashMultimap.create();privateHashMultimap<CacheKey<N,D,BaseValue>,PathEdge<N,D>>cache=HashMultimap.create(); private int cacheHits = 0;privateintcacheHits=0; private int cacheMerges = 0;privateintcacheMerges=0; private int cacheOppositePrefix = 0;privateintcacheOppositePrefix=0; private int cacheSourceBaseValue = 0;privateintcacheSourceBaseValue=0; private int concretizationEdges = 0;privateintconcretizationEdges=0; private int cacheEquals = 0;privateintcacheEquals=0; /**/**	 * Propagates the flow further down the exploded super graph. 	 * Propagates the flow further down the exploded super graph. 	 * @param edge the PathEdge that should be propagated	 * @param edge the PathEdge that should be propagated final D existingVal = jumpFn.addFunction(edge);finalDexistingVal=jumpFn.addFunction(edge);  if(edge instanceof ConcretizationPathEdge) {if(edgeinstanceofConcretizationPathEdge){ concretizationEdges++;concretizationEdges++; ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;ConcretizationPathEdge<M,N,D>concEdge=(ConcretizationPathEdge<M,N,D>)edge; IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), IncomingEdge<D,N>incomingEdge=newIncomingEdge<D,N>(concEdge.getCalleeSourceFact(), concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());concEdge.getTarget(),concEdge.factAtSource(),concEdge.factAtTarget()); resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());resumeEdges(concEdge.getCalleeMethod(),concEdge.getCalleeSourceFact()); registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);registerInterestedCaller(concEdge.getCalleeMethod(),incomingEdge); } else {}else{ //TODO: Merge d.* and d.*\{x} as d.*//TODO: Merge d.* and d.*\{x} as d.* if(cacheSourceBaseValue % 10_000 == 0 || cacheEquals % 100_000 == 0) {if(cacheSourceBaseValue%10_000==0||cacheEquals%100_000==0){ System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d",System.out.println(String.format("cache hits: %,8d, cache hits on SourceBaseValue: %,8d, equals: %,8d, merges: %,8d, opposite: %,8d, concretizationEdges: %,8d", cacheHits, cacheSourceBaseValue, cacheEquals, cacheMerges, cacheOppositePrefix, concretizationEdges));cacheHits,cacheSourceBaseValue,cacheEquals,cacheMerges,cacheOppositePrefix,concretizationEdges)); }}   if (existingVal != null) {if(existingVal!=null){ cacheEquals++;cacheEquals++; if (existingVal != edge.factAtTarget())if(existingVal!=edge.factAtTarget()) existingVal.addNeighbor(edge.factAtTarget());existingVal.addNeighbor(edge.factAtTarget()); }} else {else{ CacheKey<N,D,BaseValue> sourceValueKey = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource().getBaseValue(), edge.factAtTarget().getBaseValue());CacheKey<N,D,BaseValue>sourceValueKey=newCacheKey<N,D,BaseValue>(edge.getTarget(),edge.factAtSource().getBaseValue(),edge.factAtTarget().getBaseValue());  if(sourceBaseValueCache.containsKey(sourceValueKey)) {if(sourceBaseValueCache.containsKey(sourceValueKey)){ cacheSourceBaseValue++;cacheSourceBaseValue++; }} sourceBaseValueCache.put(sourceValueKey, edge);sourceBaseValueCache.put(sourceValueKey,edge);   CacheKey<N,D,BaseValue> key = new CacheKey<N,D,BaseValue>(edge.getTarget(), edge.factAtSource(), edge.factAtTarget().getBaseValue());CacheKey<N,D,BaseValue>key=newCacheKey<N,D,BaseValue>(edge.getTarget(),edge.factAtSource(),edge.factAtTarget().getBaseValue()); if(cache.containsKey(key)) {if(cache.containsKey(key)){ if(/*cacheHits % 10_000 == 0 ||*/ cache.get(key).size() > 1000) {if(/*cacheHits % 10_000 == 0 ||*/cache.get(key).size()>1000){ System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d",cacheHits,cache.get(key).size())); System.out.println(edge);System.out.println(edge); System.out.println(icfg.getMethodOf(edge.getTarget()));System.out.println(icfg.getMethodOf(edge.getTarget()));//					if(cacheHits % 10_000 == 0) {//					if(cacheHits % 10_000 == 0) {//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));//						System.out.println(String.format("cache hits: %,8d, merges: %,8d, opposite: %,8d", cacheHits, cacheMerges, cacheOppositePrefix));//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));//						System.out.println(String.format("Cache hits: %,8d, Edges at position: %,8d", cacheHits, cache.get(key).size()));//						System.out.println(edge);//						System.out.println(edge);//						System.out.println(icfg.getMethodOf(edge.getTarget()));//						System.out.println(icfg.getMethodOf(edge.getTarget()));//						System.out.println("---");//						System.out.println("---");//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {//						for(PathEdge<N,D> cachedEdge : cache.get(key)) {//							System.out.println(cachedEdge);//							System.out.println(cachedEdge);//						}//						}//						System.out.println("---");//						System.out.println("---"); }}//					}//					}// cacheHits++;cacheHits++;//					boolean opposite = false;//					boolean opposite = false;//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {//					for(PathEdge<N,D> cachedEdge : cache.get(key)) {//						//FIXME: Actually it should be a test for suffix?!//						//FIXME: Actually it should be a test for suffix?!//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {//						if(AccessPathUtil.isPrefixOf(cachedEdge.factAtTarget(), edge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) {//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());//							cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());//							cacheMerges++;//							cacheMerges++;//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);//							logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);//							return;//							return;//						}//						}//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX)//						else if(AccessPathUtil.isPrefixOf(edge.factAtTarget(), cachedEdge.factAtTarget()) == PrefixTestResult.GUARANTEED_PREFIX) boolean opposite = false;booleanopposite=false; for(PathEdge<N,D> cachedEdge : cache.get(key)) {for(PathEdge<N,D>cachedEdge:cache.get(key)){ if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())) {if(cachedEdge.factAtTarget().getAccessPath().subsumes(edge.factAtTarget().getAccessPath())){ cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget());cachedEdge.factAtTarget().addNeighbor(edge.factAtTarget()); cacheMerges++;cacheMerges++; logger.trace("MERGE: {} with previous edge {}", edge, cachedEdge);logger.trace("MERGE: {} with previous edge {}",edge,cachedEdge); return;return; }}//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))//						else if(edge.factAtTarget().getAccessPath().subsumes(cachedEdge.factAtTarget().getAccessPath()))//							opposite=true;//							opposite=true;//					}//					} }}//					if(opposite)//					if(opposite)//						cacheOppositePrefix++;//						cacheOppositePrefix++;//					else if(cache.get(key).size() > 500) {//					else if(cache.get(key).size() > 500) {//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");//						System.out.println("had to check "+cache.get(key).size()+" items to find out there is no subsumption relation");//						System.out.println(edge.factAtTarget());//						System.out.println(edge.factAtTarget());//					}//					} } }  cache.put(key, edge);cache.put(key,edge);  private static class CacheKey<N, D, BaseValue> {privatestaticclassCacheKey<N,D,BaseValue>{ private N target;privateNtarget; private D factAtSource;privateDfactAtSource; private BaseValue baseValueAtTarget;privateBaseValuebaseValueAtTarget; private Object[] values;privateObject[]values; public CacheKey(N target, D factAtSource, BaseValue baseValueAtTarget) {publicCacheKey(Ntarget,DfactAtSource,BaseValuebaseValueAtTarget){ this.target = target;this.target=target; this.factAtSource = factAtSource;this.factAtSource=factAtSource; this.baseValueAtTarget = baseValueAtTarget;this.baseValueAtTarget=baseValueAtTarget; public CacheKey(Object...values) {publicCacheKey(Object...values){ this.values = values;this.values=values; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((baseValueAtTarget == null) ? 0 : baseValueAtTarget.hashCode());result=prime*result+((baseValueAtTarget==null)?0:baseValueAtTarget.hashCode()); result = prime * result + ((factAtSource == null) ? 0 : factAtSource.hashCode());result=prime*result+((factAtSource==null)?0:factAtSource.hashCode()); result = prime * result + ((target == null) ? 0 : target.hashCode());result=prime*result+((target==null)?0:target.hashCode()); result = prime * result + Arrays.hashCode(values);result=prime*result+Arrays.hashCode(values); return result;returnresult; }} if (!(obj instanceof CacheKey))if(!(objinstanceofCacheKey)) return false;returnfalse; CacheKey other = (CacheKey) obj;CacheKeyother=(CacheKey)obj; if (baseValueAtTarget == null) {if(baseValueAtTarget==null){ if (other.baseValueAtTarget != null)if(other.baseValueAtTarget!=null) return false;returnfalse; } else if (!baseValueAtTarget.equals(other.baseValueAtTarget))}elseif(!baseValueAtTarget.equals(other.baseValueAtTarget)) return false;returnfalse; if (factAtSource == null) {if(factAtSource==null){ if (other.factAtSource != null)if(other.factAtSource!=null) return false;returnfalse; } else if (!factAtSource.equals(other.factAtSource))}elseif(!factAtSource.equals(other.factAtSource)) return false;returnfalse; if (target == null) {if(target==null){ if (other.target != null)if(other.target!=null) return false;returnfalse; } else if (!target.equals(other.target))}elseif(!target.equals(other.target)) if (!Arrays.equals(values, other.values))if(!Arrays.equals(values,other.values)) return false;returnfalse; return true;returntrue; }} }}  public void writeDebugFile() {publicvoidwriteDebugFile(){ try {try{ FileWriter writer = new FileWriter("debug-solver-dump.json");FileWriterwriter=newFileWriter("debug-solver-dump.json"); writer.write("var methods= {\n\t");writer.write("var methods= {\n\t"); Enumeration<M> summaryEnumerable = endSummary.keys();Enumeration<M>summaryEnumerable=endSummary.keys();  while(summaryEnumerable.hasMoreElements()) {while(summaryEnumerable.hasMoreElements()){ M m = summaryEnumerable.nextElement();Mm=summaryEnumerable.nextElement(); writer.write("\""+m.toString()+"\"");writer.write("\""+m.toString()+"\""); writer.write(": { \n\t\tsummaries: [\n");writer.write(": { \n\t\tsummaries: [\n"); for(SummaryEdge<D,N> summary : endSummary.get(m)) {for(SummaryEdge<D,N>summary:endSummary.get(m)){ writer.write("\t\t\t{ \n\t\t\t\tsource: ");writer.write("\t\t\t{ \n\t\t\t\tsource: "); writeFact(writer, summary.getSourceFact());writeFact(writer,summary.getSourceFact()); writer.write(",\n\t\t\t\ttarget: ");writer.write(",\n\t\t\t\ttarget: "); writeFact(writer, summary.getTargetFact());writeFact(writer,summary.getTargetFact()); writer.write("\n\t\t\t},");writer.write("\n\t\t\t},"); }} writer.write("\n\t\t],");writer.write("\n\t\t],"); writer.write("\n\t\tincoming: [\n");writer.write("\n\t\tincoming: [\n"); Set<IncomingEdge<D, N>> incEdges = incoming.get(m);Set<IncomingEdge<D,N>>incEdges=incoming.get(m); if(incEdges!=null)if(incEdges!=null) for(IncomingEdge<D,N> incEdge : incEdges) {for(IncomingEdge<D,N>incEdge:incEdges){ writer.write("\t\t\t{ \n\t\t\t\tcallee_source: ");writer.write("\t\t\t{ \n\t\t\t\tcallee_source: "); writeFact(writer, incEdge.getCalleeSourceFact());writeFact(writer,incEdge.getCalleeSourceFact()); writer.write(",\n\t\t\t\tcalling_method: ");writer.write(",\n\t\t\t\tcalling_method: "); writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\"");writer.write("\""+icfg.getMethodOf(incEdge.getCallSite())+"\""); writer.write("\n\t\t\t},");writer.write("\n\t\t\t},"); }}  writer.write("\n\t\t]");writer.write("\n\t\t]"); writer.write("\n\t},\n");writer.write("\n\t},\n"); }}  writer.write("}");writer.write("}"); writer.flush();writer.flush(); writer.close();writer.close(); } catch (IOException e) {}catch(IOExceptione){ e.printStackTrace();e.printStackTrace(); }} }} private void writeFact(FileWriter writer, D sourceFact) throws IOException {privatevoidwriteFact(FileWriterwriter,DsourceFact)throwsIOException{ writer.write("{");writer.write("{"); writer.write("type: \""+((AbstractionWithSourceStmt) sourceFact).getAbstraction().getClass().getSimpleName()+"\", ");writer.write("type: \""+((AbstractionWithSourceStmt)sourceFact).getAbstraction().getClass().getSimpleName()+"\", "); writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", ");writer.write("baseValue: \""+sourceFact.getBaseValue()+"\", "); writer.write("accPath: [");writer.write("accPath: ["); for(String s :sourceFact.getAccessPath().tokenize()) {for(Strings:sourceFact.getAccessPath().tokenize()){ writer.write("\""+s+"\",");writer.write("\""+s+"\","); }} writer.write("]}");writer.write("]}"); }}}}








test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}












test/heros/alias/AccessPathTest.java








View file @ 2d8dee8a








test/heros/alias/AccessPathTest.java










View file @ 2d8dee8a


2d8dee8a



......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}






......@@ -237,4 +237,25 @@ public class AccessPathTest {









 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));










 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));










 }





















 @Test










 public void subsumes() {










 assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));










 assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));










 assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));










 










 assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));










 assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));










 }





















 @Test










 public void subsumesWithExclusions() {










 assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));










 assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));










 










 assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));










 assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));










 }










}


 assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f"),s("h")).isPrefixOf(ap(s("f"),s("h")))); assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"),s("h")))); }} @Test@Test public void subsumes() {publicvoidsubsumes(){ assertTrue(ap(anyOf("f")).subsumes(ap(s("f"))));assertTrue(ap(anyOf("f")).subsumes(ap(s("f")))); assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));assertFalse(ap(s("f")).subsumes(ap(anyOf("f"))));  assertTrue(ap(anyOf("f", "g")).subsumes(ap(s("f"), s("g"))));assertTrue(ap(anyOf("f","g")).subsumes(ap(s("f"),s("g")))); assertFalse(ap(s("f"), s("g")).subsumes(ap(anyOf("f", "g"))));assertFalse(ap(s("f"),s("g")).subsumes(ap(anyOf("f","g"))));  assertTrue(ap(anyOf("f", "g")).subsumes(ap(anyOf("f"), anyOf("g"))));assertTrue(ap(anyOf("f","g")).subsumes(ap(anyOf("f"),anyOf("g")))); assertFalse(ap(anyOf("f"), anyOf("g")).subsumes(ap(anyOf("f", "g"))));assertFalse(ap(anyOf("f"),anyOf("g")).subsumes(ap(anyOf("f","g")))); }} @Test@Test public void subsumesWithExclusions() {publicvoidsubsumesWithExclusions(){ assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a"))));assertTrue(ap().subsumes(ap().appendExcludedFieldReference(f("a")))); assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));assertFalse(ap().appendExcludedFieldReference(f("a")).subsumes(ap()));  assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a", "b"))));assertTrue(ap().appendExcludedFieldReference(f("a")).subsumes(ap().appendExcludedFieldReference(f("a","b")))); assertFalse(ap().appendExcludedFieldReference(f("a", "b")).subsumes(ap().appendExcludedFieldReference(f("a"))));assertFalse(ap().appendExcludedFieldReference(f("a","b")).subsumes(ap().appendExcludedFieldReference(f("a")))); }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






