



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell

a1c71aea3e2587b79f5e386463b1b175e3280d97

















a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag










haskell


tabular


Tabular.hs



Find file
Normal viewHistoryPermalink






Tabular.hs



4.5 KB









Newer










Older









update



Â 


darlliu
committed
Feb 26, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




--Implementation of R like table object with IO to .tsv in Haskell

import Data.CSV.Conduit
import Data.ByteString.Char8 (ByteString, unpack, pack)
import qualified Data.Vector as V
import Control.Monad
import Control.Exception as E
import Data.List
type Text = ByteString -- Change this to change the underlying datatype
type Tabular = V.Vector(V.Vector Text)
type TabularRow = V.Vector Text

-- File Accessor
fromFileWith' sep quote fp= do
    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}
    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )
    return (Just ( V.map V.fromList csvData))

fromFileWith sep quote fp = E.catch
    (fromFileWith' sep quote fp)
    (\e -> do 
     let err = show (e::IOException)
     putStrLn $ "Unexpected Error at opening file: "++ (show err)
     return Nothing
    )

fromFile = fromFileWith '\t' Nothing

-- Row accessor, get Nothing in case of error

header' t = t V.! 0
header t = if V.length t > 0 
    then Just (t V.! 0)
    else Nothing

(#!) :: Tabular -> Int -> Maybe TabularRow
t #! i = if i<0 || i> V.length t 
    then Nothing
    else Just (t V.! (i+1))
     --compensate for the header which we assume always is there
(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow
t # i = t >>= (#! i)

-- Column accessor, would like it to get nothing in case of error

(%!) :: Tabular -> Int ->Maybe TabularRow
t %! i = if i < 0 || i > (V.length $ t V.! 0 ) 
    then Nothing
    else let vv = V.map (\x -> (x::TabularRow) V.! i) t in
        if V.length vv > 1 
            then Just (V.tail vv)
            else Nothing

(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow
t % i = t >>= (%! i)


(%%!):: Tabular -> String -> Maybe TabularRow
t %%! s = let hd = header t in case hd of
         Nothing -> Nothing 
         Just h -> let key = (pack s) `V.elemIndex` h in case key of
            Nothing -> Nothing
            Just idx -> t %! idx

(%%):: Maybe(Tabular) -> String -> Maybe TabularRow
t %% s = t >>= (%%! s)

--type coercer, would like it to crash in case of error

toFloat :: TabularRow ->(V.Vector Float)
toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xs
toFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)
toFloatM = fmap toFloat

toString :: TabularRow ->(V.Vector String)
toString xs = V.map (\x -> unpack x) xs
toStringM :: Maybe TabularRow -> Maybe (V.Vector String)
toStringM = fmap toString

toBool :: TabularRow ->(V.Vector Bool)
toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xs
toBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)
toBoolM = fmap toBool

--modifiers 

setRow' :: Int -> TabularRow -> Tabular ->  Maybe Tabular
setRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])
setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe Tabular
setRow _ Nothing _ = Nothing
setRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])

setCol' :: Int -> TabularRow -> Tabular -> Maybe Tabular
setCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) where
                n = header' t V.! i
setCol :: Int ->Maybe TabularRow -> Tabular -> Maybe Tabular
setCol _ Nothing _= Nothing
setCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) where
                n = header' t V.! i

setColN' :: String -> TabularRow -> Tabular -> Maybe Tabular
setColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

setColN :: String ->Maybe TabularRow -> Tabular -> Maybe Tabular
setColN _ Nothing _= Nothing
setColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

--use >>= to modify

--populators
--addRow < 
--addCol (Name separate) <<

main = do
    t <- fromFile "./txts/test_csv.txt"
    let r = t # 0
    let c = t % 0
    let cc = t %% "KEGG"
    putStrLn $ show r 
    putStrLn $ show c
    putStrLn $ show cc
    let tt = t >>= (setRow 3 r)
    putStrLn $ show $ tt#3 
    let ttt = t >>= (setColN "KEGG" c)
    putStrLn $ show $ ttt%%"KEGG"
    return ()












H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell

a1c71aea3e2587b79f5e386463b1b175e3280d97

















a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag










haskell


tabular


Tabular.hs



Find file
Normal viewHistoryPermalink






Tabular.hs



4.5 KB









Newer










Older









update



Â 


darlliu
committed
Feb 26, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




--Implementation of R like table object with IO to .tsv in Haskell

import Data.CSV.Conduit
import Data.ByteString.Char8 (ByteString, unpack, pack)
import qualified Data.Vector as V
import Control.Monad
import Control.Exception as E
import Data.List
type Text = ByteString -- Change this to change the underlying datatype
type Tabular = V.Vector(V.Vector Text)
type TabularRow = V.Vector Text

-- File Accessor
fromFileWith' sep quote fp= do
    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}
    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )
    return (Just ( V.map V.fromList csvData))

fromFileWith sep quote fp = E.catch
    (fromFileWith' sep quote fp)
    (\e -> do 
     let err = show (e::IOException)
     putStrLn $ "Unexpected Error at opening file: "++ (show err)
     return Nothing
    )

fromFile = fromFileWith '\t' Nothing

-- Row accessor, get Nothing in case of error

header' t = t V.! 0
header t = if V.length t > 0 
    then Just (t V.! 0)
    else Nothing

(#!) :: Tabular -> Int -> Maybe TabularRow
t #! i = if i<0 || i> V.length t 
    then Nothing
    else Just (t V.! (i+1))
     --compensate for the header which we assume always is there
(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow
t # i = t >>= (#! i)

-- Column accessor, would like it to get nothing in case of error

(%!) :: Tabular -> Int ->Maybe TabularRow
t %! i = if i < 0 || i > (V.length $ t V.! 0 ) 
    then Nothing
    else let vv = V.map (\x -> (x::TabularRow) V.! i) t in
        if V.length vv > 1 
            then Just (V.tail vv)
            else Nothing

(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow
t % i = t >>= (%! i)


(%%!):: Tabular -> String -> Maybe TabularRow
t %%! s = let hd = header t in case hd of
         Nothing -> Nothing 
         Just h -> let key = (pack s) `V.elemIndex` h in case key of
            Nothing -> Nothing
            Just idx -> t %! idx

(%%):: Maybe(Tabular) -> String -> Maybe TabularRow
t %% s = t >>= (%%! s)

--type coercer, would like it to crash in case of error

toFloat :: TabularRow ->(V.Vector Float)
toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xs
toFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)
toFloatM = fmap toFloat

toString :: TabularRow ->(V.Vector String)
toString xs = V.map (\x -> unpack x) xs
toStringM :: Maybe TabularRow -> Maybe (V.Vector String)
toStringM = fmap toString

toBool :: TabularRow ->(V.Vector Bool)
toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xs
toBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)
toBoolM = fmap toBool

--modifiers 

setRow' :: Int -> TabularRow -> Tabular ->  Maybe Tabular
setRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])
setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe Tabular
setRow _ Nothing _ = Nothing
setRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])

setCol' :: Int -> TabularRow -> Tabular -> Maybe Tabular
setCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) where
                n = header' t V.! i
setCol :: Int ->Maybe TabularRow -> Tabular -> Maybe Tabular
setCol _ Nothing _= Nothing
setCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) where
                n = header' t V.! i

setColN' :: String -> TabularRow -> Tabular -> Maybe Tabular
setColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

setColN :: String ->Maybe TabularRow -> Tabular -> Maybe Tabular
setColN _ Nothing _= Nothing
setColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

--use >>= to modify

--populators
--addRow < 
--addCol (Name separate) <<

main = do
    t <- fromFile "./txts/test_csv.txt"
    let r = t # 0
    let c = t % 0
    let cc = t %% "KEGG"
    putStrLn $ show r 
    putStrLn $ show c
    putStrLn $ show cc
    let tt = t >>= (setRow 3 r)
    putStrLn $ show $ tt#3 
    let ttt = t >>= (setColN "KEGG" c)
    putStrLn $ show $ ttt%%"KEGG"
    return ()











Open sidebar



Yu Liu haskell

a1c71aea3e2587b79f5e386463b1b175e3280d97







Open sidebar



Yu Liu haskell

a1c71aea3e2587b79f5e386463b1b175e3280d97




Open sidebar

Yu Liu haskell

a1c71aea3e2587b79f5e386463b1b175e3280d97


Yu Liuhaskellhaskell
a1c71aea3e2587b79f5e386463b1b175e3280d97










a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag










haskell


tabular


Tabular.hs



Find file
Normal viewHistoryPermalink






Tabular.hs



4.5 KB









Newer










Older









update



Â 


darlliu
committed
Feb 26, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




--Implementation of R like table object with IO to .tsv in Haskell

import Data.CSV.Conduit
import Data.ByteString.Char8 (ByteString, unpack, pack)
import qualified Data.Vector as V
import Control.Monad
import Control.Exception as E
import Data.List
type Text = ByteString -- Change this to change the underlying datatype
type Tabular = V.Vector(V.Vector Text)
type TabularRow = V.Vector Text

-- File Accessor
fromFileWith' sep quote fp= do
    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}
    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )
    return (Just ( V.map V.fromList csvData))

fromFileWith sep quote fp = E.catch
    (fromFileWith' sep quote fp)
    (\e -> do 
     let err = show (e::IOException)
     putStrLn $ "Unexpected Error at opening file: "++ (show err)
     return Nothing
    )

fromFile = fromFileWith '\t' Nothing

-- Row accessor, get Nothing in case of error

header' t = t V.! 0
header t = if V.length t > 0 
    then Just (t V.! 0)
    else Nothing

(#!) :: Tabular -> Int -> Maybe TabularRow
t #! i = if i<0 || i> V.length t 
    then Nothing
    else Just (t V.! (i+1))
     --compensate for the header which we assume always is there
(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow
t # i = t >>= (#! i)

-- Column accessor, would like it to get nothing in case of error

(%!) :: Tabular -> Int ->Maybe TabularRow
t %! i = if i < 0 || i > (V.length $ t V.! 0 ) 
    then Nothing
    else let vv = V.map (\x -> (x::TabularRow) V.! i) t in
        if V.length vv > 1 
            then Just (V.tail vv)
            else Nothing

(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow
t % i = t >>= (%! i)


(%%!):: Tabular -> String -> Maybe TabularRow
t %%! s = let hd = header t in case hd of
         Nothing -> Nothing 
         Just h -> let key = (pack s) `V.elemIndex` h in case key of
            Nothing -> Nothing
            Just idx -> t %! idx

(%%):: Maybe(Tabular) -> String -> Maybe TabularRow
t %% s = t >>= (%%! s)

--type coercer, would like it to crash in case of error

toFloat :: TabularRow ->(V.Vector Float)
toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xs
toFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)
toFloatM = fmap toFloat

toString :: TabularRow ->(V.Vector String)
toString xs = V.map (\x -> unpack x) xs
toStringM :: Maybe TabularRow -> Maybe (V.Vector String)
toStringM = fmap toString

toBool :: TabularRow ->(V.Vector Bool)
toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xs
toBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)
toBoolM = fmap toBool

--modifiers 

setRow' :: Int -> TabularRow -> Tabular ->  Maybe Tabular
setRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])
setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe Tabular
setRow _ Nothing _ = Nothing
setRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])

setCol' :: Int -> TabularRow -> Tabular -> Maybe Tabular
setCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) where
                n = header' t V.! i
setCol :: Int ->Maybe TabularRow -> Tabular -> Maybe Tabular
setCol _ Nothing _= Nothing
setCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) where
                n = header' t V.! i

setColN' :: String -> TabularRow -> Tabular -> Maybe Tabular
setColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

setColN :: String ->Maybe TabularRow -> Tabular -> Maybe Tabular
setColN _ Nothing _= Nothing
setColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

--use >>= to modify

--populators
--addRow < 
--addCol (Name separate) <<

main = do
    t <- fromFile "./txts/test_csv.txt"
    let r = t # 0
    let c = t % 0
    let cc = t %% "KEGG"
    putStrLn $ show r 
    putStrLn $ show c
    putStrLn $ show cc
    let tt = t >>= (setRow 3 r)
    putStrLn $ show $ tt#3 
    let ttt = t >>= (setColN "KEGG" c)
    putStrLn $ show $ ttt%%"KEGG"
    return ()














a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag










haskell


tabular


Tabular.hs



Find file
Normal viewHistoryPermalink






Tabular.hs



4.5 KB









Newer










Older









update



Â 


darlliu
committed
Feb 26, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




--Implementation of R like table object with IO to .tsv in Haskell

import Data.CSV.Conduit
import Data.ByteString.Char8 (ByteString, unpack, pack)
import qualified Data.Vector as V
import Control.Monad
import Control.Exception as E
import Data.List
type Text = ByteString -- Change this to change the underlying datatype
type Tabular = V.Vector(V.Vector Text)
type TabularRow = V.Vector Text

-- File Accessor
fromFileWith' sep quote fp= do
    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}
    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )
    return (Just ( V.map V.fromList csvData))

fromFileWith sep quote fp = E.catch
    (fromFileWith' sep quote fp)
    (\e -> do 
     let err = show (e::IOException)
     putStrLn $ "Unexpected Error at opening file: "++ (show err)
     return Nothing
    )

fromFile = fromFileWith '\t' Nothing

-- Row accessor, get Nothing in case of error

header' t = t V.! 0
header t = if V.length t > 0 
    then Just (t V.! 0)
    else Nothing

(#!) :: Tabular -> Int -> Maybe TabularRow
t #! i = if i<0 || i> V.length t 
    then Nothing
    else Just (t V.! (i+1))
     --compensate for the header which we assume always is there
(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow
t # i = t >>= (#! i)

-- Column accessor, would like it to get nothing in case of error

(%!) :: Tabular -> Int ->Maybe TabularRow
t %! i = if i < 0 || i > (V.length $ t V.! 0 ) 
    then Nothing
    else let vv = V.map (\x -> (x::TabularRow) V.! i) t in
        if V.length vv > 1 
            then Just (V.tail vv)
            else Nothing

(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow
t % i = t >>= (%! i)


(%%!):: Tabular -> String -> Maybe TabularRow
t %%! s = let hd = header t in case hd of
         Nothing -> Nothing 
         Just h -> let key = (pack s) `V.elemIndex` h in case key of
            Nothing -> Nothing
            Just idx -> t %! idx

(%%):: Maybe(Tabular) -> String -> Maybe TabularRow
t %% s = t >>= (%%! s)

--type coercer, would like it to crash in case of error

toFloat :: TabularRow ->(V.Vector Float)
toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xs
toFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)
toFloatM = fmap toFloat

toString :: TabularRow ->(V.Vector String)
toString xs = V.map (\x -> unpack x) xs
toStringM :: Maybe TabularRow -> Maybe (V.Vector String)
toStringM = fmap toString

toBool :: TabularRow ->(V.Vector Bool)
toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xs
toBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)
toBoolM = fmap toBool

--modifiers 

setRow' :: Int -> TabularRow -> Tabular ->  Maybe Tabular
setRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])
setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe Tabular
setRow _ Nothing _ = Nothing
setRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])

setCol' :: Int -> TabularRow -> Tabular -> Maybe Tabular
setCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) where
                n = header' t V.! i
setCol :: Int ->Maybe TabularRow -> Tabular -> Maybe Tabular
setCol _ Nothing _= Nothing
setCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) where
                n = header' t V.! i

setColN' :: String -> TabularRow -> Tabular -> Maybe Tabular
setColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

setColN :: String ->Maybe TabularRow -> Tabular -> Maybe Tabular
setColN _ Nothing _= Nothing
setColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

--use >>= to modify

--populators
--addRow < 
--addCol (Name separate) <<

main = do
    t <- fromFile "./txts/test_csv.txt"
    let r = t # 0
    let c = t % 0
    let cc = t %% "KEGG"
    putStrLn $ show r 
    putStrLn $ show c
    putStrLn $ show cc
    let tt = t >>= (setRow 3 r)
    putStrLn $ show $ tt#3 
    let ttt = t >>= (setColN "KEGG" c)
    putStrLn $ show $ ttt%%"KEGG"
    return ()










a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag










haskell


tabular


Tabular.hs



Find file
Normal viewHistoryPermalink




a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag










haskell


tabular


Tabular.hs





a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag








a1c71aea3e2587b79f5e386463b1b175e3280d97


Switch branch/tag





a1c71aea3e2587b79f5e386463b1b175e3280d97

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
haskell

tabular

Tabular.hs
Find file
Normal viewHistoryPermalink




Tabular.hs



4.5 KB









Newer










Older









update



Â 


darlliu
committed
Feb 26, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




--Implementation of R like table object with IO to .tsv in Haskell

import Data.CSV.Conduit
import Data.ByteString.Char8 (ByteString, unpack, pack)
import qualified Data.Vector as V
import Control.Monad
import Control.Exception as E
import Data.List
type Text = ByteString -- Change this to change the underlying datatype
type Tabular = V.Vector(V.Vector Text)
type TabularRow = V.Vector Text

-- File Accessor
fromFileWith' sep quote fp= do
    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}
    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )
    return (Just ( V.map V.fromList csvData))

fromFileWith sep quote fp = E.catch
    (fromFileWith' sep quote fp)
    (\e -> do 
     let err = show (e::IOException)
     putStrLn $ "Unexpected Error at opening file: "++ (show err)
     return Nothing
    )

fromFile = fromFileWith '\t' Nothing

-- Row accessor, get Nothing in case of error

header' t = t V.! 0
header t = if V.length t > 0 
    then Just (t V.! 0)
    else Nothing

(#!) :: Tabular -> Int -> Maybe TabularRow
t #! i = if i<0 || i> V.length t 
    then Nothing
    else Just (t V.! (i+1))
     --compensate for the header which we assume always is there
(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow
t # i = t >>= (#! i)

-- Column accessor, would like it to get nothing in case of error

(%!) :: Tabular -> Int ->Maybe TabularRow
t %! i = if i < 0 || i > (V.length $ t V.! 0 ) 
    then Nothing
    else let vv = V.map (\x -> (x::TabularRow) V.! i) t in
        if V.length vv > 1 
            then Just (V.tail vv)
            else Nothing

(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow
t % i = t >>= (%! i)


(%%!):: Tabular -> String -> Maybe TabularRow
t %%! s = let hd = header t in case hd of
         Nothing -> Nothing 
         Just h -> let key = (pack s) `V.elemIndex` h in case key of
            Nothing -> Nothing
            Just idx -> t %! idx

(%%):: Maybe(Tabular) -> String -> Maybe TabularRow
t %% s = t >>= (%%! s)

--type coercer, would like it to crash in case of error

toFloat :: TabularRow ->(V.Vector Float)
toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xs
toFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)
toFloatM = fmap toFloat

toString :: TabularRow ->(V.Vector String)
toString xs = V.map (\x -> unpack x) xs
toStringM :: Maybe TabularRow -> Maybe (V.Vector String)
toStringM = fmap toString

toBool :: TabularRow ->(V.Vector Bool)
toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xs
toBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)
toBoolM = fmap toBool

--modifiers 

setRow' :: Int -> TabularRow -> Tabular ->  Maybe Tabular
setRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])
setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe Tabular
setRow _ Nothing _ = Nothing
setRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])

setCol' :: Int -> TabularRow -> Tabular -> Maybe Tabular
setCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) where
                n = header' t V.! i
setCol :: Int ->Maybe TabularRow -> Tabular -> Maybe Tabular
setCol _ Nothing _= Nothing
setCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) where
                n = header' t V.! i

setColN' :: String -> TabularRow -> Tabular -> Maybe Tabular
setColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

setColN :: String ->Maybe TabularRow -> Tabular -> Maybe Tabular
setColN _ Nothing _= Nothing
setColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

--use >>= to modify

--populators
--addRow < 
--addCol (Name separate) <<

main = do
    t <- fromFile "./txts/test_csv.txt"
    let r = t # 0
    let c = t % 0
    let cc = t %% "KEGG"
    putStrLn $ show r 
    putStrLn $ show c
    putStrLn $ show cc
    let tt = t >>= (setRow 3 r)
    putStrLn $ show $ tt#3 
    let ttt = t >>= (setColN "KEGG" c)
    putStrLn $ show $ ttt%%"KEGG"
    return ()








Tabular.hs



4.5 KB










Tabular.hs



4.5 KB









Newer










Older
NewerOlder







update



Â 


darlliu
committed
Feb 26, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




--Implementation of R like table object with IO to .tsv in Haskell

import Data.CSV.Conduit
import Data.ByteString.Char8 (ByteString, unpack, pack)
import qualified Data.Vector as V
import Control.Monad
import Control.Exception as E
import Data.List
type Text = ByteString -- Change this to change the underlying datatype
type Tabular = V.Vector(V.Vector Text)
type TabularRow = V.Vector Text

-- File Accessor
fromFileWith' sep quote fp= do
    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}
    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )
    return (Just ( V.map V.fromList csvData))

fromFileWith sep quote fp = E.catch
    (fromFileWith' sep quote fp)
    (\e -> do 
     let err = show (e::IOException)
     putStrLn $ "Unexpected Error at opening file: "++ (show err)
     return Nothing
    )

fromFile = fromFileWith '\t' Nothing

-- Row accessor, get Nothing in case of error

header' t = t V.! 0
header t = if V.length t > 0 
    then Just (t V.! 0)
    else Nothing

(#!) :: Tabular -> Int -> Maybe TabularRow
t #! i = if i<0 || i> V.length t 
    then Nothing
    else Just (t V.! (i+1))
     --compensate for the header which we assume always is there
(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow
t # i = t >>= (#! i)

-- Column accessor, would like it to get nothing in case of error

(%!) :: Tabular -> Int ->Maybe TabularRow
t %! i = if i < 0 || i > (V.length $ t V.! 0 ) 
    then Nothing
    else let vv = V.map (\x -> (x::TabularRow) V.! i) t in
        if V.length vv > 1 
            then Just (V.tail vv)
            else Nothing

(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow
t % i = t >>= (%! i)


(%%!):: Tabular -> String -> Maybe TabularRow
t %%! s = let hd = header t in case hd of
         Nothing -> Nothing 
         Just h -> let key = (pack s) `V.elemIndex` h in case key of
            Nothing -> Nothing
            Just idx -> t %! idx

(%%):: Maybe(Tabular) -> String -> Maybe TabularRow
t %% s = t >>= (%%! s)

--type coercer, would like it to crash in case of error

toFloat :: TabularRow ->(V.Vector Float)
toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xs
toFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)
toFloatM = fmap toFloat

toString :: TabularRow ->(V.Vector String)
toString xs = V.map (\x -> unpack x) xs
toStringM :: Maybe TabularRow -> Maybe (V.Vector String)
toStringM = fmap toString

toBool :: TabularRow ->(V.Vector Bool)
toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xs
toBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)
toBoolM = fmap toBool

--modifiers 

setRow' :: Int -> TabularRow -> Tabular ->  Maybe Tabular
setRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])
setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe Tabular
setRow _ Nothing _ = Nothing
setRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)
            then Nothing
            else Just (t V.// [(i + 1, r)])

setCol' :: Int -> TabularRow -> Tabular -> Maybe Tabular
setCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) where
                n = header' t V.! i
setCol :: Int ->Maybe TabularRow -> Tabular -> Maybe Tabular
setCol _ Nothing _= Nothing
setCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1
            then Nothing
            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) where
                n = header' t V.! i

setColN' :: String -> TabularRow -> Tabular -> Maybe Tabular
setColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

setColN :: String ->Maybe TabularRow -> Tabular -> Maybe Tabular
setColN _ Nothing _= Nothing
setColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of 
            Nothing -> Nothing
            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )

--use >>= to modify

--populators
--addRow < 
--addCol (Name separate) <<

main = do
    t <- fromFile "./txts/test_csv.txt"
    let r = t # 0
    let c = t % 0
    let cc = t %% "KEGG"
    putStrLn $ show r 
    putStrLn $ show c
    putStrLn $ show cc
    let tt = t >>= (setRow 3 r)
    putStrLn $ show $ tt#3 
    let ttt = t >>= (setColN "KEGG" c)
    putStrLn $ show $ ttt%%"KEGG"
    return ()







update



Â 


darlliu
committed
Feb 26, 2015



update



Â 

update


darlliu
committed
Feb 26, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

120

121

122

123

124

125

126

127

128

129

130

131

132

133

134

135

136

137

138
--Implementation of R like table object with IO to .tsv in Haskell--Implementation of R like table object with IO to .tsv in Haskellimport Data.CSV.ConduitimportData.CSV.Conduitimport Data.ByteString.Char8 (ByteString, unpack, pack)importData.ByteString.Char8(ByteString,unpack,pack)import qualified Data.Vector as VimportqualifiedData.VectorasVimport Control.MonadimportControl.Monadimport Control.Exception as EimportControl.ExceptionasEimport Data.ListimportData.Listtype Text = ByteString -- Change this to change the underlying datatypetypeText=ByteString-- Change this to change the underlying datatypetype Tabular = V.Vector(V.Vector Text)typeTabular=V.Vector(V.VectorText)type TabularRow = V.Vector TexttypeTabularRow=V.VectorText-- File Accessor-- File AccessorfromFileWith' sep quote fp= dofromFileWith'sepquotefp=do    let myOption = CSVSettings{csvSep=sep, csvQuoteChar=quote}letmyOption=CSVSettings{csvSep=sep,csvQuoteChar=quote}    csvData <- readCSVFile myOption fp :: IO ( V.Vector([Text]) )csvData<-readCSVFilemyOptionfp::IO(V.Vector([Text]))    return (Just ( V.map V.fromList csvData))return(Just(V.mapV.fromListcsvData))fromFileWith sep quote fp = E.catchfromFileWithsepquotefp=E.catch    (fromFileWith' sep quote fp)(fromFileWith'sepquotefp)    (\e -> do (\e->do     let err = show (e::IOException)leterr=show(e::IOException)     putStrLn $ "Unexpected Error at opening file: "++ (show err)putStrLn$"Unexpected Error at opening file: "++(showerr)     return NothingreturnNothing    ))fromFile = fromFileWith '\t' NothingfromFile=fromFileWith'\t'Nothing-- Row accessor, get Nothing in case of error-- Row accessor, get Nothing in case of errorheader' t = t V.! 0header't=tV.!0header t = if V.length t > 0 headert=ifV.lengtht>0    then Just (t V.! 0)thenJust(tV.!0)    else NothingelseNothing(#!) :: Tabular -> Int -> Maybe TabularRow(#!)::Tabular->Int->MaybeTabularRowt #! i = if i<0 || i> V.length t t#!i=ifi<0||i>V.lengtht    then NothingthenNothing    else Just (t V.! (i+1))elseJust(tV.!(i+1))     --compensate for the header which we assume always is there--compensate for the header which we assume always is there(#) :: (Maybe Tabular) -> Int -> Maybe TabularRow(#)::(MaybeTabular)->Int->MaybeTabularRowt # i = t >>= (#! i)t#i=t>>=(#!i)-- Column accessor, would like it to get nothing in case of error-- Column accessor, would like it to get nothing in case of error(%!) :: Tabular -> Int ->Maybe TabularRow(%!)::Tabular->Int->MaybeTabularRowt %! i = if i < 0 || i > (V.length $ t V.! 0 ) t%!i=ifi<0||i>(V.length$tV.!0)    then NothingthenNothing    else let vv = V.map (\x -> (x::TabularRow) V.! i) t inelseletvv=V.map(\x->(x::TabularRow)V.!i)tin        if V.length vv > 1 ifV.lengthvv>1            then Just (V.tail vv)thenJust(V.tailvv)            else NothingelseNothing(%) :: (Maybe Tabular) -> Int ->Maybe TabularRow(%)::(MaybeTabular)->Int->MaybeTabularRowt % i = t >>= (%! i)t%i=t>>=(%!i)(%%!):: Tabular -> String -> Maybe TabularRow(%%!)::Tabular->String->MaybeTabularRowt %%! s = let hd = header t in case hd oft%%!s=lethd=headertincasehdof         Nothing -> Nothing Nothing->Nothing         Just h -> let key = (pack s) `V.elemIndex` h in case key ofJusth->letkey=(packs)`V.elemIndex`hincasekeyof            Nothing -> NothingNothing->Nothing            Just idx -> t %! idxJustidx->t%!idx(%%):: Maybe(Tabular) -> String -> Maybe TabularRow(%%)::Maybe(Tabular)->String->MaybeTabularRowt %% s = t >>= (%%! s)t%%s=t>>=(%%!s)--type coercer, would like it to crash in case of error--type coercer, would like it to crash in case of errortoFloat :: TabularRow ->(V.Vector Float)toFloat::TabularRow->(V.VectorFloat)toFloat xs = V.map (\x -> (read $ unpack x) :: Float) xstoFloatxs=V.map(\x->(read$unpackx)::Float)xstoFloatM :: Maybe TabularRow -> Maybe (V.Vector Float)toFloatM::MaybeTabularRow->Maybe(V.VectorFloat)toFloatM = fmap toFloattoFloatM=fmaptoFloattoString :: TabularRow ->(V.Vector String)toString::TabularRow->(V.VectorString)toString xs = V.map (\x -> unpack x) xstoStringxs=V.map(\x->unpackx)xstoStringM :: Maybe TabularRow -> Maybe (V.Vector String)toStringM::MaybeTabularRow->Maybe(V.VectorString)toStringM = fmap toStringtoStringM=fmaptoStringtoBool :: TabularRow ->(V.Vector Bool)toBool::TabularRow->(V.VectorBool)toBool xs = V.map (\x -> (read $ unpack x) :: Bool) xstoBoolxs=V.map(\x->(read$unpackx)::Bool)xstoBoolM :: Maybe TabularRow -> Maybe (V.Vector Bool)toBoolM::MaybeTabularRow->Maybe(V.VectorBool)toBoolM = fmap toBooltoBoolM=fmaptoBool--modifiers --modifiers setRow' :: Int -> TabularRow -> Tabular ->  Maybe TabularsetRow'::Int->TabularRow->Tabular->MaybeTabularsetRow' i r t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)setRow'irt=ifi>=V.lengtht-1||i<0||(V.lengthr)/=(V.length$header't)            then NothingthenNothing            else Just (t V.// [(i + 1, r)])elseJust(tV.//[(i+1,r)])setRow :: Int -> Maybe TabularRow -> Tabular ->  Maybe TabularsetRow::Int->MaybeTabularRow->Tabular->MaybeTabularsetRow _ Nothing _ = NothingsetRow_Nothing_=NothingsetRow i (Just r) t = if i >= V.length t -1 || i < 0 || (V.length r) /= (V.length $ header' t)setRowi(Justr)t=ifi>=V.lengtht-1||i<0||(V.lengthr)/=(V.length$header't)            then NothingthenNothing            else Just (t V.// [(i + 1, r)])elseJust(tV.//[(i+1,r)])setCol' :: Int -> TabularRow -> Tabular -> Maybe TabularsetCol'::Int->TabularRow->Tabular->MaybeTabularsetCol' i c t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1setCol'ict=ifi>=V.length(header't)||i<0||(V.lengthc)/=V.lengtht-1            then NothingthenNothing            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n `V.cons` c) ) whereelseJust(V.zipWith(\xy->xV.//[(i,y)])t(n`V.cons`c))where                n = header' t V.! in=header'tV.!isetCol :: Int ->Maybe TabularRow -> Tabular -> Maybe TabularsetCol::Int->MaybeTabularRow->Tabular->MaybeTabularsetCol _ Nothing _= NothingsetCol_Nothing_=NothingsetCol i (Just c) t = if i >= V.length (header' t) || i < 0 || (V.length c) /= V.length t -1setColi(Justc)t=ifi>=V.length(header't)||i<0||(V.lengthc)/=V.lengtht-1            then NothingthenNothing            else Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( n  `V.cons` c) ) whereelseJust(V.zipWith(\xy->xV.//[(i,y)])t(n`V.cons`c))where                n = header' t V.! in=header'tV.!isetColN' :: String -> TabularRow -> Tabular -> Maybe TabularsetColN'::String->TabularRow->Tabular->MaybeTabularsetColN' n c t = let nn = pack n in case nn `V.elemIndex` (header' t) of setColN'nct=letnn=packnincasenn`V.elemIndex`(header't)of            Nothing -> NothingNothing->Nothing            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )Justi->Just(V.zipWith(\xy->xV.//[(i,y)])t(nn`V.cons`c))setColN :: String ->Maybe TabularRow -> Tabular -> Maybe TabularsetColN::String->MaybeTabularRow->Tabular->MaybeTabularsetColN _ Nothing _= NothingsetColN_Nothing_=NothingsetColN n (Just c) t = let nn = pack n in case nn `V.elemIndex` (header' t) of setColNn(Justc)t=letnn=packnincasenn`V.elemIndex`(header't)of            Nothing -> NothingNothing->Nothing            Just i -> Just ( V.zipWith (\x y -> x V.// [(i,y)]) t ( nn `V.cons` c) )Justi->Just(V.zipWith(\xy->xV.//[(i,y)])t(nn`V.cons`c))--use >>= to modify--use >>= to modify--populators--populators--addRow < --addRow < --addCol (Name separate) <<--addCol (Name separate) <<main = domain=do    t <- fromFile "./txts/test_csv.txt"t<-fromFile"./txts/test_csv.txt"    let r = t # 0letr=t#0    let c = t % 0letc=t%0    let cc = t %% "KEGG"letcc=t%%"KEGG"    putStrLn $ show r putStrLn$showr    putStrLn $ show cputStrLn$showc    putStrLn $ show ccputStrLn$showcc    let tt = t >>= (setRow 3 r)lettt=t>>=(setRow3r)    putStrLn $ show $ tt#3 putStrLn$show$tt#3    let ttt = t >>= (setColN "KEGG" c)letttt=t>>=(setColN"KEGG"c)    putStrLn $ show $ ttt%%"KEGG"putStrLn$show$ttt%%"KEGG"    return ()return()





