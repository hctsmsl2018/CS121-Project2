



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

c455fd16















Commit
c455fd16


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




package restructuring & initial test for BiDiSolver







parent
5268a4c6













Changes
7




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}















test/heros/IFDSSolverTest.java








View file @ c455fd16








...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......















test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......















test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}















test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......















test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......















test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

c455fd16















Commit
c455fd16


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




package restructuring & initial test for BiDiSolver







parent
5268a4c6













Changes
7




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}















test/heros/IFDSSolverTest.java








View file @ c455fd16








...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......















test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......















test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}















test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......















test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......















test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

c455fd16







Open sidebar



Joshua Garcia heros
Commits

c455fd16




Open sidebar

Joshua Garcia heros
Commits

c455fd16


Joshua GarciaherosherosCommits
c455fd16








Commit
c455fd16


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




package restructuring & initial test for BiDiSolver







parent
5268a4c6













Changes
7




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}















test/heros/IFDSSolverTest.java








View file @ c455fd16








...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......















test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......















test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}















test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......















test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......















test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
c455fd16


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




package restructuring & initial test for BiDiSolver







parent
5268a4c6













Changes
7




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}















test/heros/IFDSSolverTest.java








View file @ c455fd16








...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......















test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......















test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}















test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......















test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......















test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
c455fd16


authored
Jun 11, 2014
by


Johannes Lerch



Browse files



Commit
c455fd16


authored
Jun 11, 2014
by


Johannes Lerch

c455fd16authoredbyJohannes Lerch

package restructuring & initial test for BiDiSolver






parent
5268a4c6
















parent
5268a4c6





parent












Changes
7
7


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}















test/heros/IFDSSolverTest.java








View file @ c455fd16








...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......















test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......















test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}















test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......















test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......















test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}















test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}













test/heros/BiDiIFDSSolverTest.java



0 → 100644







View file @ c455fd16








test/heros/BiDiIFDSSolverTest.java



0 → 100644









View file @ c455fd16


c455fd16











/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}















/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}












/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros;



















import org.junit.Before;









import org.junit.Test;









import static heros.utilities.TestHelper.*;



















import heros.utilities.TestHelper;



















public class BiDiIFDSSolverTest {



















 private TestHelper forwardHelper;









 private TestHelper backwardHelper;









 









 @Before









 public void before() {









 forwardHelper = new TestHelper();









 backwardHelper = new TestHelper();









 }









 









 @Test









 public void happyPath() {









 forwardHelper.method("foo",









 startPoints("a"),









 normalStmt("a").succ("b"),









 normalStmt("b").succ("c", flow("0", "1")),









 exitStmt("c").expectArtificalFlow(flow("1")));









 









 backwardHelper.method("foo",









 startPoints("c"),









 normalStmt("c").succ("b"),









 normalStmt("b").succ("a", flow("0", "2")),









 exitStmt("a").expectArtificalFlow(flow("2")));









 









 forwardHelper.runBiDiSolver(backwardHelper, "b");









 }









}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import static heros.utilities.TestHelper.*;importstaticheros.utilities.TestHelper.*;import heros.utilities.TestHelper;importheros.utilities.TestHelper;public class BiDiIFDSSolverTest {publicclassBiDiIFDSSolverTest{ private TestHelper forwardHelper;privateTestHelperforwardHelper; private TestHelper backwardHelper;privateTestHelperbackwardHelper;  @Before@Before public void before() {publicvoidbefore(){ forwardHelper = new TestHelper();forwardHelper=newTestHelper(); backwardHelper = new TestHelper();backwardHelper=newTestHelper(); }}  @Test@Test public void happyPath() {publicvoidhappyPath(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b"),normalStmt("a").succ("b"), normalStmt("b").succ("c", flow("0", "1")),normalStmt("b").succ("c",flow("0","1")), exitStmt("c").expectArtificalFlow(flow("1")));exitStmt("c").expectArtificalFlow(flow("1")));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints("c"),startPoints("c"), normalStmt("c").succ("b"),normalStmt("c").succ("b"), normalStmt("b").succ("a", flow("0", "2")),normalStmt("b").succ("a",flow("0","2")), exitStmt("a").expectArtificalFlow(flow("2")));exitStmt("a").expectArtificalFlow(flow("2")));  forwardHelper.runBiDiSolver(backwardHelper, "b");forwardHelper.runBiDiSolver(backwardHelper,"b"); }}}}








test/heros/IFDSSolverTest.java








View file @ c455fd16








...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......













test/heros/IFDSSolverTest.java








View file @ c455fd16








test/heros/IFDSSolverTest.java










View file @ c455fd16


c455fd16





...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......









...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......






...@@ -10,10 +10,12 @@
...@@ -10,10 +10,12 @@






 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros;























import heros.utilities.TestHelper;

















import org.junit.Before;





import org.junit.Before;







import org.junit.Test;





import org.junit.Test;





















import static heros.TestHelper.*;





import static heros.utilities.TestHelper.*;





















public class IFDSSolverTest {





public class IFDSSolverTest {

















...@@ -25,7 +27,7 @@ public class IFDSSolverTest {
...@@ -25,7 +27,7 @@ public class IFDSSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void test() {





 public void happyPath() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "x")),





 normalStmt("a").succ("b", flow("0", "x")),



......


 ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros;packageheros;package heros;packageheros;import heros.utilities.TestHelper;importheros.utilities.TestHelper;import org.junit.Before;importorg.junit.Before;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import org.junit.Test;importorg.junit.Test;import static heros.TestHelper.*;importstaticheros.TestHelper.*;import static heros.utilities.TestHelper.*;importstaticheros.utilitiesutilities..TestHelper.*;public class IFDSSolverTest {publicclassIFDSSolverTest{public class IFDSSolverTest {publicclassIFDSSolverTest{ }} }}   @Test@Test @Test@Test public void test() {publicvoidtesttest(){ public void happyPath() {publicvoidhappyPathhappyPath(){ helper.method("bar", helper.method("bar", helper.method("bar", helper.method("bar", startPoints("a"),startPoints("a"), startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "x")),normalStmt("a").succ("b",flow("0","x")), normalStmt("a").succ("b", flow("0", "x")),normalStmt("a").succ("b",flow("0","x")),








test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......













test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java








View file @ c455fd16








test/heros/EdgeBuilder.java

→

test/heros/utilities/EdgeBuilder.java





utilities/




View file @ c455fd16


c455fd16





...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......









...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......






...@@ -8,16 +8,16 @@
...@@ -8,16 +8,16 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import java.util.Collection;





import java.util.Collection;







import java.util.List;





import java.util.List;





















import com.google.common.collect.Lists;





import com.google.common.collect.Lists;





















import heros.TestHelper.Edge;





import heros.utilities.TestHelper.Edge;







import heros.TestHelper.ExpectedFlowFunction;





import heros.utilities.TestHelper.ExpectedFlowFunction;







import heros.TestHelper.ReturnEdge;





import heros.utilities.TestHelper.ReturnEdge;





















public abstract class EdgeBuilder {





public abstract class EdgeBuilder {







 





 



......


 * Contributors: * Contributors: * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros;packageheros;package heros.utilities;packageheros.utilities.utilities;import java.util.Collection;importjava.util.Collection;import java.util.Collection;importjava.util.Collection;import java.util.List;importjava.util.List;import java.util.List;importjava.util.List;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import heros.TestHelper.Edge;importheros.TestHelper.Edge;import heros.utilities.TestHelper.Edge;importheros.utilities.TestHelper.Edgeutilities.;import heros.TestHelper.ExpectedFlowFunction;importheros.TestHelper.ExpectedFlowFunction;import heros.utilities.TestHelper.ExpectedFlowFunction;importheros.utilities.TestHelper.ExpectedFlowFunctionutilities.;import heros.TestHelper.ReturnEdge;importheros.TestHelper.ReturnEdge;import heros.utilities.TestHelper.ReturnEdge;importheros.utilities.TestHelper.ReturnEdgeutilities.;public abstract class EdgeBuilder {publicabstractclassEdgeBuilder{public abstract class EdgeBuilder {publicabstractclassEdgeBuilder{  








test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}













test/heros/Fact.java

→

test/heros/utilities/Fact.java








View file @ c455fd16








test/heros/Fact.java

→

test/heros/utilities/Fact.java





utilities/




View file @ c455fd16


c455fd16





...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}









...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}






...@@ -8,9 +8,11 @@
...@@ -8,9 +8,11 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Fact {





import heros.solver.LinkedNode;



















public class Fact implements LinkedNode<Fact> {





















 public final String name;





 public final String name;







 





 



...@@ -47,4 +49,10 @@ public class Fact {
...@@ -47,4 +49,10 @@ public class Fact {






 public String toString() {





 public String toString() {







 return "[Fact "+name+"]";





 return "[Fact "+name+"]";







 }





 }



















 @Override









 public void addNeighbor(Fact originalAbstraction) {









 // TODO Auto-generated method stub









 









 }







}




}


 * Contributors: * Contributors: * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros;packageheros;package heros.utilities;packageheros.utilities.utilities;public class Fact {publicclassFact{import heros.solver.LinkedNode;importheros.solver.LinkedNode;public class Fact implements LinkedNode<Fact> {publicclassFactimplementsLinkedNode<Fact>{ public final String name;publicfinalStringname; public final String name;publicfinalStringname;   public String toString() {publicStringtoString(){ public String toString() {publicStringtoString(){ return "[Fact "+name+"]";return"[Fact "+name+"]"; return "[Fact "+name+"]";return"[Fact "+name+"]"; }} }} @Override@Override public void addNeighbor(Fact originalAbstraction) {publicvoidaddNeighbor(FactoriginalAbstraction){ // TODO Auto-generated method stub// TODO Auto-generated method stub  }}}}}}








test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......













test/heros/Method.java

→

test/heros/utilities/Method.java








View file @ c455fd16








test/heros/Method.java

→

test/heros/utilities/Method.java





utilities/




View file @ c455fd16


c455fd16





...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......









...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......






...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Method {





public class Method {

















......


 * Contributors: * Contributors: * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros;packageheros;package heros.utilities;packageheros.utilities.utilities;public class Method {publicclassMethod{public class Method {publicclassMethod{








test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......













test/heros/Statement.java

→

test/heros/utilities/Statement.java








View file @ c455fd16








test/heros/Statement.java

→

test/heros/utilities/Statement.java





utilities/




View file @ c455fd16


c455fd16





...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......









...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......






...@@ -8,7 +8,7 @@
...@@ -8,7 +8,7 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















public class Statement {





public class Statement {

















......


 * Contributors: * Contributors: * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros;packageheros;package heros.utilities;packageheros.utilities.utilities;public class Statement {publicclassStatement{public class Statement {publicclassStatement{








test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}













test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java








View file @ c455fd16








test/heros/TestHelper.java

→

test/heros/utilities/TestHelper.java





utilities/




View file @ c455fd16


c455fd16





...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}









...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}






...@@ -8,9 +8,14 @@
...@@ -8,9 +8,14 @@






 * Contributors:





 * Contributors:







 *     Johannes Lerch - initial API and implementation





 *     Johannes Lerch - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros;





package heros.utilities;





















import static org.junit.Assert.assertTrue;





import static org.junit.Assert.assertTrue;









import heros.FlowFunction;









import heros.FlowFunctions;









import heros.IFDSTabulationProblem;









import heros.InterproceduralCFG;









import heros.solver.BiDiIFDSSolver;







import heros.solver.IFDSSolver;





import heros.solver.IFDSSolver;







import heros.solver.Pair;





import heros.solver.Pair;

















...@@ -226,27 +231,27 @@ public class TestHelper {
...@@ -226,27 +231,27 @@ public class TestHelper {






 





 







 edge.accept(new EdgeVisitor() {





 edge.accept(new EdgeVisitor() {







 @Override





 @Override







 public void visit(heros.TestHelper.ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.exitStmt, method);





 addOrVerifyStmt2Method(edge.exitStmt, method);







 edge.calleeMethod = method;





 edge.calleeMethod = method;







 returnEdges.add(edge);





 returnEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.Call2ReturnEdge edge) {





 public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 addOrVerifyStmt2Method(edge.returnSite, method);





 addOrVerifyStmt2Method(edge.returnSite, method);







 call2retEdges.add(edge);





 call2retEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.CallEdge edge) {





 public void visit(heros.utilities.TestHelper.CallEdge edge) {







 addOrVerifyStmt2Method(edge.callSite, method);





 addOrVerifyStmt2Method(edge.callSite, method);







 callEdges.add(edge);





 callEdges.add(edge);







 }





 }







 





 







 @Override





 @Override







 public void visit(heros.TestHelper.NormalEdge edge) {





 public void visit(heros.utilities.TestHelper.NormalEdge edge) {







 addOrVerifyStmt2Method(edge.unit, method);





 addOrVerifyStmt2Method(edge.unit, method);







 addOrVerifyStmt2Method(edge.succUnit, method);





 addOrVerifyStmt2Method(edge.succUnit, method);







 normalEdges.add(edge);





 normalEdges.add(edge);



...@@ -463,57 +468,72 @@ public class TestHelper {
...@@ -463,57 +468,72 @@ public class TestHelper {






 }





 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {





 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {







 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(





 IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(







 new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





 createTabulationProblem(followReturnsPastSeeds, initialSeeds));





















 @Override





 solver.solve();







 public boolean followReturnsPastSeeds() {





 assertAllFlowFunctionsUsed();







 return followReturnsPastSeeds;





 }







 }





 









 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {









 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(









 createTabulationProblem(true, initialSeeds), 









 backwardHelper.createTabulationProblem(true, initialSeeds));









 









 solver.solve();









 assertAllFlowFunctionsUsed();









 backwardHelper.assertAllFlowFunctionsUsed();









 }









 









 private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {









 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();









 final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();









 









 return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {





















  @Override





 @Override







  public boolean autoAddZero() {





 public boolean followReturnsPastSeeds() {







  return false;





 return followReturnsPastSeeds;







  }





 }





















  @Override





 @Override







  public int numThreads() {





 public boolean autoAddZero() {







  return 1;





 return false;







  }





 }





















  @Override





 @Override







  public boolean computeValues() {





 public int numThreads() {







  return false;





 return 1;







  }





 }





















  @Override





 @Override







  public FlowFunctions<Statement, Fact, Method> flowFunctions() {





 public boolean computeValues() {







  return flowFunctions;





 return false;







  }





 }





















  @Override





 @Override







  public InterproceduralCFG<Statement, Method> interproceduralCFG() {





 public FlowFunctions<Statement, Fact, Method> flowFunctions() {







  return icfg;





 return flowFunctions;







  }





 }





















 @Override





 @Override







 public Map<Statement, Set<Fact>> initialSeeds() {





 public InterproceduralCFG<Statement, Method> interproceduralCFG() {







 Map<Statement, Set<Fact>> result = Maps.newHashMap();





 return icfg;







 for (String stmt : initialSeeds) {





 }







 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }























 @Override





 @Override







 public Fact zeroValue() {





 public Map<Statement, Set<Fact>> initialSeeds() {







 return new Fact("0");





 Map<Statement, Set<Fact>> result = Maps.newHashMap();







 }





 for (String stmt : initialSeeds) {







 });





 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));









 }









 return result;









 }





















 solver.solve();





 @Override







 assertAllFlowFunctionsUsed();





 public Fact zeroValue() {









 return new Fact("0");









 }









 };







 }





 }







}




}


 * Contributors: * Contributors: * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros;packageheros;package heros.utilities;packageheros.utilities.utilities;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.solver.BiDiIFDSSolver;importheros.solver.BiDiIFDSSolver;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import heros.solver.Pair;importheros.solver.Pair;import heros.solver.Pair;importheros.solver.Pair;   edge.accept(new EdgeVisitor() {edge.accept(newEdgeVisitor(){ edge.accept(new EdgeVisitor() {edge.accept(newEdgeVisitor(){ @Override@Override @Override@Override public void visit(heros.TestHelper.ReturnEdge edge) {publicvoidvisit(heros.TestHelper.ReturnEdgeedge){ public void visit(heros.utilities.TestHelper.ReturnEdge edge) {publicvoidvisit(heros.utilitiesutilities..TestHelper.ReturnEdgeedge){ addOrVerifyStmt2Method(edge.exitStmt, method);addOrVerifyStmt2Method(edge.exitStmt,method); addOrVerifyStmt2Method(edge.exitStmt, method);addOrVerifyStmt2Method(edge.exitStmt,method); edge.calleeMethod = method;edge.calleeMethod=method; edge.calleeMethod = method;edge.calleeMethod=method; returnEdges.add(edge);returnEdges.add(edge); returnEdges.add(edge);returnEdges.add(edge); }} }}   @Override@Override @Override@Override public void visit(heros.TestHelper.Call2ReturnEdge edge) {publicvoidvisit(heros.TestHelper.Call2ReturnEdgeedge){ public void visit(heros.utilities.TestHelper.Call2ReturnEdge edge) {publicvoidvisit(heros.utilitiesutilities..TestHelper.Call2ReturnEdgeedge){ addOrVerifyStmt2Method(edge.callSite, method);addOrVerifyStmt2Method(edge.callSite,method); addOrVerifyStmt2Method(edge.callSite, method);addOrVerifyStmt2Method(edge.callSite,method); addOrVerifyStmt2Method(edge.returnSite, method);addOrVerifyStmt2Method(edge.returnSite,method); addOrVerifyStmt2Method(edge.returnSite, method);addOrVerifyStmt2Method(edge.returnSite,method); call2retEdges.add(edge);call2retEdges.add(edge); call2retEdges.add(edge);call2retEdges.add(edge); }} }}   @Override@Override @Override@Override public void visit(heros.TestHelper.CallEdge edge) {publicvoidvisit(heros.TestHelper.CallEdgeedge){ public void visit(heros.utilities.TestHelper.CallEdge edge) {publicvoidvisit(heros.utilitiesutilities..TestHelper.CallEdgeedge){ addOrVerifyStmt2Method(edge.callSite, method);addOrVerifyStmt2Method(edge.callSite,method); addOrVerifyStmt2Method(edge.callSite, method);addOrVerifyStmt2Method(edge.callSite,method); callEdges.add(edge);callEdges.add(edge); callEdges.add(edge);callEdges.add(edge); }} }}   @Override@Override @Override@Override public void visit(heros.TestHelper.NormalEdge edge) {publicvoidvisit(heros.TestHelper.NormalEdgeedge){ public void visit(heros.utilities.TestHelper.NormalEdge edge) {publicvoidvisit(heros.utilitiesutilities..TestHelper.NormalEdgeedge){ addOrVerifyStmt2Method(edge.unit, method);addOrVerifyStmt2Method(edge.unit,method); addOrVerifyStmt2Method(edge.unit, method);addOrVerifyStmt2Method(edge.unit,method); addOrVerifyStmt2Method(edge.succUnit, method);addOrVerifyStmt2Method(edge.succUnit,method); addOrVerifyStmt2Method(edge.succUnit, method);addOrVerifyStmt2Method(edge.succUnit,method); normalEdges.add(edge);normalEdges.add(edge); normalEdges.add(edge);normalEdges.add(edge); }} }} public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {publicvoidrunSolver(finalbooleanfollowReturnsPastSeeds,finalString...initialSeeds){ public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {publicvoidrunSolver(finalbooleanfollowReturnsPastSeeds,finalString...initialSeeds){ final InterproceduralCFG<Statement, Method> icfg = buildIcfg();finalInterproceduralCFG<Statement,Method>icfg=buildIcfg(); final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();finalFlowFunctions<Statement,Fact,Method>flowFunctions=flowFunctions(); IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(IFDSSolver<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>solver=newIFDSSolver<>( IFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new IFDSSolver<>(IFDSSolver<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>solver=newIFDSSolver<>( new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {newnew IFDSTabulationProblemIFDS<<StatementStatement,, FactFact,, MethodMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, MethodMethod>>()>>() {{ createTabulationProblem(followReturnsPastSeeds, initialSeeds));createTabulationProblemcreate((followReturnsPastSeedsfollowReturnsPastSeeds,, initialSeedsinitialSeeds));)); @Override@Override solver.solve();solver.solve(); public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed(); return followReturnsPastSeeds;returnfollowReturnsPastSeeds; }} }}  public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {publicvoidrunBiDiSolver(TestHelperbackwardHelper,finalString...initialSeeds){ BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(BiDiIFDSSolver<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>solver=newBiDiIFDSSolver<>( createTabulationProblem(true, initialSeeds), createTabulationProblem(true,initialSeeds), backwardHelper.createTabulationProblem(true, initialSeeds));backwardHelper.createTabulationProblem(true,initialSeeds));  solver.solve();solver.solve(); assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed(); backwardHelper.assertAllFlowFunctionsUsed();backwardHelper.assertAllFlowFunctionsUsed(); }}  private IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {privateIFDSTabulationProblem<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>createTabulationProblem(finalbooleanfollowReturnsPastSeeds,finalString[]initialSeeds){ final InterproceduralCFG<Statement, Method> icfg = buildIcfg();finalInterproceduralCFG<Statement,Method>icfg=buildIcfg(); final FlowFunctions<Statement, Fact, Method> flowFunctions = flowFunctions();finalFlowFunctions<Statement,Fact,Method>flowFunctions=flowFunctions();  return new IFDSTabulationProblem<Statement, Fact, Method, InterproceduralCFG<Statement, Method>>() {returnnewIFDSTabulationProblem<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>(){  @Override @Override @Override@Override  public boolean autoAddZero() { publicbooleanautoAddZeroautoAddZero(){ public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeedsfollowReturnsPastSeeds(){  return false; returnfalsealse; return followReturnsPastSeeds;returnfollowReturnsPastSeedsollowReturnsPastSeeds;  } } }}  @Override @Override @Override@Override  public int numThreads() { publicintint numThreadsnumThreads(){ public boolean autoAddZero() {publicbooleanboolean autoAddZeroautoAddZero(){  return 1; return11; return false;returnfalsefalse;  } } }}  @Override @Override @Override@Override  public boolean computeValues() { publicbooleanboolean computeValuescomputeValue(){ public int numThreads() {publicintint numThreadsnumThread(){  return false; returnfalsefalse; return 1;return11;  } } }}  @Override @Override @Override@Override  public FlowFunctions<Statement, Fact, Method> flowFunctions() { publicFlowFunctionsFlowFunctions<<StatementStatement,, FactFact,, MethodMethod>> flowFunctionsflowFunction(){ public boolean computeValues() {publicbooleanboolean computeValuescomputeValue(){  return flowFunctions; returnflowFunctionslowFunctions; return false;returnfalsealse;  } } }}  @Override @Override @Override@Override  public InterproceduralCFG<Statement, Method> interproceduralCFG() { publicInterproceduralCFGInterproceduralCFG<Statement,Method>interproceduralCFGinterproceduralCFG(){ public FlowFunctions<Statement, Fact, Method> flowFunctions() {publicFlowFunctionsFlowFunctions<Statement,FactFact,, Method>flowFunctionsflowFunctions(){  return icfg; returnicfgicfg; return flowFunctions;returnflowFunctionsflowFunctions;  } } }} @Override@Override @Override@Override public Map<Statement, Set<Fact>> initialSeeds() {publicMap<Statement,Set<Fact>>initialSeeds(){ public InterproceduralCFG<Statement, Method> interproceduralCFG() {publicInterproceduralCFG<Statement,Method>interproceduralCFG(){ Map<Statement, Set<Fact>> result = Maps.newHashMap();Map<Statement,Set<Fact>>result=Maps.newHashMap(); return icfg;returnicfg; for (String stmt : initialSeeds) {for(Stringstmt:initialSeeds){ }} result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));result.put(newStatement(stmt),Sets.newHashSet(newFact("0"))); }} return result;returnresult; }} @Override@Override @Override@Override public Fact zeroValue() {publicFactzeroValue(){ public Map<Statement, Set<Fact>> initialSeeds() {publicMap<Statement,Set<Fact>>initialSeeds(){ return new Fact("0");returnnewFact("0"); Map<Statement, Set<Fact>> result = Maps.newHashMap();Map<Statement,Set<Fact>>result=Maps.newHashMap(); }} for (String stmt : initialSeeds) {for(Stringstmt:initialSeeds){ });}); result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));result.put(newStatement(stmt),Sets.newHashSet(newFact("0"))); }} return result;returnresult; }} solver.solve();solver.solve(); @Override@Override assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed(); public Fact zeroValue() {publicFactzeroValue(){ return new Fact("0");returnnewFact("0"); }} };}; }} }}}}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






