



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

fe2c8108















Commit
fe2c8108


authored
Jul 10, 2015
by


Johannes Lerch



Browse files




correct handling of ZeroCallEdgeResolver as incoming resolver on return

edges






parent
92493a03













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ fe2c8108






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......














test/heros/utilities/TestDebugger.java








View file @ fe2c8108






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

fe2c8108















Commit
fe2c8108


authored
Jul 10, 2015
by


Johannes Lerch



Browse files




correct handling of ZeroCallEdgeResolver as incoming resolver on return

edges






parent
92493a03













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ fe2c8108






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......














test/heros/utilities/TestDebugger.java








View file @ fe2c8108






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

fe2c8108







Open sidebar



Joshua Garcia heros
Commits

fe2c8108




Open sidebar

Joshua Garcia heros
Commits

fe2c8108


Joshua GarciaherosherosCommits
fe2c8108








Commit
fe2c8108


authored
Jul 10, 2015
by


Johannes Lerch



Browse files




correct handling of ZeroCallEdgeResolver as incoming resolver on return

edges






parent
92493a03













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ fe2c8108






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......














test/heros/utilities/TestDebugger.java








View file @ fe2c8108






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
fe2c8108


authored
Jul 10, 2015
by


Johannes Lerch



Browse files




correct handling of ZeroCallEdgeResolver as incoming resolver on return

edges






parent
92493a03













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ fe2c8108






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......














test/heros/utilities/TestDebugger.java








View file @ fe2c8108






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
fe2c8108


authored
Jul 10, 2015
by


Johannes Lerch



Browse files



Commit
fe2c8108


authored
Jul 10, 2015
by


Johannes Lerch

fe2c8108authoredbyJohannes Lerch

correct handling of ZeroCallEdgeResolver as incoming resolver on return

edges





parent
92493a03
















parent
92493a03





parent












Changes
6
6


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/Debugger.java








View file @ fe2c8108






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......














test/heros/utilities/TestDebugger.java








View file @ fe2c8108






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}














src/heros/fieldsens/Debugger.java








View file @ fe2c8108






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file












src/heros/fieldsens/Debugger.java








View file @ fe2c8108








src/heros/fieldsens/Debugger.java










View file @ fe2c8108


fe2c8108



......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file






......@@ -16,13 +16,12 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {














......@@ -46,6 +45,24 @@ public interface Debugger<Field, Fact, Stmt, Method> {









 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }










 










 }










}




\ No newline at end of file


public interface Debugger<Field, Fact, Stmt, Method> {publicinterfaceDebugger<Field,Fact,Stmt,Method>{ public void setICFG(InterproceduralCFG<Stmt, Method> icfg);publicvoidsetICFG(InterproceduralCFG<Stmt,Method>icfg); public void initialSeed(Stmt stmt);publicvoidinitialSeed(Stmtstmt);  public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver);  public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidnewJob(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidjobStarted(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidjobFinished(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt);  public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {publicstaticclassNullDebugger<Field,Fact,Stmt,Method>implementsDebugger<Field,Fact,Stmt,Method>{ public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){  }} @Override@Override public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidnewJob(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobStarted(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobFinished(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }}  }}}}








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......












src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ fe2c8108








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java










View file @ fe2c8108


fe2c8108



......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......






......@@ -297,10 +297,12 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -311,6 +313,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 }














......


 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicJob(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ this.factAtStmt = factAtStmt;this.factAtStmt=factAtStmt; debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);debugger.newJob(PerAccessPathMethodAnalyzer.this,factAtStmt); }} @Override@Override public void run() {publicvoidrun(){ debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);debugger.jobStarted(PerAccessPathMethodAnalyzer.this,factAtStmt); if (context.icfg.isCallStmt(factAtStmt.getStatement())) {if(context.icfg.isCallStmt(factAtStmt.getStatement())){ processCall(factAtStmt);processCall(factAtStmt); } else {}else{ processNormalFlow(factAtStmt);processNormalFlow(factAtStmt); }} }} debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);debugger.jobFinished(PerAccessPathMethodAnalyzer.this,factAtStmt); }} }}








src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ fe2c8108








src/heros/fieldsens/ReturnSiteResolver.java










View file @ fe2c8108


fe2c8108



......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......






......@@ -92,8 +92,18 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver



......@@ -126,7 +136,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {



......


 return returnSite;returnreturnSite; }}  private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {privatebooleanisNullOrCallEdgeResolver(Resolver<Field,Fact,Stmt,Method>resolver){ if(resolver == null)if(resolver==null) return true;returntrue; if(resolver instanceof CallEdgeResolver) {if(resolverinstanceofCallEdgeResolver){ return !(resolver instanceof ZeroCallEdgeResolver);return!(resolverinstanceofZeroCallEdgeResolver); }} return false;returnfalse; }}  private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {privatevoidresolveViaDelta(finalReturnEdge<Field,Fact,Stmt,Method>retEdge){ if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {if(retEdge.incResolver==null||retEdge.incResolverinstanceofCallEdgeResolver){ if(isNullOrCallEdgeResolver(retEdge.incResolver)) {if(isNullOrCallEdgeResolver(retEdge.incResolver)){  resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge); } else {}else{ //resolve via incoming facts resolver//resolve via incoming facts resolver }} protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {protectedvoidresolveViaCallSiteResolver(finalReturnEdge<Field,Fact,Stmt,Method>retEdge,AccessPath<Field>currAccPath){ if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {if(retEdgeret..resolverAtCallerrAtCaller ==== nullnull |||| retEdge.resolverAtCaller instanceofinstanceof CallEdgeResolverCallEdgeResolver){ if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {if(isNullOrCallEdgeResolverisNullOrCallR((retEdge.resolverAtCaller))){ canBeResolvedEmpty();canBeResolvedEmpty(); } else {}else{ retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())),newInterestCallback<Field,Fact,Stmt,Method>(){








src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......












src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ fe2c8108








src/heros/fieldsens/ZeroCallEdgeResolver.java










View file @ fe2c8108


fe2c8108



......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......






......@@ -36,6 +36,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "ZeroCallEdgeResolver: "+super.toString();










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......


 return this;returnthis; }} @Override@Override public String toString() {publicStringtoString(){ return "ZeroCallEdgeResolver: "+super.toString();return"ZeroCallEdgeResolver: "+super.toString(); }}  @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31;








test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......












test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ fe2c8108








test/heros/fieldsens/ReturnSiteResolverTest.java










View file @ fe2c8108


fe2c8108



......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......






......@@ -15,11 +15,17 @@ import static org.junit.Assert.assertTrue;









import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -270,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......


import static org.mockito.Matchers.any;importstaticorg.mockito.Matchers.any;import static org.mockito.Matchers.argThat;importstaticorg.mockito.Matchers.argThat;import static org.mockito.Matchers.eq;importstaticorg.mockito.Matchers.eq;import static org.mockito.Mockito.RETURNS_DEEP_STUBS;importstaticorg.mockito.Mockito.RETURNS_DEEP_STUBS;import static org.mockito.Mockito.RETURNS_MOCKS;importstaticorg.mockito.Mockito.RETURNS_MOCKS;import static org.mockito.Mockito.RETURNS_SMART_NULLS;importstaticorg.mockito.Mockito.RETURNS_SMART_NULLS;import static org.mockito.Mockito.doAnswer;importstaticorg.mockito.Mockito.doAnswer;import static org.mockito.Mockito.mock;importstaticorg.mockito.Mockito.mock;import static org.mockito.Mockito.never;importstaticorg.mockito.Mockito.never;import static org.mockito.Mockito.verify;importstaticorg.mockito.Mockito.verify;import static org.mockito.Mockito.when;importstaticorg.mockito.Mockito.when;import static org.mockito.Mockito.withSettings;importstaticorg.mockito.Mockito.withSettings;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import heros.fieldsens.structs.DeltaConstraint;importheros.fieldsens.structs.DeltaConstraint;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement; verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));verify(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class)); }}  @Test@Test public void incomingZeroCallEdgeResolver() {publicvoidincomingZeroCallEdgeResolver(){ Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);Resolver<String,TestFact,Statement,TestMethod>resolver=mock(Resolver.class); ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); ZeroCallEdgeResolver<String,TestFact,Statement,TestMethod>zeroResolver=mock(ZeroCallEdgeResolver.class); sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<String,TestFact,Statement,TestMethod>(fact,createAccessPath(),zeroResolver),resolver,getDelta()); sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);  verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));verify(resolver,never()).resolve(any(Constraint.class),any(InterestCallback.class)); verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));verify(callback,never()).interest(any(PerAccessPathMethodAnalyzer.class),any(Resolver.class)); verify(callback, never()).canBeResolvedEmpty();verify(callback,never()).canBeResolvedEmpty(); }}  private class ReturnSiteResolverArgumentMatcher extendsprivateclassReturnSiteResolverArgumentMatcherextends ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {ArgumentMatcher<ReturnSiteResolver<String,TestFact,Statement,TestMethod>>{








test/heros/utilities/TestDebugger.java








View file @ fe2c8108






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}












test/heros/utilities/TestDebugger.java








View file @ fe2c8108








test/heros/utilities/TestDebugger.java










View file @ fe2c8108


fe2c8108



......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}






......@@ -121,4 +121,21 @@ public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field,









 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















}


  }} @Override@Override public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicvoidnewJob(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobStarted(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobFinished(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






