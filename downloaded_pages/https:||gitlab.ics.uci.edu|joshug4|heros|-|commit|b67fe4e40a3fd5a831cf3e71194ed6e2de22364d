



GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab












Menu




Projects
Groups
Snippets



GitLab






GitLab




Menu




Projects
Groups
Snippets




Menu


Projects
Groups
Snippets















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in
















/














/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help



Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab




Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

b67fe4e4















Commit
b67fe4e4


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




adapting testcases to changed behavior







parent
0c22069e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ b67fe4e4






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

b67fe4e4















Commit
b67fe4e4


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




adapting testcases to changed behavior







parent
0c22069e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ b67fe4e4






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

b67fe4e4







Open sidebar



Joshua Garcia heros
Commits

b67fe4e4




Open sidebar

Joshua Garcia heros
Commits

b67fe4e4


Joshua GarciaherosherosCommits
b67fe4e4








Commit
b67fe4e4


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




adapting testcases to changed behavior







parent
0c22069e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ b67fe4e4






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
b67fe4e4


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




adapting testcases to changed behavior







parent
0c22069e













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/Debugger.java








View file @ b67fe4e4






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
b67fe4e4


authored
Jul 09, 2015
by


Johannes Lerch



Browse files



Commit
b67fe4e4


authored
Jul 09, 2015
by


Johannes Lerch

b67fe4e4authoredbyJohannes Lerch

adapting testcases to changed behavior






parent
0c22069e
















parent
0c22069e





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/Debugger.java








View file @ b67fe4e4






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......














src/heros/fieldsens/Debugger.java








View file @ b67fe4e4






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......












src/heros/fieldsens/Debugger.java








View file @ b67fe4e4








src/heros/fieldsens/Debugger.java










View file @ b67fe4e4


b67fe4e4



......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......






......@@ -44,7 +44,6 @@ public interface Debugger<Field, Fact, Stmt, Method> {




















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 



......


 @Override@Override public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ // TODO Auto-generated method stub// TODO Auto-generated method stub  }} 








test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......












test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ b67fe4e4








test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java










View file @ b67fe4e4


b67fe4e4



......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import static heros.utilities.FieldSensitiveTestHelper.callSite;importstaticheros.utilities.FieldSensitiveTestHelper.callSite;import static heros.utilities.FieldSensitiveTestHelper.exitStmt;importstaticheros.utilities.FieldSensitiveTestHelper.exitStmt;import static heros.utilities.FieldSensitiveTestHelper.flow;importstaticheros.utilities.FieldSensitiveTestHelper.flow;import static heros.utilities.FieldSensitiveTestHelper.kill;importstaticheros.utilities.FieldSensitiveTestHelper.kill;import static heros.utilities.FieldSensitiveTestHelper.normalStmt;importstaticheros.utilities.FieldSensitiveTestHelper.normalStmt;import static heros.utilities.FieldSensitiveTestHelper.over;importstaticheros.utilities.FieldSensitiveTestHelper.over;import static heros.utilities.FieldSensitiveTestHelper.startPoints;importstaticheros.utilities.FieldSensitiveTestHelper.startPoints;import static heros.utilities.FieldSensitiveTestHelper.times;importstaticheros.utilities.FieldSensitiveTestHelper.times;import static heros.utilities.FieldSensitiveTestHelper.to;importstaticheros.utilities.FieldSensitiveTestHelper.to;import heros.utilities.FieldSensitiveTestHelper;importheros.utilities.FieldSensitiveTestHelper;import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;importheros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;import heros.utilities.Statement;importheros.utilities.Statement;import heros.utilities.TestDebugger;importheros.utilities.TestDebugger;import heros.utilities.TestFact;importheros.utilities.TestFact;import heros.utilities.TestMethod;importheros.utilities.TestMethod;import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;importheros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;import java.util.Collection;importjava.util.Collection;import java.util.LinkedList;importjava.util.LinkedList;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import static heros.utilities.FieldSensitiveTestHelper.*;importstaticheros.utilities.FieldSensitiveTestHelper.*;@RunWith(Parameterized.class)@RunWith(Parameterized.class)public class BiDiFieldSensitiveIFDSSolverTest {publicclassBiDiFieldSensitiveIFDSSolverTest{ private FieldSensitiveTestHelper forwardHelper;privateFieldSensitiveTestHelperforwardHelper; private FieldSensitiveTestHelper backwardHelper;privateFieldSensitiveTestHelperbackwardHelper; private TabulationProblemExchange exchange;privateTabulationProblemExchangeexchange; private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger; private TestDebugger<String, TestFact, Statement, TestMethod> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod>debugger;  public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {publicBiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchangeexchange){ this.exchange = exchange;this.exchange=exchange; debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>();> debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod>(); forwardHelper = new FieldSensitiveTestHelper(debugger);forwardHelper=newFieldSensitiveTestHelper(debugger); backwardHelper = new FieldSensitiveTestHelper(debugger);backwardHelper=newFieldSensitiveTestHelper(debugger); }}








test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......












test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ b67fe4e4








test/heros/fieldsens/ControlFlowJoinResolverTest.java










View file @ b67fe4e4


b67fe4e4



......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......


 public void before() {publicvoidbefore(){ analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class); joinStmt = new Statement("joinStmt");joinStmt=newStatement("joinStmt"); sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);sut=newControlFlowJoinResolver<String,TestFact,Statement,TestMethod>(mock(FactMergeHandler.class),analyzer,joinStmt); sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, sut=newControlFlowJoinResolver<String,TestFact,Statement,TestMethod>(mock(FactMergeHandler.class),analyzer,joinStmt, new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());newDebugger.NullDebugger<String,TestFact,Statement,TestMethod>()); fact = new TestFact("value");fact=newTestFact("value"); callback = mock(InterestCallback.class);callback=mock(InterestCallback.class); callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class); sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));sut.addIncoming(newWrappedFact<String,TestFact,Statement,TestMethod>(fact,createAccessPath(),resolver)); sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);  verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThatargThat((newnew ResolverArgumentMatcherResolverArgumentMatcher((createAccessPathcreateAccessPath(("a""a"))));)) verify(callback).interest(eq(analyzer), eq(nestedResolver));verify(callback).interest(eq(analyzer),eqeq((nestedResolvernestedResolver)); }}  








test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......












test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ b67fe4e4








test/heros/fieldsens/ReturnSiteResolverTest.java










View file @ b67fe4e4


b67fe4e4



......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......






......@@ -12,15 +12,13 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;



......@@ -29,6 +27,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +68,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +226,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......


import static org.junit.Assert.assertEquals;importstaticorg.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import static org.mockito.Mockito.*;importstaticorg.mockito.Mockito.*;import java.util.List;importjava.util.List;import heros.fieldsens.CallEdgeResolver;importheros.fieldsens.CallEdgeResolver;import heros.fieldsens.InterestCallback;importheros.fieldsens.InterestCallback;import heros.fieldsens.PerAccessPathMethodAnalyzer;importheros.fieldsens.PerAccessPathMethodAnalyzer;import heros.fieldsens.Resolver;importheros.fieldsens.Resolver;import heros.fieldsens.ReturnSiteResolver;importheros.fieldsens.ReturnSiteResolver;import static org.mockito.Matchers.any;importstaticorg.mockito.Matchers.any;import static org.mockito.Matchers.argThat;importstaticorg.mockito.Matchers.argThat;import static org.mockito.Matchers.eq;importstaticorg.mockito.Matchers.eq;import static org.mockito.Mockito.doAnswer;importstaticorg.mockito.Mockito.doAnswer;import static org.mockito.Mockito.mock;importstaticorg.mockito.Mockito.mock;import static org.mockito.Mockito.never;importstaticorg.mockito.Mockito.never;import static org.mockito.Mockito.verify;importstaticorg.mockito.Mockito.verify;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.structs.DeltaConstraint;importheros.fieldsens.structs.DeltaConstraint;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.utilities.TestFact;importheros.utilities.TestFact;import heros.utilities.TestMethod;importheros.utilities.TestMethod;import java.util.List;importjava.util.List;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import org.mockito.ArgumentMatcher;importorg.mockito.ArgumentMatcher; public void before() {publicvoidbefore(){ analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class); returnSite = new Statement("returnSite");returnSite=newStatement("returnSite"); sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);sut=newReturnSiteResolver<String,TestFact,Statement,TestMethod>(mock(FactMergeHandler.class),analyzer,returnSite); sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,sut=newReturnSiteResolver<String,TestFact,Statement,TestMethod>(mock(FactMergeHandler.class),analyzer,returnSite, new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());newDebugger.NullDebugger<String,TestFact,Statement,TestMethod>()); fact = new TestFact("value");fact=newTestFact("value"); callback = mock(InterestCallback.class);callback=mock(InterestCallback.class); callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class); doAnswer(new Answer() {doAnswer(newAnswer(){ @Override@Override public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{ ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];ReturnSiteResolverReturnSite<String,TestFact,Statement,TestMethod>resolver=(ReturnSiteResolverReturnSite)invocation.getArguments()[1]; Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];Resolver<String,TestFact,Statement,TestMethod>resolver=(Resolver)invocation.getArguments()[1]; resolver.resolve(getDeltaConstraint("b"), secondCallback);resolver.resolve(getDeltaConstraint("b"),secondCallback); return null;returnnull; }}  }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));}).when(callback).interest(eq(analyzer),argThatargThat((newnew ReturnSiteResolverArgumentMatcherReturnSiArgumentMatcher((createAccessPathcreateAccessPath(("a""a"))));)) }).when(callback).interest(eq(analyzer), eq(nestedResolver));}).when(callback).interest(eq(analyzer),eqeq((nestedResolvernesd));  sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<String,TestFact,Statement,TestMethod>(fact,createAccessPath(),callEdgeResolver),resolver,getDelta()); sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);  verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));verify(secondCallback).interest(eq(analyzer),argThatargThat((newnew ReturnSiteResolverArgumentMatcherReturnSiArgumentMatcher((createAccessPathcreateAccessPath(("a""a",, "b""b"))));)) verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));verify(secondCallback).interest(eq(analyzer),eqeq((nestedResolvernesd)); }}  @Test@Test









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview






















Write



Preview











































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel












Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel




Supports Markdown





0%










Try again


or


attach a new file


.




Attach a file




Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Attach a file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






