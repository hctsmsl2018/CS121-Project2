



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell
Commits

e31e298b















Commit
e31e298b


authored
Jun 27, 2013
by


darlliu



Browse files




stash some work







parent
20804688













Changes
6




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ e31e298b






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......














cybert/cd271ex





View file @ e31e298b





No preview for this file type













cybert/cd271ex.hs








View file @ e31e298b






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......














cybert/huanganalysis



0 → 100755




View file @ e31e298b





File added













cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b













import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs

























cybert/testload.tsv



0 → 100644







View file @ e31e298b





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell
Commits

e31e298b















Commit
e31e298b


authored
Jun 27, 2013
by


darlliu



Browse files




stash some work







parent
20804688













Changes
6




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ e31e298b






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......














cybert/cd271ex





View file @ e31e298b





No preview for this file type













cybert/cd271ex.hs








View file @ e31e298b






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......














cybert/huanganalysis



0 → 100755




View file @ e31e298b





File added













cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b













import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs

























cybert/testload.tsv



0 → 100644







View file @ e31e298b





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Yu Liu haskell
Commits

e31e298b







Open sidebar



Yu Liu haskell
Commits

e31e298b




Open sidebar

Yu Liu haskell
Commits

e31e298b


Yu LiuhaskellhaskellCommits
e31e298b








Commit
e31e298b


authored
Jun 27, 2013
by


darlliu



Browse files




stash some work







parent
20804688













Changes
6




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ e31e298b






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......














cybert/cd271ex





View file @ e31e298b





No preview for this file type













cybert/cd271ex.hs








View file @ e31e298b






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......














cybert/huanganalysis



0 → 100755




View file @ e31e298b





File added













cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b













import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs

























cybert/testload.tsv



0 → 100644







View file @ e31e298b





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
e31e298b


authored
Jun 27, 2013
by


darlliu



Browse files




stash some work







parent
20804688













Changes
6




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ e31e298b






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......














cybert/cd271ex





View file @ e31e298b





No preview for this file type













cybert/cd271ex.hs








View file @ e31e298b






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......














cybert/huanganalysis



0 → 100755




View file @ e31e298b





File added













cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b













import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs

























cybert/testload.tsv



0 → 100644







View file @ e31e298b





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
e31e298b


authored
Jun 27, 2013
by


darlliu



Browse files



Commit
e31e298b


authored
Jun 27, 2013
by


darlliu

e31e298bauthoredbydarlliu

stash some work






parent
20804688
















parent
20804688





parent












Changes
6
6


Expand all
Hide whitespace changes

Inline
Side-by-side






Expand all
Hide whitespace changes

Inline
Side-by-side




Expand all
Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










cybert/Cybert.hs








View file @ e31e298b






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......














cybert/cd271ex





View file @ e31e298b





No preview for this file type













cybert/cd271ex.hs








View file @ e31e298b






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......














cybert/huanganalysis



0 → 100755




View file @ e31e298b





File added













cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b













import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs

























cybert/testload.tsv



0 → 100644







View file @ e31e298b





This diff is collapsed.
Click to expand it.













cybert/Cybert.hs








View file @ e31e298b






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......












cybert/Cybert.hs








View file @ e31e298b








cybert/Cybert.hs










View file @ e31e298b


e31e298b



......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......






......@@ -16,6 +16,7 @@ module Cybert









 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 cybert_header,










 showCybertEntries,










 entriesByFold,










 entriesByPval,



......@@ -35,6 +36,7 @@ import Data.Maybe









import Data.Char










import System.IO










import System.IO.Error










import Control.Exception as E










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B



......@@ -71,7 +73,9 @@ cybert_entry = Cybert{









 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),










 ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),










 ("sds","std")])










hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int



......@@ -168,37 +172,50 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










getSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)










getSecondaryData cheader header ss =










 let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getNum header ss) keys










 in M.fromList (zip keys vals)










getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)










getSecondaryRefs cheader header ss =










 let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)










 keys = map (cheader M.!) pfxs










 vals = map (getText header ss) keys










 in M.fromList (zip keys (map (fromMaybe "") vals))










lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










lineToCybert cheader header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 genesym = getText header ss $ cheader M.! "genesym",










 --this is of maybe type










 pval = getNum header ss $ cheader M.! "pval",










 bf = getNum header ss $ cheader M.! "bf",










 bh = getNum header ss $ cheader M.! "bh",










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],










 --these are one or many










 , raw = s










 raw = s,










 --raw info










 secondaryRefs = getSecondaryRefs cheader header ss,










 secondaryData = getSecondaryData cheader header ss










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










loadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])










loadCybert cheader fname = E.catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 $ map (lineToCybert cheader header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))



......


 sample, collection, mean, bf, bh, sds, sample,collection,mean,bf,bh,sds, pval,ratio,secondaryRefs,secondaryData),pval,ratio,secondaryRefs,secondaryData), cybert_entry,cybert_entry, cybert_header,cybert_header, showCybertEntries,showCybertEntries, entriesByFold,entriesByFold, entriesByPval,entriesByPval,import Data.CharimportData.Charimport System.IOimportSystem.IOimport System.IO.ErrorimportSystem.IO.Errorimport Control.Exception as EimportControl.ExceptionasEimport qualified Data.Set as SimportqualifiedData.SetasSimport qualified Data.Map as MimportqualifiedData.MapasMimport qualified Data.ByteString.Char8 as BimportqualifiedData.ByteString.Char8asB secondaryData = M.fromList [("",0)],secondaryData=M.fromList[("",0)], raw = B.emptyraw=B.empty}}cybert_header = (M.fromList [("probe", "probe_id"), ("genesym","gene_sym"),cybert_header=(M.fromList[("probe","probe_id"),("genesym","gene_sym"), ("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"),("pval","pval"),("bf","bonferroni"),("bh","bh"),("ratio","ratiomean"),("mean","mean"), ("sds","std")])("sds","std")])hasher :: String -> Inthasher::String->Inthasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381hasher=foldl(\hc->33*h`xor`fromEnumc)5381cybertHash :: Cybert_entry -> IntcybertHash::Cybert_entry->IntgetNums header ss ids = let nums = map (getNum header ss) idsgetNumsheaderssids=letnums=map(getNumheaderss)ids in if length nums == 1 then Left (nums !! 0)iniflengthnums==1thenLeft(nums!!0) else Right $ filter (not . (== -1)) numselseRight$filter(not.(==-1))numslineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entrylineToCybert::(M.MapString(MaybeInt))->String->B.ByteString->Cybert_entry--take a header and an accumulator, then read the line and append the cybert entry--take a header and an accumulator, then read the line and append the cybert entrylineToCybert header fname line = readLine line wherelineToCybertheaderfnameline=readLinelinewheregetSecondaryData::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String Float)getSecondaryData::(M.MapStringString)->(M.MapString(MaybeInt))->[B.ByteString]->(M.MapStringFloat)getSecondaryData cheader header ss =getSecondaryDatacheaderheaderss= let pfxs = filter (\x->"Secondary_Data_" `isInfixOf` x) (M.keys cheader)letpfxs=filter(\x->"Secondary_Data_"`isInfixOf`x)(M.keyscheader) keys = map (cheader M.!) pfxskeys=map(cheaderM.!)pfxs vals = map (getNum header ss) keysvals=map(getNumheaderss)keys in M.fromList (zip keys vals)inM.fromList(zipkeysvals)getSecondaryRefs::(M.Map String String) ->(M.Map String (Maybe Int))-> [B.ByteString] -> (M.Map String String)getSecondaryRefs::(M.MapStringString)->(M.MapString(MaybeInt))->[B.ByteString]->(M.MapStringString)getSecondaryRefs cheader header ss =getSecondaryRefscheaderheaderss= let pfxs = filter (\x->"Secondary_Refs_" `isInfixOf` x) (M.keys cheader)letpfxs=filter(\x->"Secondary_Refs_"`isInfixOf`x)(M.keyscheader) keys = map (cheader M.!) pfxskeys=map(cheaderM.!)pfxs vals = map (getText header ss) keysvals=map(getTextheaderss)keys in M.fromList (zip keys (map (fromMaybe "") vals))inM.fromList(zipkeys(map(fromMaybe"")vals))lineToCybert :: (M.Map String String) -> (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entrylineToCybert::(M.MapStringString)->(M.MapString(MaybeInt))->String->B.ByteString->Cybert_entrylineToCybert cheader header fname line = readLine line wherelineToCybertcheaderheaderfnameline=readLinelinewhere readLine s = let ss = B.split '\t' s readLines=letss=B.split'\t's in if length ss /= M.size header then cybert_entryiniflengthss/=M.sizeheaderthencybert_entry else let cybt= cybert_entry {elseletcybt=cybert_entry{ probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),probe=B.unpack$ss`maybeGet`(headerM.!"probe_id"_id), probe = B.unpack $ ss `maybeGet` (header M.! (cheader M.! "probe")),probe=B.unpack$ss`maybeGet`(headerM.!((cheadercheader MM.!.! "probe")),) --this is a must--this is a must genesym = getText header ss "gene_sym",genesym=getTextheaderss"gene_sym", --this is of maybe type--this is of maybe type pval = getNum header ss "pval",pval=getNumheaderss"pval", bf = getNum header ss "bonferroni",bf=getNumheaderss"bonferroni", bh = getNum header ss "bh",bh=getNumheaderss"bh", collection = Just fname,collection=Justfname, genesym = getText header ss $ cheader M.! "genesym",genesym=getTextheaderss$cheaderM.!"genesym", --this is of maybe type--this is of maybe type pval = getNum header ss $ cheader M.! "pval",pval=getNumheaderss$cheaderM.!"pval", bf = getNum header ss $ cheader M.! "bf",bf=getNumheaderss$cheaderM.!"bf", bh = getNum header ss $ cheader M.! "bh",bh=getNumheaderss$cheaderM.!"bh", --these are -1 defaulted--these are -1 defaulted mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],mean=getNumsheaderss$map("mean"++)["c","e","1","2","3","4","5","6","7"], sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]sds=getNumsheaderss$map("std""std++)["c","e","1","2","3","4","5","6","7"] mean = getNums header ss $ map ( cheader M.! "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],mean=getNumsheaderss$map(cheadercheader MM.!.! "mean"++)["c","e","1","2","3","4","5","6","7"], sds = getNums header ss $ map ( cheader M.! "sds" ++ ) ["c","e","1","2","3","4","5","6","7"],sds=getNumsheaderss$map(cheadercheader MM.!.! "sds""sds++)["c","e","1","2","3","4","5","6","7"],, --these are one or many--these are one or many , raw = s,, raw=s raw = s,raw=s,, --raw info--raw info secondaryRefs = getSecondaryRefs cheader header ss,secondaryRefs=getSecondaryRefscheaderheaderss, secondaryData = getSecondaryData cheader header sssecondaryData=getSecondaryDatacheaderheaderss } in cybt}incybtloadCybert :: String -> IO (Maybe [Cybert_entry])loadCybert::String->IO(Maybe[Cybert_entry])loadCybert fname = catchloadCybertfname=catchloadCybert :: (M.Map String String)->String -> IO (Maybe [Cybert_entry])loadCybert::((MM..MapMap StringString StringString))->->String->IO(Maybe[Cybert_entry])loadCybert cheader fname = E.catchloadCybertcheadercheader fname=EE..catch (withFile fname ReadMode (\handle -> do(withFilefnameReadMode(\handle->do contents <- B.hGetContents handlecontents<-B.hGetContentshandle let mylines = B.split '\n' contentsletmylines=B.split'\n'contents if length mylines <= 1 then return Nothingiflengthmylines<=1thenreturnNothing else let header = buildHeader (head mylines);elseletheader=buildHeader(headmylines); output = Just (filter (not.isNothing.collection)output=Just(filter(not.isNothing.collection) $ map (lineToCybert header fname) (drop 1 mylines))$map(lineToCybertheaderfname)(drop1mylines)) $ map (lineToCybert cheader header fname) (drop 1 mylines))$map(lineToCybertcheadercheader headerfname)(drop1mylines)) in if output == (Just []) then return Nothinginifoutput==(Just[])thenreturnNothing else return outputelsereturnoutput ))))








cybert/cd271ex





View file @ e31e298b





No preview for this file type











cybert/cd271ex





View file @ e31e298b








cybert/cd271ex







View file @ e31e298b
e31e298b


No preview for this file type




No preview for this file type


No preview for this file type









cybert/cd271ex.hs








View file @ e31e298b






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......












cybert/cd271ex.hs








View file @ e31e298b








cybert/cd271ex.hs










View file @ e31e298b


e31e298b



......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......






......@@ -11,14 +11,15 @@ pfind x = map (filter (\y -> probe y == probe x))









 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0










 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)



......


 -- find entries with same probeid-- find entries with same probeidcountln = foldr (\z acc -> acc + (length z)) 0countln=foldr(\zacc->acc+(lengthz))0 -- count cross lists num-- count cross lists numloadCybert' = loadCybert cybert_headerloadCybert'=loadCybertcybert_headermain = domain=do all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"all_combined<-loadCybert"./CyberT_Output/unpaired/CD271_all_together0.txt" all_combined <- loadCybert' "./CyberT_Output/unpaired/CD271_all_together0.txt"all_combined<-loadCybert''"./CyberT_Output/unpaired/CD271_all_together0.txt" let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)letall_up=(entriesByPval0.05)$(entriesByUpDownTrue)(extractall_combined) all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)all_down=(entriesByPval0.05)$(entriesByUpDownFalse)(extractall_combined) ; exportCybert all_up "all_up_refs.txt";exportCybertall_up"all_up_refs.txt" ; exportCybert all_down "all_down_refs.txt";exportCybertall_down"all_down_refs.txt" ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"];onesM<-mapMloadCybert$map("./CyberT_Output/unpaired/CD271_one_one"++)["0.txt","1.txt","2.txt","3.txt"] ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ];pairsM<-mapMloadCybert["./CyberT_Output/unpaired/CD271_two_two_"++i++j++".txt"|i<-["1","2","3"],j<-["0","1"]] ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"];onesM<-mapMloadCybert''$map("./CyberT_Output/unpaired/CD271_one_one"++)["0.txt","1.txt","2.txt","3.txt"] ; pairsM <- mapM loadCybert' ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ];pairsM<-mapMloadCybert''["./CyberT_Output/unpaired/CD271_two_two_"++i++j++".txt"|i<-["1","2","3"],j<-["0","1"]] let ones = map extract (all_combined:onesM)letones=mapextract(all_combined:onesM) pairs = map extract (all_combined:pairsM)pairs=mapextract(all_combined:pairsM) let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)letup=map(entriesByPval0.05)(map(entriesByUpDownTrue)pairs)








cybert/huanganalysis



0 → 100755




View file @ e31e298b





File added











cybert/huanganalysis



0 → 100755




View file @ e31e298b








cybert/huanganalysis



0 → 100755






View file @ e31e298b
e31e298b


File added




File added


File added









cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b













import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs























cybert/huanganalysis.hs



0 → 100644







View file @ e31e298b








cybert/huanganalysis.hs



0 → 100644









View file @ e31e298b


e31e298b










import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs
























import Cybert










import Data.Maybe










import Data.List










import qualified Data.Map as M










import Control.Monad










import qualified Control.Exception as E










import System.Directory










import System.IO










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]










cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)










loadCybert' = loadCybert cheader










targetDirs= ["NatData_runs","XlinkData_runs"]





















{-utility fctns for writing to file -}










stringify sep xs = foldl1 (\x y ->x++sep++ y) xs





















writeString fname content = do










 withFile fname WriteMode (\handle -> do










 hPutStr handle content)





















mvroot :: FilePath -> FilePath -> IO Bool










mvroot root cur = do










 E.catch










 (










 do










 createDirectoryIfMissing True (cur ++"/ontargets")










 createDirectoryIfMissing True (cur ++"/scatters")










 createDirectoryIfMissing True (cur ++"/avgs")










 setCurrentDirectory (cur++"/runs")










 return True










 )










 (\e-> do










 let err = show (e::E.IOException)










 putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,










 "Err:", err]










 return False










 );





















{-extractTargets :: [Cybert_entry] -> IO()-}





















exportScatter fname xs = do










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xs










 (writeString ("../scatters/"++ fname)) (stringify "\n" ss)





















exportTargets fname xs = do










 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()










routine root cur = do










 flag<-mvroot root cur;










 if flag then do










 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root










 else do










 putStr "\nNothing is done\n"










 setCurrentDirectory root





















main = do










{-first get stuff from the "runs" folder-}










 curdir <- getCurrentDirectory;










 mapM (routine curdir) targetDirs













import CybertimportCybertimport Data.MaybeimportData.Maybeimport Data.ListimportData.Listimport qualified Data.Map as MimportqualifiedData.MapasMimport Control.MonadimportControl.Monadimport qualified Control.Exception as EimportqualifiedControl.ExceptionasEimport System.DirectoryimportSystem.Directoryimport System.IOimportSystem.IO{-import Data.Set(fromList, toList, union, empty)-}{-import Data.Set(fromList, toList, union, empty)-}cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]cheader'=M.fromList[("Secondary_Data_FDR","fdr"),("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]cheader = M.union (cheader') (M.adjust (\x->"accession") "probe" cybert_header)cheader=M.union(cheader')(M.adjust(\x->"accession")"probe"cybert_header)loadCybert' = loadCybert cheaderloadCybert'=loadCybertcheadertargetDirs= ["NatData_runs","XlinkData_runs"]targetDirs=["NatData_runs","XlinkData_runs"]{-utility fctns for writing to file -}{-utility fctns for writing to file -}stringify sep xs = foldl1 (\x y ->x++sep++ y) xsstringifysepxs=foldl1(\xy->x++sep++y)xswriteString fname content = dowriteStringfnamecontent=do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do hPutStr handle content)hPutStrhandlecontent)mvroot :: FilePath -> FilePath -> IO Boolmvroot::FilePath->FilePath->IOBoolmvroot root cur = domvrootrootcur=do E.catchE.catch (( dodo createDirectoryIfMissing True (cur ++"/ontargets")createDirectoryIfMissingTrue(cur++"/ontargets") createDirectoryIfMissing True (cur ++"/scatters")createDirectoryIfMissingTrue(cur++"/scatters") createDirectoryIfMissing True (cur ++"/avgs")createDirectoryIfMissingTrue(cur++"/avgs") setCurrentDirectory (cur++"/runs")setCurrentDirectory(cur++"/runs") return TruereturnTrue )) (\e-> do(\e->do let err = show (e::E.IOException)leterr=show(e::E.IOException) putStr $ stringify "\n" ["Error Chaging to directory\n" , cur,putStr$stringify"\n"["Error Chaging to directory\n",cur, "Err:", err]"Err:",err] return FalsereturnFalse ););{-extractTargets :: [Cybert_entry] -> IO()-}{-extractTargets :: [Cybert_entry] -> IO()-}exportScatter fname xs = doexportScatterfnamexs=do let ss = map (\x-> let d = secondaryData xletss=map(\x->letd=secondaryDatax in stringify "\t" [probe x, show (d M.! "pval1"),show (d M.! "fdr")]) xsinstringify"\t"[probex,show(dM.!"pval1"),show(dM.!"fdr")])xs (writeString ("../scatters/"++ fname)) (stringify "\n" ss)(writeString("../scatters/"++fname))(stringify"\n"ss)exportTargets fname xs = doexportTargetsfnamexs=do exportProbes xs ("../ontargets/" ++ fname)exportProbesxs("../ontargets/"++fname) let ss = map (\x-> let d = secondaryData xletss=map(\x->letd=secondaryDatax in stringify "\t"instringify"\t" [probe x, show (mean x), show (d M.! "pval1"),[probex,show(meanx),show(dM.!"pval1"), show (d M.! "fpr"), show (d M.! "fdr")]) xsshow(dM.!"fpr"),show(dM.!"fdr")])xs writeString ("../targetdetails/"++ fname) $ writeString("../targetdetails/"++fname)$ stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)stringify"\n"(["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)exportAVG fname fn xs = doexportAVGfnamefnxs=do let xxs = map fn xsletxxs=mapfnxs let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))letavg=(foldl1(+)xxs)/(fromIntegral(lengthxxs)) let gname = if length xs == 0 then "Unknown"letgname=iflengthxs==0then"Unknown" else fromMaybe "Unknown" (collection $ (xs !! 0))elsefromMaybe"Unknown"(collection$(xs!!0)) let ss = gname ++ "\t" ++ (show avg) ++ "\n"letss=gname++"\t"++(showavg)++"\n" withFile fname AppendMode (\handle -> dowithFilefnameAppendMode(\handle->do hPutStr handle ss)hPutStrhandless)subroutine:: (Maybe [Cybert_entry]) -> IO()subroutine::(Maybe[Cybert_entry])->IO()subroutine xs = dosubroutinexs=do let xxs'= fromMaybe [] xsletxxs'=fromMaybe[]xs let fname = if length xxs' == 0 then "Nill.dummy"letfname=iflengthxxs'==0then"Nill.dummy" else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)elsefromMaybe"Nill.dummy"(collection$xxs'!!0) ; exportScatter fname xxs';exportScatterfnamexxs' ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs';exportAVG"../avgs/Total_AVG_pval.tsv"pvalxxs' ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs';exportAVG"../avgs/Total_AVG_fdr.tsv"(\x->letd=secondaryDataxindM.!"fdr")xxs' {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}{-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-} let xxs = filter (\x -> let d = (secondaryData x)letxxs=filter(\x->letd=(secondaryDatax) in if (d M.! "fdr") < 0.0 then (pval x) < 0.05inif(dM.!"fdr")<0.0then(pvalx)<0.05 {-in case where beta fitting fails-}{-in case where beta fitting fails-} else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1else(dM.!"pval1")<0.05&&(dM.!"fdr")<0.1 ) xxs')xxs' ; exportTargets fname xxs;exportTargetsfnamexxs ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs';exportAVG"../avgs/Targets_AVG_pval.tsv"pvalxxs' ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs';exportAVG"../avgs/Targets_AVG_fdr.tsv"(\x->letd=secondaryDataxindM.!"fdr")xxs' {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}{-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}routine :: FilePath -> FilePath -> IO()routine::FilePath->FilePath->IO()routine root cur = doroutinerootcur=do flag<-mvroot root cur;flag<-mvrootrootcur; if flag then doifflagthendo filenames' <- getDirectoryContents "."filenames'<-getDirectoryContents"." let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'letfilenames=filter(\x->"_cybert_result.tsv"`isInfixOf`x)filenames' collections <- mapM loadCybert' filenamescollections<-mapMloadCybert'filenames {-acquire cybert entries -}{-acquire cybert entries -} mapM subroutine collectionsmapMsubroutinecollections {-use pval of 0.05 and fpr of 0.1 to filter-}{-use pval of 0.05 and fpr of 0.1 to filter-} putStr $ "\nHandled" ++ cur ++"\n"putStr$"\nHandled"++cur++"\n" setCurrentDirectory rootsetCurrentDirectoryroot else doelsedo putStr "\nNothing is done\n"putStr"\nNothing is done\n" setCurrentDirectory rootsetCurrentDirectoryrootmain = domain=do{-first get stuff from the "runs" folder-}{-first get stuff from the "runs" folder-} curdir <- getCurrentDirectory;curdir<-getCurrentDirectory; mapM (routine curdir) targetDirsmapM(routinecurdir)targetDirs








cybert/testload.tsv



0 → 100644







View file @ e31e298b





This diff is collapsed.
Click to expand it.











cybert/testload.tsv



0 → 100644







View file @ e31e298b








cybert/testload.tsv



0 → 100644









View file @ e31e298b


e31e298b


This diff is collapsed.
Click to expand it.




This diff is collapsed.
Click to expand it.


This diff is collapsed.
Click to expand it.










Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






