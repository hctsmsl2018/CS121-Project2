



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

b131fd75















Commit
b131fd75


authored
Jan 08, 2015
by


Johannes Lerch



Browse files




Bugfix, Helper functions, and renaming







parent
05779cea













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ b131fd75






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......














src/heros/alias/AccessPathUtil.java








View file @ b131fd75






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......














src/heros/alias/FlowFunction.java








View file @ b131fd75






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......














test/heros/alias/TestHelper.java








View file @ b131fd75






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

b131fd75















Commit
b131fd75


authored
Jan 08, 2015
by


Johannes Lerch



Browse files




Bugfix, Helper functions, and renaming







parent
05779cea













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ b131fd75






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......














src/heros/alias/AccessPathUtil.java








View file @ b131fd75






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......














src/heros/alias/FlowFunction.java








View file @ b131fd75






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......














test/heros/alias/TestHelper.java








View file @ b131fd75






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

b131fd75







Open sidebar



Joshua Garcia heros
Commits

b131fd75




Open sidebar

Joshua Garcia heros
Commits

b131fd75


Joshua GarciaherosherosCommits
b131fd75








Commit
b131fd75


authored
Jan 08, 2015
by


Johannes Lerch



Browse files




Bugfix, Helper functions, and renaming







parent
05779cea













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ b131fd75






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......














src/heros/alias/AccessPathUtil.java








View file @ b131fd75






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......














src/heros/alias/FlowFunction.java








View file @ b131fd75






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......














test/heros/alias/TestHelper.java








View file @ b131fd75






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
b131fd75


authored
Jan 08, 2015
by


Johannes Lerch



Browse files




Bugfix, Helper functions, and renaming







parent
05779cea













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ b131fd75






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......














src/heros/alias/AccessPathUtil.java








View file @ b131fd75






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......














src/heros/alias/FlowFunction.java








View file @ b131fd75






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......














test/heros/alias/TestHelper.java








View file @ b131fd75






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
b131fd75


authored
Jan 08, 2015
by


Johannes Lerch



Browse files



Commit
b131fd75


authored
Jan 08, 2015
by


Johannes Lerch

b131fd75authoredbyJohannes Lerch

Bugfix, Helper functions, and renaming






parent
05779cea
















parent
05779cea





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPath.java








View file @ b131fd75






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......














src/heros/alias/AccessPathUtil.java








View file @ b131fd75






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......














src/heros/alias/FlowFunction.java








View file @ b131fd75






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......














test/heros/alias/TestHelper.java








View file @ b131fd75






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......














src/heros/alias/AccessPath.java








View file @ b131fd75






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......












src/heros/alias/AccessPath.java








View file @ b131fd75








src/heros/alias/AccessPath.java










View file @ b131fd75


b131fd75



......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......






......@@ -20,8 +20,8 @@ import com.google.common.collect.Sets;









@SuppressWarnings("unchecked")










public class AccessPath<FieldRef> {





















 private FieldRef[] accesses;










 private Set<FieldRef>[] exclusions;










 private final FieldRef[] accesses;










 private final Set<FieldRef>[] exclusions;










 










 public AccessPath() {










 accesses = (FieldRef[]) new Object[0];



......@@ -59,6 +59,31 @@ public class AccessPath<FieldRef> {









 return new ExclusionSet(index);










 }










 










 public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {










 if(exclusions.length > 0) 










 throw new IllegalStateException();










 










 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);










 System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);










 return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);










 }





















 public AccessPath<FieldRef> removeFirstAccessIfAvailable() {










 if(accesses.length > 0)










 return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);










 else if(exclusions.length > 0)










 return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));










 else










 return this;










 }





















 public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {










 if(hasExclusions())










 return getExclusions(0).addExclusion(fieldRef);










 else










 return appendExcludedFieldReference(fieldRef);










 }










 










 public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {










 Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);










 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);



......@@ -155,9 +180,10 @@ public class AccessPath<FieldRef> {









 this.index = index;










 }










 










 public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {










 public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {










 HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);










 newExclusions.add(exclusion);










 for(FieldRef excl : exclusion)










 newExclusions.add(excl);










 Set<FieldRef>[] newExclusionsArray = exclusions.clone();










 newExclusionsArray[index] = newExclusions;










 return new AccessPath<FieldRef>(accesses, newExclusionsArray);



......


@SuppressWarnings("unchecked")@SuppressWarnings("unchecked")public class AccessPath<FieldRef> {publicclassAccessPath<FieldRef>{ private FieldRef[] accesses;privateFieldRef[]accesses; private Set<FieldRef>[] exclusions;privateSet<FieldRef>[]exclusions; private final FieldRef[] accesses;privatefinalfinal FieldRef[]accesses; private final Set<FieldRef>[] exclusions;privatefinalfinal Set<FieldRef>[]exclusions;  public AccessPath() {publicAccessPath(){ accesses = (FieldRef[]) new Object[0];accesses=(FieldRef[])newObject[0]; return new ExclusionSet(index);returnnewExclusionSet(index); }}  public AccessPath<FieldRef> append(AccessPath<FieldRef> accessPath) {publicAccessPath<FieldRef>append(AccessPath<FieldRef>accessPath){ if(exclusions.length > 0) if(exclusions.length>0) throw new IllegalStateException();thrownewIllegalStateException();  FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length + accessPath.accesses.length);FieldRef[]newAccesses=Arrays.copyOf(accesses,accesses.length+accessPath.accesses.length); System.arraycopy(accessPath.accesses, 0, newAccesses, accesses.length, accessPath.accesses.length);System.arraycopy(accessPath.accesses,0,newAccesses,accesses.length,accessPath.accesses.length); return new AccessPath<FieldRef>(newAccesses, accessPath.exclusions);returnnewAccessPath<FieldRef>(newAccesses,accessPath.exclusions); }} public AccessPath<FieldRef> removeFirstAccessIfAvailable() {publicAccessPath<FieldRef>removeFirstAccessIfAvailable(){ if(accesses.length > 0)if(accesses.length>0) return new AccessPath<FieldRef>(Arrays.copyOfRange(accesses, 1, accesses.length), exclusions);returnnewAccessPath<FieldRef>(Arrays.copyOfRange(accesses,1,accesses.length),exclusions); else if(exclusions.length > 0)elseif(exclusions.length>0) return new AccessPath<FieldRef>(accesses, Arrays.copyOfRange(exclusions, 1, exclusions.length));returnnewAccessPath<FieldRef>(accesses,Arrays.copyOfRange(exclusions,1,exclusions.length)); elseelse return this;returnthis; }} public AccessPath<FieldRef> mergeExcludedFieldReference(FieldRef... fieldRef) {publicAccessPath<FieldRef>mergeExcludedFieldReference(FieldRef...fieldRef){ if(hasExclusions())if(hasExclusions()) return getExclusions(0).addExclusion(fieldRef);returngetExclusions(0).addExclusion(fieldRef); elseelse return appendExcludedFieldReference(fieldRef);returnappendExcludedFieldReference(fieldRef); }}  public AccessPath<FieldRef> appendExcludedFieldReference(FieldRef... fieldReferences) {publicAccessPath<FieldRef>appendExcludedFieldReference(FieldRef...fieldReferences){ Set<FieldRef>[] newExclusionsArray = Arrays.copyOf(exclusions, exclusions.length+1);Set<FieldRef>[]newExclusionsArray=Arrays.copyOf(exclusions,exclusions.length+1); newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);newExclusionsArray[exclusions.length]=Sets.newHashSet(fieldReferences); this.index = index;this.index=index; }}  public AccessPath<FieldRef> addExclusion(FieldRef exclusion) {publicAccessPath<FieldRef>addExclusion(FieldRefexclusion){ public AccessPath<FieldRef> addExclusion(FieldRef... exclusion) {publicAccessPath<FieldRef>addExclusion(FieldRef......exclusion){ HashSet<FieldRef> newExclusions = Sets.newHashSet(exclusions[index]);HashSet<FieldRef>newExclusions=Sets.newHashSet(exclusions[index]); newExclusions.add(exclusion);newExclusions.add(exclusion); for(FieldRef excl : exclusion)for(FieldRefexcl:exclusion) newExclusions.add(excl);newExclusions.add(excl); Set<FieldRef>[] newExclusionsArray = exclusions.clone();Set<FieldRef>[]newExclusionsArray=exclusions.clone(); newExclusionsArray[index] = newExclusions;newExclusionsArray[index]=newExclusions; return new AccessPath<FieldRef>(accesses, newExclusionsArray);returnnewAccessPath<FieldRef>(accesses,newExclusionsArray);








src/heros/alias/AccessPathUtil.java








View file @ b131fd75






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......












src/heros/alias/AccessPathUtil.java








View file @ b131fd75








src/heros/alias/AccessPathUtil.java










View file @ b131fd75


b131fd75



......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......






......@@ -18,7 +18,10 @@ import com.google.common.base.Optional;









public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());



......


public class AccessPathUtil {publicclassAccessPathUtil{ public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {publicstatic<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>booleanisPrefixOf(DprefixCandidate,Dfact){ if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue())) if(prefixCandidate.getBaseValue() == null) {if(prefixCandidate.getBaseValue()==null){ if(fact.getBaseValue() != null)if(fact.getBaseValue()!=null) return false;returnfalse; } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))}elseif(!prefixCandidate.getBaseValue().equals(fact.getBaseValue())) return false;returnfalse;  return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());returnprefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ b131fd75








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ b131fd75


b131fd75



......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......






......@@ -14,7 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;










import heros.solver.IFDSSolver;



......@@ -221,11 +221,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(M sCalledProcN: callees) { //still line 14










 //compute the call-flow function










 FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);










 










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 //for each result node of the call-flow function










 for(AnnotatedFact<FieldRef, D> d3: res) {










 for(ConstrainedFact<FieldRef, D> d3: res) {










 //for each callee's start point(s)










 for(N sP: startPointsOf) {










 //create initial self-loop



......@@ -260,7 +260,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }



......@@ -274,7 +274,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //process intra-procedural flows along call-to-return flow functions










 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }



......@@ -327,7 +327,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the callee's start node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunction










 (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {










 return callFlowFunction.computeTargets(d2);










 }



......@@ -341,7 +341,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d2 The abstraction at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunction










 (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {










 return callToReturnFlowFunction.computeTargets(d2);










 }



......@@ -383,10 +383,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);










 










 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }



......@@ -404,8 +404,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }



......@@ -427,7 +427,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param callSite The call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunction










 (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {










 return retFunction.computeTargets(d2);










 }



......@@ -444,8 +444,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 for (N m : icfg.getSuccsOf(n)) {










 FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);










 Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (AnnotatedFact<FieldRef, D> d3 : res) {










 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }



......@@ -515,7 +515,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * @param d1 The abstraction at the current node










	 * @return The set of abstractions at the successor node










	 */










 protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunction










 protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunction










 (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {










 return flowFunction.computeTargets(d2);










 }



......


import heros.FlowFunctionCache;importheros.FlowFunctionCache;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.alias.FlowFunction.AnnotatedFact;importheros.alias.FlowFunction.AnnotatedFactAnnotat;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFactConstrain;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;import heros.solver.CountingThreadPoolExecutor;importheros.solver.CountingThreadPoolExecutor;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver; for(M sCalledProcN: callees) { //still line 14for(MsCalledProcN:callees){//still line 14 //compute the call-flow function//compute the call-flow function FlowFunction<FieldRef, D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);FlowFunction<FieldRef,D>function=flowFunctions.getCallFlowFunction(n,sCalledProcN); Set<AnnotatedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);Set<AnnotatedFactAnnotat<FieldRef,D>>res=computeCallFlowFunction(function,d1,d2); Set<ConstrainedFact<FieldRef, D>> res = computeCallFlowFunction(function, d1, d2);Set<ConstrainedFactConstrain<FieldRef,D>>res=computeCallFlowFunction(function,d1,d2);  Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);Collection<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); //for each result node of the call-flow function//for each result node of the call-flow function for(AnnotatedFact<FieldRef, D> d3: res) {for(AnnotatedFactAnnotat<FieldRef,D>d3:res){ for(ConstrainedFact<FieldRef, D> d3: res) {for(ConstrainedFactConstrain<FieldRef,D>d3:res){ //for each callee's start point(s)//for each callee's start point(s) for(N sP: startPointsOf) {for(NsP:startPointsOf){ //create initial self-loop//create initial self-loop //compute return-flow function//compute return-flow function FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {for(AnnotatedFactAnnotat<FieldRef,D>d5:computeReturnFlowFunction(retFunction,d4.get(),n)){ for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {for(ConstrainedFactConstrain<FieldRef,D>d5:computeReturnFlowFunction(retFunction,d4.get(),n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);propagate(newPathEdge<>(d1,retSiteN,d5p_restoredCtx),n,false); }} //process intra-procedural flows along call-to-return flow functions//process intra-procedural flows along call-to-return flow functions for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);FlowFunction<FieldRef,D>callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN); for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))for(AnnotatedFactAnnotat<FieldRef,D>d3:computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) for(ConstrainedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))for(ConstrainedFactConstrain<FieldRef,D>d3:computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);propagate(newPathEdge<>(d1,returnSiteN,d3.getFact()),n,false); }} }}	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @return The set of caller-side abstractions at the callee's start node	 * @return The set of caller-side abstractions at the callee's start node	 */	 */ protected Set<AnnotatedFact<FieldRef, D>> computeCallFlowFunctionprotectedSet<AnnotatedFactAnnotat<FieldRef,D>>computeCallFlowFunction protected Set<ConstrainedFact<FieldRef, D>> computeCallFlowFunctionprotectedSet<ConstrainedFactConstrain<FieldRef,D>>computeCallFlowFunction (FlowFunction<FieldRef, D> callFlowFunction, D d1, D d2) {(FlowFunction<FieldRef,D>callFlowFunction,Dd1,Dd2){ return callFlowFunction.computeTargets(d2);returncallFlowFunction.computeTargets(d2); }}	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */ protected Set<AnnotatedFact<FieldRef, D>> computeCallToReturnFlowFunctionprotectedSet<AnnotatedFactAnnotat<FieldRef,D>>computeCallToReturnFlowFunction protected Set<ConstrainedFact<FieldRef, D>> computeCallToReturnFlowFunctionprotectedSet<ConstrainedFactConstrain<FieldRef,D>>computeCallToReturnFlowFunction (FlowFunction<FieldRef, D> callToReturnFlowFunction, D d1, D d2) {(FlowFunction<FieldRef,D>callToReturnFlowFunction,Dd1,Dd2){ return callToReturnFlowFunction.computeTargets(d2);returncallToReturnFlowFunction.computeTargets(d2); }} if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {if(AccessPathUtil.isPrefixOf(d1,incomingEdge.getCalleeSourceFact())){ Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);Optional<D>concreteCalleeExitFact=AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(),summaryEdge); if(concreteCalleeExitFact.isPresent()) {if(concreteCalleeExitFact.isPresent()){ Set<AnnotatedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);Set<AnnotatedFactAnnotat<FieldRef,D>>callerTargetFacts=computeReturnFlowFunction(retFunction,concreteCalleeExitFact.get(),callSite); Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);Set<ConstrainedFactConstrain<FieldRef,D>>callerTargetFacts=computeReturnFlowFunction(retFunction,concreteCalleeExitFact.get(),callSite);  // for each incoming-call value// for each incoming-call value for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {for(AnnotatedFactAnnotat<FieldRef,D>callerTargetAnnotatedFact:callerTargetFacts){ for (ConstrainedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {for(ConstrainedFactConstrain<FieldRef,D>callerTargetAnnotatedFact:callerTargetFacts){ D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());DcallerTargetFact=restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(),callerTargetAnnotatedFact.getFact()); propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);propagate(newPathEdge<>(incomingEdge.getCallerSourceFact(),retSiteC,callerTargetFact),callSite,false); }} for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);Set<AnnotatedFactAnnotat<FieldRef,D>>targets=computeReturnFlowFunction(retFunction,d2,c); for(AnnotatedFact<FieldRef, D> d5: targets)for(AnnotatedFactAnnotat<FieldRef,D>d5:targets) Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);Set<ConstrainedFactConstrain<FieldRef,D>>targets=computeReturnFlowFunction(retFunction,d2,c); for(ConstrainedFact<FieldRef, D> d5: targets)for(ConstrainedFactConstrain<FieldRef,D>d5:targets) propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);propagate(newPathEdge<>(zeroValue,retSiteC,d5.getFact()),c,true); }} }}	 * @param callSite The call site	 * @param callSite The call site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */ protected Set<AnnotatedFact<FieldRef, D>> computeReturnFlowFunctionprotectedSet<AnnotatedFactAnnotat<FieldRef,D>>computeReturnFlowFunction protected Set<ConstrainedFact<FieldRef, D>> computeReturnFlowFunctionprotectedSet<ConstrainedFactConstrain<FieldRef,D>>computeReturnFlowFunction (FlowFunction<FieldRef, D> retFunction, D d2, N callSite) {(FlowFunction<FieldRef,D>retFunction,Dd2,NcallSite){ return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); }}  for (N m : icfg.getSuccsOf(n)) {for(Nm:icfg.getSuccsOf(n)){ FlowFunction<FieldRef, D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);FlowFunction<FieldRef,D>flowFunction=flowFunctions.getNormalFlowFunction(n,m); Set<AnnotatedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);Set<AnnotatedFactAnnotat<FieldRef,D>>res=computeNormalFlowFunction(flowFunction,d1,d2); for (AnnotatedFact<FieldRef, D> d3 : res) {for(AnnotatedFactAnnotat<FieldRef,D>d3:res){ Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);Set<ConstrainedFactConstrain<FieldRef,D>>res=computeNormalFlowFunction(flowFunction,d1,d2); for (ConstrainedFact<FieldRef, D> d3 : res) {for(ConstrainedFactConstrain<FieldRef,D>d3:res){ if(d3.getConstraint() != null) {if(d3.getConstraint()!=null){ propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));propagateConstrained(d3.getConstraint(),newPathEdge<>(applyConstraint(d3.getConstraint(),d1),m,d3.getFact())); }}	 * @param d1 The abstraction at the current node	 * @param d1 The abstraction at the current node	 * @return The set of abstractions at the successor node	 * @return The set of abstractions at the successor node	 */	 */ protected Set<AnnotatedFact<FieldRef, D>> computeNormalFlowFunctionprotectedSet<AnnotatedFactAnnotat<FieldRef,D>>computeNormalFlowFunction protected Set<ConstrainedFact<FieldRef, D>> computeNormalFlowFunctionprotectedSet<ConstrainedFactConstrain<FieldRef,D>>computeNormalFlowFunction (FlowFunction<FieldRef, D> flowFunction, D d1, D d2) {(FlowFunction<FieldRef,D>flowFunction,Dd1,Dd2){ return flowFunction.computeTargets(d2);returnflowFunction.computeTargets(d2); }}








src/heros/alias/FlowFunction.java








View file @ b131fd75






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......












src/heros/alias/FlowFunction.java








View file @ b131fd75








src/heros/alias/FlowFunction.java










View file @ b131fd75


b131fd75



......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......






......@@ -36,22 +36,19 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 /**










	 * Returns the target values reachable from the source.










	 */










 Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);










 Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);










 










 //TODO: rename to ConstrainedFact










 public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {










 










 private D fact;










 private Constraint<FieldRef> constraint;










 










 //TODO: Refactor API to make things more intuitive










 /**










		 * 










		 * @param fact










		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value










		 * @param writtenField










		 */










 public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {










 public ConstrainedFact(D fact) {










 this.fact = fact;










 this.constraint = null;










 }










 










 public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {










 this.fact = fact;










 this.constraint = constraint;










 }



......@@ -79,9 +76,9 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof AnnotatedFact))










 if (!(obj instanceof ConstrainedFact))










 return false;










 AnnotatedFact other = (AnnotatedFact) obj;










 ConstrainedFact other = (ConstrainedFact) obj;










 if (constraint == null) {










 if (other.constraint != null)










 return false;



......@@ -114,10 +111,7 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef




















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 if(accPath.hasExclusions())










 return accPath.getExclusions(0).addExclusion(fieldRef);










 else










 return accPath.appendExcludedFieldReference(fieldRef);










 return accPath.mergeExcludedFieldReference(fieldRef);










 }










 










 @Override



......


 /**/**	 * Returns the target values reachable from the source.	 * Returns the target values reachable from the source.	 */	 */ Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);Set<AnnotatedFactAnnotat<FieldRef,D>>computeTargets(Dsource); Set<ConstrainedFact<FieldRef, D>> computeTargets(D source);Set<ConstrainedFactConstrain<FieldRef,D>>computeTargets(Dsource);  //TODO: rename to ConstrainedFact//TODO: rename to ConstrainedFact public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {publicstaticclassAnnotatedFact<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>{ public static class ConstrainedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {publicstaticclassConstrainedFact<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>{  private D fact;privateDfact; private Constraint<FieldRef> constraint;privateConstraint<FieldRef>constraint;  //TODO: Refactor API to make things more intuitive//TODO: Refactor API to make things more intuitive /**/**		 * 		 * 		 * @param fact		 * @param fact		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param writtenField		 * @param writtenField		 */		 */ public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {publicAnnotatedFact(Dfact,Constraint<FieldRef>constraint){ public ConstrainedFact(D fact) {publicConstrainedFact(Dfact){ this.fact = fact;this.fact=fact; this.constraint = null;this.constraint=null; }}  public ConstrainedFact(D fact, Constraint<FieldRef> constraint) {publicConstrainedFact(Dfact,Constraint<FieldRef>constraint){ this.fact = fact;this.fact=fact; this.constraint = constraint;this.constraint=constraint; }} return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof AnnotatedFact))if(!(objinstanceofAnnotatedFactAnnotat)) if (!(obj instanceof ConstrainedFact))if(!(objinstanceofConstrainedFactConstrain)) return false;returnfalse; AnnotatedFact other = (AnnotatedFact) obj;AnnotatedFactAnnotatother=(AnnotatedFactAnnotat)obj; ConstrainedFact other = (ConstrainedFact) obj;ConstrainedFactConstrainother=(ConstrainedFactConstrain)obj; if (constraint == null) {if(constraint==null){ if (other.constraint != null)if(other.constraint!=null) return false;returnfalse; @Override@Override public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {publicAccessPath<FieldRef>applyToAccessPath(AccessPath<FieldRef>accPath){ if(accPath.hasExclusions())if(accPath.hasExclusions()) return accPath.getExclusions(0).addExclusion(fieldRef);returnaccPath.getExclusions(0).addExclusion(fieldRef); elseelse return accPath.appendExcludedFieldReference(fieldRef);returnaccPath.appendExcludedFieldReference(fieldRef); return accPath.mergeExcludedFieldReference(fieldRef);returnaccPath.mergeExcludedFieldReference(fieldRef); }}  @Override@Override








test/heros/alias/TestHelper.java








View file @ b131fd75






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......












test/heros/alias/TestHelper.java








View file @ b131fd75








test/heros/alias/TestHelper.java










View file @ b131fd75


b131fd75



......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......






......@@ -11,7 +11,7 @@









package heros.alias;





















import static org.junit.Assert.assertTrue;










import heros.alias.FlowFunction.AnnotatedFact;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.alias.IFDSTabulationProblem;










import heros.InterproceduralCFG;



......@@ -103,9 +103,9 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {










 AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];










 ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }



......@@ -302,11 +302,11 @@ public class TestHelper {









 public static class ExpectedFlowFunction {





















 public final Fact source;










 public final AnnotatedFact<String, Fact>[] targets;










 public final ConstrainedFact<String, Fact>[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {










 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -486,8 +486,8 @@ public class TestHelper {









 private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<String, Fact>() {










 @Override










 public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {










 Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();










 public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source)) {



......


package heros.alias;packageheros.alias;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import heros.alias.FlowFunction.AnnotatedFact;importheros.alias.FlowFunction.AnnotatedFactAnnotat;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFactConstrain;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;import heros.alias.IFDSTabulationProblem;importheros.alias.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG; }}  public static ExpectedFlowFunction flow(int times, String source, Constraint<String> constraint, String... targets) {publicstaticExpectedFlowFunctionflow(inttimes,Stringsource,Constraint<String>constraint,String...targets){ AnnotatedFact<String, Fact>[] targetFacts = new AnnotatedFact[targets.length];AnnotatedFactAnnotat<String,Fact>[]targetFacts=newAnnotatedFactAnnotat[targets.length]; ConstrainedFact<String, Fact>[] targetFacts = new ConstrainedFact[targets.length];ConstrainedFactConstrain<String,Fact>[]targetFacts=newConstrainedFactConstrain[targets.length]; for(int i=0; i<targets.length; i++) {for(inti=0;i<targets.length;i++){ targetFacts[i] = new AnnotatedFact<String, Fact>(new Fact(targets[i]), constraint);targetFacts[i]=newAnnotatedFactAnnotat<String,Fact>(newFact(targets[i]),constraint); targetFacts[i] = new ConstrainedFact<String, Fact>(new Fact(targets[i]), constraint);targetFacts[i]=newConstrainedFactConstrain<String,Fact>(newFact(targets[i]),constraint); }} return new ExpectedFlowFunction(times, new Fact(source), targetFacts);returnnewExpectedFlowFunction(times,newFact(source),targetFacts); }} public static class ExpectedFlowFunction {publicstaticclassExpectedFlowFunction{ public final Fact source;publicfinalFactsource; public final AnnotatedFact<String, Fact>[] targets;publicfinalAnnotatedFactAnnotat<String,Fact>[]targets; public final ConstrainedFact<String, Fact>[] targets;publicfinalConstrainedFactConstrain<String,Fact>[]targets; public Edge edge;publicEdgeedge; private int times;privateinttimes; public ExpectedFlowFunction(int times, Fact source, AnnotatedFact<String, Fact>... targets) {publicExpectedFlowFunction(inttimes,Factsource,AnnotatedFactAnnotat<String,Fact>...targets){ public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<String, Fact>... targets) {publicExpectedFlowFunction(inttimes,Factsource,ConstrainedFactConstrain<String,Fact>...targets){ this.times = times;this.times=times; this.source = source;this.source=source; this.targets = targets;this.targets=targets; private FlowFunction<String, Fact> createFlowFunction(final Edge edge) {privateFlowFunction<String,Fact>createFlowFunction(finalEdgeedge){ return new FlowFunction<String, Fact>() {returnnewFlowFunction<String,Fact>(){ @Override@Override public Set<AnnotatedFact<String, Fact>> computeTargets(Fact source) {publicSet<AnnotatedFactAnnotat<String,Fact>>computeTargets(Factsource){ Set<AnnotatedFact<String, Fact>> result = Sets.newHashSet();Set<AnnotatedFactAnnotat<String,Fact>>result=Sets.newHashSet(); public Set<ConstrainedFact<String, Fact>> computeTargets(Fact source) {publicSet<ConstrainedFactConstrain<String,Fact>>computeTargets(Factsource){ Set<ConstrainedFact<String, Fact>> result = Sets.newHashSet();Set<ConstrainedFactConstrain<String,Fact>>result=Sets.newHashSet(); boolean found = false;booleanfound=false; for (ExpectedFlowFunction ff : edge.flowFunctions) {for(ExpectedFlowFunctionff:edge.flowFunctions){ if (ff.source.equals(source)) {if(ff.source.equals(source)){









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






