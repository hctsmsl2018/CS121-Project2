



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

4b103811















Commit
4b103811


authored
Jan 28, 2013
by


Eric Bodden



Browse files




refactoring: autoAddZero is now set in IFDSTabulationProblem







parent
aa036d4b













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 4b103811








...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}















src/heros/solver/IDESolver.java








View file @ 4b103811








...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......















src/heros/solver/IFDSSolver.java








View file @ 4b103811








...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......















src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

4b103811















Commit
4b103811


authored
Jan 28, 2013
by


Eric Bodden



Browse files




refactoring: autoAddZero is now set in IFDSTabulationProblem







parent
aa036d4b













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 4b103811








...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}















src/heros/solver/IDESolver.java








View file @ 4b103811








...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......















src/heros/solver/IFDSSolver.java








View file @ 4b103811








...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......















src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

4b103811







Open sidebar



Joshua Garcia heros
Commits

4b103811




Open sidebar

Joshua Garcia heros
Commits

4b103811


Joshua GarciaherosherosCommits
4b103811








Commit
4b103811


authored
Jan 28, 2013
by


Eric Bodden



Browse files




refactoring: autoAddZero is now set in IFDSTabulationProblem







parent
aa036d4b













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 4b103811








...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}















src/heros/solver/IDESolver.java








View file @ 4b103811








...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......















src/heros/solver/IFDSSolver.java








View file @ 4b103811








...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......















src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
4b103811


authored
Jan 28, 2013
by


Eric Bodden



Browse files




refactoring: autoAddZero is now set in IFDSTabulationProblem







parent
aa036d4b













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/IFDSTabulationProblem.java








View file @ 4b103811








...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}















src/heros/solver/IDESolver.java








View file @ 4b103811








...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......















src/heros/solver/IFDSSolver.java








View file @ 4b103811








...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......















src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
4b103811


authored
Jan 28, 2013
by


Eric Bodden



Browse files



Commit
4b103811


authored
Jan 28, 2013
by


Eric Bodden

4b103811authoredbyEric Bodden

refactoring: autoAddZero is now set in IFDSTabulationProblem






parent
aa036d4b
















parent
aa036d4b





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/IFDSTabulationProblem.java








View file @ 4b103811








...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}















src/heros/solver/IDESolver.java








View file @ 4b103811








...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......















src/heros/solver/IFDSSolver.java








View file @ 4b103811








...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......















src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}















src/heros/IFDSTabulationProblem.java








View file @ 4b103811








...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}













src/heros/IFDSTabulationProblem.java








View file @ 4b103811








src/heros/IFDSTabulationProblem.java










View file @ 4b103811


4b103811





...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}









...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}






...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>
...@@ -72,4 +72,10 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>






	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.





	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.







	 */





	 */







 boolean followReturnsPastSeeds();





 boolean followReturnsPastSeeds();









 









 /**









	 * If true, the solver will automatically add the zero value to each flow-function call's result set.









	 * @see #zeroValue()









	 */









 boolean autoAddZero();







}




}


	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 */	 */	 */	 */ boolean followReturnsPastSeeds();booleanfollowReturnsPastSeeds(); boolean followReturnsPastSeeds();booleanfollowReturnsPastSeeds();  /**/**	 * If true, the solver will automatically add the zero value to each flow-function call's result set.	 * If true, the solver will automatically add the zero value to each flow-function call's result set.	 * @see #zeroValue()	 * @see #zeroValue()	 */	 */ boolean autoAddZero();booleanautoAddZero();}}}}








src/heros/solver/IDESolver.java








View file @ 4b103811








...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......













src/heros/solver/IDESolver.java








View file @ 4b103811








src/heros/solver/IDESolver.java










View file @ 4b103811


4b103811





...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......









...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......






...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -135,39 +135,30 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")





 @DontSynchronize("readOnly")







 protected final boolean followReturnsPastSeeds;





 protected final boolean followReturnsPastSeeds;







 









 /**









	 * Creates a solver for the given problem, which caches flow functions and edge functions.









	 * The solver must then be started by calling {@link #solve()}.









	 */









 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {









 this(tabulationProblem, true);









 }























 /**





 /**







	 * Creates a solver for the given problem, which caches flow functions and edge functions.





	 * Creates a solver for the given problem, which caches flow functions and edge functions.







	 * The solver must then be started by calling {@link #solve()}.





	 * The solver must then be started by calling {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {







 this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);





 this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);







 }





 }





















 /**





 /**







	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling





	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling







	 * {@link #solve()}.





	 * {@link #solve()}.







	 * @param autoAddZero Automatically add ZERO nodes within flow functions.









	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.





	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.







	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.





	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.







	 */





	 */







 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {





 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {







 if(DEBUG) {





 if(DEBUG) {







 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();





 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();







 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();





 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();







 }





 }







 this.zeroValue = tabulationProblem.zeroValue();





 this.zeroValue = tabulationProblem.zeroValue();







 this.icfg = tabulationProblem.interproceduralCFG(); 





 this.icfg = tabulationProblem.interproceduralCFG(); 







 FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 





 FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?









 new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); 







 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();





 EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();







 if(flowFunctionCacheBuilder!=null) {





 if(flowFunctionCacheBuilder!=null) {







 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);





 ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);



......


 @DontSynchronize("readOnly")@DontSynchronize("readOnly") @DontSynchronize("readOnly")@DontSynchronize("readOnly") protected final boolean followReturnsPastSeeds;protectedfinalbooleanfollowReturnsPastSeeds; protected final boolean followReturnsPastSeeds;protectedfinalbooleanfollowReturnsPastSeeds;  /**/**	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * The solver must then be started by calling {@link #solve()}.	 * The solver must then be started by calling {@link #solve()}.	 */	 */ public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {publicIDESolver(IDETabulationProblem<N,D,M,V,I>tabulationProblem){ this(tabulationProblem, true);this(tabulationProblem,true); }} /**/** /**/**	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * The solver must then be started by calling {@link #solve()}.	 * The solver must then be started by calling {@link #solve()}.	 * The solver must then be started by calling {@link #solve()}.	 * The solver must then be started by calling {@link #solve()}.	 * @param autoAddZero Automatically add ZERO nodes within flow functions.	 * @param autoAddZero Automatically add ZERO nodes within flow functions.	 */	 */	 */	 */ public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero) {publicIDESolver(IDETabulationProblem<N,D,M,V,I>tabulationProblem,, booleanboolean autoAddZeroautoAddZero){ public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem) {publicIDESolver(IDETabulationProblem<N,D,M,V,I>tabulationProblem){ this(tabulationProblem, autoAddZero, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);this(tabulationProblem,autoAddZeroautoAddZero,, DEFAULT_CACHE_BUILDER,DEFAULT_CACHE_BUILDER); this(tabulationProblem, DEFAULT_CACHE_BUILDER, DEFAULT_CACHE_BUILDER);this(tabulationProblem,DEFAULT_CACHE_BUILDER,DEFAULT_CACHE_BUILDER); }} }} /**/** /**/**	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling	 * Creates a solver for the given problem, constructing caches with the given {@link CacheBuilder}. The solver must then be started by calling	 * {@link #solve()}.	 * {@link #solve()}.	 * {@link #solve()}.	 * {@link #solve()}.	 * @param autoAddZero Automatically add ZERO nodes within flow functions.	 * @param autoAddZero Automatically add ZERO nodes within flow functions.	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.	 * @param flowFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for flow functions.	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.	 */	 */	 */	 */ public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, boolean autoAddZero, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {publicIDESolver(IDETabulationProblem<N,D,M,V,I>tabulationProblem,booleanboolean autoAddZeroautoAddZero,, @SuppressWarnings("rawtypes")CacheBuilderflowFunctionCacheBuilder,@SuppressWarnings("rawtypes")CacheBuilderedgeFunctionCacheBuilder){ public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {publicIDESolver(IDETabulationProblem<N,D,M,V,I>tabulationProblem,@SuppressWarnings("rawtypes")CacheBuilderflowFunctionCacheBuilder,@SuppressWarnings("rawtypes")CacheBuilderedgeFunctionCacheBuilder){ if(DEBUG) {if(DEBUG){ if(DEBUG) {if(DEBUG){ flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();flowFunctionCacheBuilder=flowFunctionCacheBuilder.recordStats(); flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();flowFunctionCacheBuilder=flowFunctionCacheBuilder.recordStats(); edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();edgeFunctionCacheBuilder=edgeFunctionCacheBuilder.recordStats(); edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();edgeFunctionCacheBuilder=edgeFunctionCacheBuilder.recordStats(); }} }} this.zeroValue = tabulationProblem.zeroValue();this.zeroValue=tabulationProblem.zeroValue(); this.zeroValue = tabulationProblem.zeroValue();this.zeroValue=tabulationProblem.zeroValue(); this.icfg = tabulationProblem.interproceduralCFG(); this.icfg=tabulationProblem.interproceduralCFG(); this.icfg = tabulationProblem.interproceduralCFG(); this.icfg=tabulationProblem.interproceduralCFG(); FlowFunctions<N, D, M> flowFunctions = autoAddZero ? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); FlowFunctions<N,D,M>flowFunctions=autoAddZero?newZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(),tabulationProblem.zeroValue()):tabulationProblem.flowFunctions(); FlowFunctions<N, D, M> flowFunctions = tabulationProblem.autoAddZero() ?FlowFunctions<N,D,M>flowFunctions=tabulationProblem.autoAddZero()? new ZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(), tabulationProblem.zeroValue()) : tabulationProblem.flowFunctions(); newZeroedFlowFunctions<N,D,M>(tabulationProblem.flowFunctions(),tabulationProblem.zeroValue()):tabulationProblem.flowFunctions(); EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();EdgeFunctions<N,D,M,V>edgeFunctions=tabulationProblem.edgeFunctions(); EdgeFunctions<N, D, M, V> edgeFunctions = tabulationProblem.edgeFunctions();EdgeFunctions<N,D,M,V>edgeFunctions=tabulationProblem.edgeFunctions(); if(flowFunctionCacheBuilder!=null) {if(flowFunctionCacheBuilder!=null){ if(flowFunctionCacheBuilder!=null) {if(flowFunctionCacheBuilder!=null){ ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);ffCache=newFlowFunctionCache<N,D,M>(flowFunctions,flowFunctionCacheBuilder); ffCache = new FlowFunctionCache<N,D,M>(flowFunctions, flowFunctionCacheBuilder);ffCache=newFlowFunctionCache<N,D,M>(flowFunctions,flowFunctionCacheBuilder);








src/heros/solver/IFDSSolver.java








View file @ 4b103811








...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......













src/heros/solver/IFDSSolver.java








View file @ 4b103811








src/heros/solver/IFDSSolver.java










View file @ 4b103811


4b103811





...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......









...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......






...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;
...@@ -26,8 +26,6 @@ import heros.edgefunc.EdgeIdentity;




















import java.util.Set;





import java.util.Set;









































/**





/**







 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}





 * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver}







 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.





 * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.



...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -51,14 +49,6 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






	 * {@link #solve()}.





	 * {@link #solve()}.







	 */





	 */







 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {





 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {







 this(ifdsProblem, true);









 }









 









 /**









	 * Creates a solver for the given problem. The solver must then be started by calling









	 * {@link #solve()}.









	 */









 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {









 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {





 public FlowFunctions<N,D,M> flowFunctions() {



...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -112,6 +102,11 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 return ifdsProblem.followReturnsPastSeeds();





 return ifdsProblem.followReturnsPastSeeds();







 }





 }







 





 









 @Override









 public boolean autoAddZero() {









 return ifdsProblem.autoAddZero();









 }









 







 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {





 class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {







 





 







 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {





 public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {



...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol
...@@ -135,7 +130,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol






 }





 }







 }





 }





















 }, autoZero);





 });







 }





 }







 





 







 /**





 /**



......


import java.util.Set;importjava.util.Set;import java.util.Set;importjava.util.Set;/**/**/**/** * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver} * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver} * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver} * A solver for an {@link IFDSTabulationProblem}. This solver in effect uses the {@link IDESolver} * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem. * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem. * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem. * to solve the problem, as any IFDS problem can be intepreted as a special case of an IDE problem.	 * {@link #solve()}.	 * {@link #solve()}.	 * {@link #solve()}.	 * {@link #solve()}.	 */	 */	 */	 */ public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {publicIFDSSolver(finalIFDSTabulationProblem<N,D,M,I>ifdsProblem){ public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {publicIFDSSolver(finalIFDSTabulationProblem<N,D,M,I>ifdsProblem){ this(ifdsProblem, true);this(ifdsProblem,true); }}  /**/**	 * Creates a solver for the given problem. The solver must then be started by calling	 * Creates a solver for the given problem. The solver must then be started by calling	 * {@link #solve()}.	 * {@link #solve()}.	 */	 */ public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem, boolean autoZero) {publicIFDSSolver(finalIFDSTabulationProblem<N,D,M,I>ifdsProblem,booleanautoZero){ super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {super(newIDETabulationProblem<N,D,M,BinaryDomain,I>(){ super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {super(newIDETabulationProblem<N,D,M,BinaryDomain,I>(){ public FlowFunctions<N,D,M> flowFunctions() {publicFlowFunctions<N,D,M>flowFunctions(){ public FlowFunctions<N,D,M> flowFunctions() {publicFlowFunctions<N,D,M>flowFunctions(){ return ifdsProblem.followReturnsPastSeeds();returnifdsProblem.followReturnsPastSeeds(); return ifdsProblem.followReturnsPastSeeds();returnifdsProblem.followReturnsPastSeeds(); }} }}   @Override@Override public boolean autoAddZero() {publicbooleanautoAddZero(){ return ifdsProblem.autoAddZero();returnifdsProblem.autoAddZero(); }}  class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {classIFDSEdgeFunctionsimplementsEdgeFunctions<N,D,M,BinaryDomain>{ class IFDSEdgeFunctions implements EdgeFunctions<N,D,M,BinaryDomain> {classIFDSEdgeFunctionsimplementsEdgeFunctions<N,D,M,BinaryDomain>{   public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {publicEdgeFunction<BinaryDomain>getNormalEdgeFunction(Nsrc,DsrcNode,Ntgt,DtgtNode){ public EdgeFunction<BinaryDomain> getNormalEdgeFunction(N src,D srcNode,N tgt,D tgtNode) {publicEdgeFunction<BinaryDomain>getNormalEdgeFunction(Nsrc,DsrcNode,Ntgt,DtgtNode){ }} }} }} }} }, autoZero);},, autoZeroautoZero); });}); }} }}   /**/** /**/**








src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}













src/heros/template/DefaultIFDSTabulationProblem.java








View file @ 4b103811








src/heros/template/DefaultIFDSTabulationProblem.java










View file @ 4b103811


4b103811





...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}









...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}






...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu
...@@ -63,4 +63,8 @@ public abstract class DefaultIFDSTabulationProblem<N,D,M, I extends Interprocedu






 return false;





 return false;







 }





 }























 @Override









 public boolean autoAddZero() {









 return true;









 }







}




}


 return false;returnfalse; return false;returnfalse; }} }} @Override@Override public boolean autoAddZero() {publicbooleanautoAddZero(){ return true;returntrue; }}}}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






