



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

Commits


















1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver
















07 Jan, 2015
1 commit









cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
2 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
2 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
2 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043



















H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

Commits


















1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver
















07 Jan, 2015
1 commit









cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
2 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
2 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
2 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043


















Open sidebar



Joshua Garcia heros

Commits







Open sidebar



Joshua Garcia heros

Commits




Open sidebar

Joshua Garcia heros

Commits


Joshua Garciaherosheros
Commits











1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver
















07 Jan, 2015
1 commit









cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
2 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
2 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
2 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043






















1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver
















07 Jan, 2015
1 commit









cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
2 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
2 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
2 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043


















1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver

















1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver















1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag









herossrcherossolver




1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag








1cd34e9e27d633b377e75c0f16210dcb9ec8d96e


Switch branch/tag





1cd34e9e27d633b377e75c0f16210dcb9ec8d96e

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tagherossrcherossolver













07 Jan, 2015
1 commit









cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
2 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










26 Oct, 2013
3 commits









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










25 Oct, 2013
1 commit









1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










23 Oct, 2013
1 commit









added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










18 Oct, 2013
2 commits









Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










14 Oct, 2013
1 commit









made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










10 Oct, 2013
4 commits









Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










19 Sep, 2013
1 commit









added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










18 Sep, 2013
1 commit









Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










06 Sep, 2013
1 commit









Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










23 Jul, 2013
2 commits









made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










16 Jul, 2013
1 commit









first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043











07 Jan, 2015
1 commit
07 Jan, 20151 commit







cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e














cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e






cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015


·
1cd34e9e

Johannes Lerch authored Jan 07, 2015




1cd34e9e






1cd34e9e




1cd34e9e

25 Sep, 2014
1 commit
25 Sep, 20141 commit







Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b














Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b






Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014


·
ddde660b

Johannes Lerch authored Sep 26, 2014




ddde660b






ddde660b




ddde660b

25 Jun, 2014
7 commits
25 Jun, 20147 commits







Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e














Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde










Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde






Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde





Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.

·
dd4a3cde

Johannes Lerch authored Jun 25, 2014




dd4a3cde






dd4a3cde




dd4a3cde






Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817










Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817






Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817





Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.

·
6fd38817

Johannes Lerch authored Jun 25, 2014




6fd38817






6fd38817




6fd38817






Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d










Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d






Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014


·
663aa65d

Johannes Lerch authored Jun 25, 2014




663aa65d






663aa65d




663aa65d






Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda










Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda






Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda





Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.

·
d7737fda

Johannes Lerch authored Jun 25, 2014




d7737fda






d7737fda




d7737fda






Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868










Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868






Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014


·
6016a868

Johannes Lerch authored Jun 18, 2014




6016a868






6016a868




6016a868






store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710










store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building





26b9e710






store calling context in abstraction to enable context sensitive path

·
26b9e710





Johannes Lerch authored Jun 13, 2014

building

·
26b9e710

Johannes Lerch authored Jun 13, 2014




26b9e710






26b9e710




26b9e710






Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e






Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e





Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.

·
cbce681e

Johannes Lerch authored Jun 11, 2014




cbce681e






cbce681e




cbce681e

09 Jun, 2014
1 commit
09 Jun, 20141 commit







Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89














Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89






Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014


·
c16c1f89

sleepingpig authored Jun 09, 2014




c16c1f89






c16c1f89




c16c1f89

23 Apr, 2014
1 commit
23 Apr, 20141 commit







now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1














now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1






now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014


·
f3b1b1f1

Steven Arzt authored Apr 23, 2014




f3b1b1f1






f3b1b1f1




f3b1b1f1

02 Apr, 2014
1 commit
02 Apr, 20141 commit







generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977














generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977






generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014


·
3d7cf977

Steven Arzt authored Apr 02, 2014




3d7cf977






3d7cf977




3d7cf977

03 Mar, 2014
1 commit
03 Mar, 20141 commit







Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1














Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1






Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014


·
81655ff1

Johannes Lerch authored Mar 03, 2014




81655ff1






81655ff1




81655ff1

28 Feb, 2014
1 commit
28 Feb, 20141 commit







Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10














Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10






Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10





Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.

·
2c10ea10

Johannes Lerch authored Feb 28, 2014




2c10ea10






2c10ea10




2c10ea10

17 Jan, 2014
2 commits
17 Jan, 20142 commits







generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d














generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f










generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f






generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014


·
4b76e92f

Steven Arzt authored Jan 17, 2014




4b76e92f






4b76e92f




4b76e92f






caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d






caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014


·
3b6c322d

Steven Arzt authored Jan 17, 2014




3b6c322d






3b6c322d




3b6c322d

15 Dec, 2013
1 commit
15 Dec, 20131 commit







cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7














cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7






cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013


·
a278d4f7

Eric Bodden authored Dec 15, 2013




a278d4f7






a278d4f7




a278d4f7

28 Nov, 2013
1 commit
28 Nov, 20131 commit







pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f














pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f






pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013


·
3980d99f

Steven Arzt authored Nov 28, 2013




3980d99f






3980d99f




3980d99f

31 Oct, 2013
2 commits
31 Oct, 20132 commits







made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066














made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595










made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595






made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013


·
4d3ab595

Steven Arzt authored Oct 31, 2013




4d3ab595






4d3ab595




4d3ab595






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013


·
fdced066

Steven Arzt authored Oct 31, 2013




fdced066






fdced066




fdced066

28 Oct, 2013
2 commits
28 Oct, 20132 commits







Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf














Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b










Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b






Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b





Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver

·
3c46813b

Steven Arzt authored Oct 28, 2013




3c46813b






3c46813b




3c46813b






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013


·
e0e1cdaf

Eric Bodden authored Oct 28, 2013




e0e1cdaf






e0e1cdaf




e0e1cdaf

26 Oct, 2013
3 commits
26 Oct, 20133 commits







Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e













added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac













removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85














Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e










Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e






Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e





Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.

·
3cad6e8e

Steven Arzt authored Oct 26, 2013




3cad6e8e






3cad6e8e




3cad6e8e






added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac










added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013






4f842bac






added logging for execution errors in worker threads

·
4f842bac


Steven Arzt authored Oct 26, 2013


·
4f842bac

Steven Arzt authored Oct 26, 2013




4f842bac






4f842bac




4f842bac






removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85










removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013






02ad0f85






removed an assertion that could cause deadlocks under some rare circumstances

·
02ad0f85


Steven Arzt authored Oct 26, 2013


·
02ad0f85

Steven Arzt authored Oct 26, 2013




02ad0f85






02ad0f85




02ad0f85

25 Oct, 2013
1 commit
25 Oct, 20131 commit







1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e














1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e










1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them





20810d2e






1) added some override annotations

·
20810d2e





Steven Arzt authored Oct 25, 2013

2) improved thread safety by not only copying the incoming set, but also the sets it contains since they may as well be changed by other threads while we try to iterate over them

·
20810d2e

Steven Arzt authored Oct 25, 2013




20810d2e






20810d2e




20810d2e

23 Oct, 2013
1 commit
23 Oct, 20131 commit







added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047














added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047










added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013






ca17b047






added some synchronization statements

·
ca17b047


Steven Arzt authored Oct 23, 2013


·
ca17b047

Steven Arzt authored Oct 23, 2013




ca17b047






ca17b047




ca17b047

18 Oct, 2013
2 commits
18 Oct, 20132 commits







Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013













added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b














Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013










Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.





6a582013






Revert "first implementation of reduced summaries"

·
6a582013





Eric Bodden authored Oct 18, 2013


This reverts commit f161c043.

·
6a582013

Eric Bodden authored Oct 18, 2013




6a582013






6a582013




6a582013






added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b










added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





d9ac548b






added a PathTrackingIFDSSolver which implements the keeping track of paths;

·
d9ac548b





Eric Bodden authored Oct 18, 2013

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths

·
d9ac548b

Eric Bodden authored Oct 18, 2013




d9ac548b






d9ac548b




d9ac548b

14 Oct, 2013
1 commit
14 Oct, 20131 commit







made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a














made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a










made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013






1211a53a






made a method protected

·
1211a53a


Steven Arzt authored Oct 14, 2013


·
1211a53a

Steven Arzt authored Oct 14, 2013




1211a53a






1211a53a




1211a53a

10 Oct, 2013
4 commits
10 Oct, 20134 commits







Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e













Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2













Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3













1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7














Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e










Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013






51c1c00e






Added DEBUG field as it is needed by JimpleBasedInterproceduralCFG

·
51c1c00e


Marc-André Laverdière authored Oct 10, 2013


·
51c1c00e

Marc-André Laverdière authored Oct 10, 2013




51c1c00e






51c1c00e




51c1c00e






Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2










Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013






69e499f2






Added logging information in IDESolver.computeValues

·
69e499f2


Marc-André Laverdière authored Sep 20, 2013


·
69e499f2

Marc-André Laverdière authored Sep 20, 2013




69e499f2






69e499f2




69e499f2






Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3










Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013






8302b8d3






Ported to SLF4J Logging

·
8302b8d3


Marc-André Laverdière authored Sep 13, 2013


·
8302b8d3

Marc-André Laverdière authored Sep 13, 2013




8302b8d3






8302b8d3




8302b8d3






1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7










1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted





aacc49a7






1) semantic fix: unbalanced returns are associated with a caller-side zero...

·
aacc49a7





Steven Arzt authored Oct 10, 2013

1) semantic fix: unbalanced returns are associated with a caller-side zero fact as context (d1), not with an empty list of contexts. This allows us to distinguish whether we actually have no caller to which to return or whether we have an unconditional taint.

2) code merge from Reviser: Allowing jump functions to be deleted

·
aacc49a7

Steven Arzt authored Oct 10, 2013




aacc49a7






aacc49a7




aacc49a7

19 Sep, 2013
1 commit
19 Sep, 20131 commit







added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07














added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07










added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013






494c7a07






added a parameter in the internal protected method and fixed some JavaDoc comments

·
494c7a07


Steven Arzt authored Sep 19, 2013


·
494c7a07

Steven Arzt authored Sep 19, 2013




494c7a07






494c7a07




494c7a07

18 Sep, 2013
1 commit
18 Sep, 20131 commit







Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f














Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f










Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





25bbae8f






Refactored flow function computation to call FlowFunction.computeTargets in a...

·
25bbae8f





Steven Arzt authored Sep 18, 2013

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.

·
25bbae8f

Steven Arzt authored Sep 18, 2013




25bbae8f






25bbae8f




25bbae8f

06 Sep, 2013
1 commit
06 Sep, 20131 commit







Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde














Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde










Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013






f0141dde






Added counter resetting and thread interruption to fix #3

·
f0141dde


Marc-André Laverdière authored Sep 06, 2013


·
f0141dde

Marc-André Laverdière authored Sep 06, 2013




f0141dde






f0141dde




f0141dde

23 Jul, 2013
2 commits
23 Jul, 20132 commits







made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2













bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20














made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2










made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013






382bb1d2






made bidi solver extensible

·
382bb1d2


Eric Bodden authored Jul 23, 2013


·
382bb1d2

Eric Bodden authored Jul 23, 2013




382bb1d2






382bb1d2




382bb1d2






bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20










bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013






b1fe6b20






bidisolver now supports summarizing abstractions

·
b1fe6b20


Eric Bodden authored Jul 23, 2013


·
b1fe6b20

Eric Bodden authored Jul 23, 2013




b1fe6b20






b1fe6b20




b1fe6b20

16 Jul, 2013
1 commit
16 Jul, 20131 commit







first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043














first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043










first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013






f161c043






first implementation of reduced summaries

·
f161c043


Eric Bodden authored Jul 16, 2013


·
f161c043

Eric Bodden authored Jul 16, 2013




f161c043






f161c043




f161c043






