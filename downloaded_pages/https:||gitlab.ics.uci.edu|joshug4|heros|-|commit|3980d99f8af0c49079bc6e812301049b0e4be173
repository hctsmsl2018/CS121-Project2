



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

3980d99f















Commit
3980d99f


authored
Nov 28, 2013
by


Steven Arzt



Browse files




pulled up the LinkedNode interface onto the first level







parent
4d3ab595













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......














src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file














src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

3980d99f















Commit
3980d99f


authored
Nov 28, 2013
by


Steven Arzt



Browse files




pulled up the LinkedNode interface onto the first level







parent
4d3ab595













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......














src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file














src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

3980d99f







Open sidebar



Joshua Garcia heros
Commits

3980d99f




Open sidebar

Joshua Garcia heros
Commits

3980d99f


Joshua GarciaherosherosCommits
3980d99f








Commit
3980d99f


authored
Nov 28, 2013
by


Steven Arzt



Browse files




pulled up the LinkedNode interface onto the first level







parent
4d3ab595













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......














src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file














src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
3980d99f


authored
Nov 28, 2013
by


Steven Arzt



Browse files




pulled up the LinkedNode interface onto the first level







parent
4d3ab595













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......














src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file














src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
3980d99f


authored
Nov 28, 2013
by


Steven Arzt



Browse files



Commit
3980d99f


authored
Nov 28, 2013
by


Steven Arzt

3980d99fauthoredbySteven Arzt

pulled up the LinkedNode interface onto the first level






parent
4d3ab595
















parent
4d3ab595





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......














src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file














src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......














src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 3980d99f








src/heros/solver/BiDiIFDSSolver.java










View file @ 3980d99f


3980d99f



......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......






......@@ -15,7 +15,6 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -46,7 +45,7 @@ import java.util.concurrent.TimeUnit;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -183,7 +182,7 @@ public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......


import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.solver.PathTrackingIFDSSolver.LinkedNode;importheros.solver.PathTrackingIFDSSolver.LinkedNode;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap; * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,DextendsPathTrackingIFDSSolverPathTrackingIFDSSolver..LinkedNode<D>,M,IextendsInterproceduralCFG<N,M>>{public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,DextendsLinkedNode<D>,M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>backwardProblem;	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsPathTrackingIFDSSolverPathTrackingIFDSSolver..LinkedNode<AbstractionWithSourceStmt>{ public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsLinkedNode<AbstractionWithSourceStmt>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource;








src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file












src/heros/solver/LinkedNode.java



0 â†’ 100644







View file @ 3980d99f








src/heros/solver/LinkedNode.java



0 â†’ 100644









View file @ 3980d99f


3980d99f










/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 */










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










	 * with this one of paths were not being tracked.










	 */










 public void addNeighbor(D originalAbstraction);










}




\ No newline at end of file


/*******************************************************************************/******************************************************************************* * Copyright (c) 2013 Eric Bodden. * Copyright (c) 2013 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;/**/** * A data-flow fact that can be linked with other equal facts. * A data-flow fact that can be linked with other equal facts. * Equality and hash-code operations must <i>not</i> take the linking data structures into account! * Equality and hash-code operations must <i>not</i> take the linking data structures into account! */ */public interface LinkedNode<D> {publicinterfaceLinkedNode<D>{ /**/**	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged	 * with this one of paths were not being tracked.	 * with this one of paths were not being tracked.	 */	 */ public void addNeighbor(D originalAbstraction);publicvoidaddNeighbor(DoriginalAbstraction);}}








src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......












src/heros/solver/PathTrackingIFDSSolver.java








View file @ 3980d99f








src/heros/solver/PathTrackingIFDSSolver.java










View file @ 3980d99f


3980d99f



......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......






......@@ -26,19 +26,7 @@ import com.google.common.collect.Maps;









 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);



......


 *   *   * @author Eric Bodden * @author Eric Bodden */ */public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {publicclassPathTrackingIFDSSolver<N,DextendsPathTrackingIFDSSolver.LinkedNode<D>,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,D,M,I>{ /**/**	 * A data-flow fact that can be linked with other equal facts.	 * A data-flow fact that can be linked with other equal facts.	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!	 */	 */ public static interface LinkedNode<D> {publicstaticinterfaceLinkedNode<D>{ /**/**		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged		 * with this one of paths were not being tracked.		 * with this one of paths were not being tracked.		 */		 */ public void addNeighbor(D originalAbstraction);publicvoidaddNeighbor(DoriginalAbstraction); }}public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {publicclassPathTrackingIFDSSolver<N,DextendsLinkedNode<D>,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,D,M,I>{ public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {publicPathTrackingIFDSSolver(IFDSTabulationProblem<N,D,M,I>ifdsProblem){ super(ifdsProblem);super(ifdsProblem);









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






