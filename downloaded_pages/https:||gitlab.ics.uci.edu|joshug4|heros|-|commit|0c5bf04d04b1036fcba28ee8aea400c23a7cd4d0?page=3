



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

0c5bf04d















Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......














src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}














src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

0c5bf04d















Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......














src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}














src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

0c5bf04d







Open sidebar



Joshua Garcia heros
Commits

0c5bf04d




Open sidebar

Joshua Garcia heros
Commits

0c5bf04d


Joshua GarciaherosherosCommits
0c5bf04d








Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......














src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}














src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......














src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}














src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files



Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden

0c5bf04dauthoredbyEric Bodden

moved dependencies on soot into separate package






parent
92bb16ad
















parent
92bb16ad





parent












Changes
43
43


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......














src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}














src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}









Prev


1


2


3


Next













src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......












src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java








View file @ 0c5bf04d








src/de/bodden/ide/template/JimpleBasedInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java





/de/bodden/ide/template-soot/soot/jimple/toolkits/ide/icfg




View file @ 0c5bf04d


0c5bf04d










package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......













package de.bodden.ide.template;










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;



......


package de.bodden.ide.template;packagede.bodden.ide.templatede.bodden.ide.template;package soot.jimple.toolkits.ide.icfg;packagesoot.jimple.toolkits.ide.icfgsoot.jimple.toolkits.ide.icfg;import java.util.ArrayList;importjava.util.ArrayList;import java.util.HashMap;importjava.util.HashMap;








src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}












src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad








src/de/bodden/ide/template/DefaultIDETabulationProblem.java

deleted


100644 → 0









View file @ 92bb16ad


92bb16ad










package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}













package de.bodden.ide.template;





















import de.bodden.ide.EdgeFunction;










import de.bodden.ide.EdgeFunctions;










import de.bodden.ide.IDETabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.JoinLattice;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IDETabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IDETabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <V> The type of values to be computed along flow edges.










 * @param <I> The type of inter-procedural control-flow graph being used.










 */










public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>










 extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{





















 private final EdgeFunction<V> allTopFunction;










 private final JoinLattice<V> joinLattice;










 private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;










 










 public DefaultIDETabulationProblem(I icfg) {










 super(icfg);










 this.allTopFunction = createAllTopFunction();










 this.joinLattice = createJoinLattice();










 this.edgeFunctions = createEdgeFunctionsFactory();










 }





















 protected abstract EdgeFunction<V> createAllTopFunction();





















 protected abstract JoinLattice<V> createJoinLattice();





















 protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();










 










 @Override










 public final EdgeFunction<V> allTopFunction() {










 return allTopFunction;










 }










 










 @Override










 public final JoinLattice<V> joinLattice() {










 return joinLattice;










 }










 










 @Override










 public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {










 return edgeFunctions;










 }










 










}


package de.bodden.ide.template;packagede.bodden.ide.template;import de.bodden.ide.EdgeFunction;importde.bodden.ide.EdgeFunction;import de.bodden.ide.EdgeFunctions;importde.bodden.ide.EdgeFunctions;import de.bodden.ide.IDETabulationProblem;importde.bodden.ide.IDETabulationProblem;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.JoinLattice;importde.bodden.ide.JoinLattice;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;/**/** * This is a template for {@link IDETabulationProblem}s that automatically caches values * This is a template for {@link IDETabulationProblem}s that automatically caches values * that ought to be cached. This class uses the Factory Method design pattern. * that ought to be cached. This class uses the Factory Method design pattern. * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently * reused for solving multiple different {@link IDETabulationProblem}s. * reused for solving multiple different {@link IDETabulationProblem}s. * This class is specific to Soot.  * This class is specific to Soot.  *  *  * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <V> The type of values to be computed along flow edges. * @param <V> The type of values to be computed along flow edges. * @param <I> The type of inter-procedural control-flow graph being used. * @param <I> The type of inter-procedural control-flow graph being used. */ */public abstract class DefaultIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit, SootMethod>>publicabstractclassDefaultIDETabulationProblem<D,V,IextendsInterproceduralCFG<Unit,SootMethod>> extends DefaultIFDSTabulationProblem<D,I> implements IDETabulationProblem<Unit, D, SootMethod, V, I>{extendsDefaultIFDSTabulationProblem<D,I>implementsIDETabulationProblem<Unit,D,SootMethod,V,I>{ private final EdgeFunction<V> allTopFunction;privatefinalEdgeFunction<V>allTopFunction; private final JoinLattice<V> joinLattice;privatefinalJoinLattice<V>joinLattice; private final EdgeFunctions<Unit,D,SootMethod,V> edgeFunctions;privatefinalEdgeFunctions<Unit,D,SootMethod,V>edgeFunctions;  public DefaultIDETabulationProblem(I icfg) {publicDefaultIDETabulationProblem(Iicfg){ super(icfg);super(icfg); this.allTopFunction = createAllTopFunction();this.allTopFunction=createAllTopFunction(); this.joinLattice = createJoinLattice();this.joinLattice=createJoinLattice(); this.edgeFunctions = createEdgeFunctionsFactory();this.edgeFunctions=createEdgeFunctionsFactory(); }} protected abstract EdgeFunction<V> createAllTopFunction();protectedabstractEdgeFunction<V>createAllTopFunction(); protected abstract JoinLattice<V> createJoinLattice();protectedabstractJoinLattice<V>createJoinLattice(); protected abstract EdgeFunctions<Unit, D, SootMethod, V> createEdgeFunctionsFactory();protectedabstractEdgeFunctions<Unit,D,SootMethod,V>createEdgeFunctionsFactory();  @Override@Override public final EdgeFunction<V> allTopFunction() {publicfinalEdgeFunction<V>allTopFunction(){ return allTopFunction;returnallTopFunction; }}  @Override@Override public final JoinLattice<V> joinLattice() {publicfinalJoinLattice<V>joinLattice(){ return joinLattice;returnjoinLattice; }}  @Override@Override public final EdgeFunctions<Unit, D, SootMethod, V> edgeFunctions() {publicfinalEdgeFunctions<Unit,D,SootMethod,V>edgeFunctions(){ return edgeFunctions;returnedgeFunctions; }} }}








src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}












src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0







View file @ 92bb16ad








src/de/bodden/ide/template/DefaultIFDSTabulationProblem.java

deleted


100644 → 0









View file @ 92bb16ad


92bb16ad










package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}













package de.bodden.ide.template;





















import de.bodden.ide.FlowFunctions;










import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import soot.SootMethod;










import soot.Unit;





















/**










 * This is a template for {@link IFDSTabulationProblem}s that automatically caches values










 * that ought to be cached. This class uses the Factory Method design pattern.










 * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently










 * reused for solving multiple different {@link IFDSTabulationProblem}s.










 * This class is specific to Soot. 










 * 










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 */










public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {





















 private final I icfg;










 private FlowFunctions<Unit, D, SootMethod> flowFunctions;










 private D zeroValue;










 










 public DefaultIFDSTabulationProblem(I icfg) {










 this.icfg = icfg;










 }










 










 protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();





















 protected abstract D createZeroValue();





















 @Override










 public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {










 if(flowFunctions==null) {










 flowFunctions = createFlowFunctionsFactory();










 }










 return flowFunctions;










 }





















 @Override










 public final I interproceduralCFG() {










 return icfg;










 }





















 @Override










 public final D zeroValue() {










 if(zeroValue==null) {










 zeroValue = createZeroValue();










 }










 return zeroValue;










 }





















}


package de.bodden.ide.template;packagede.bodden.ide.template;import de.bodden.ide.FlowFunctions;importde.bodden.ide.FlowFunctions;import de.bodden.ide.IFDSTabulationProblem;importde.bodden.ide.IFDSTabulationProblem;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;/**/** * This is a template for {@link IFDSTabulationProblem}s that automatically caches values * This is a template for {@link IFDSTabulationProblem}s that automatically caches values * that ought to be cached. This class uses the Factory Method design pattern. * that ought to be cached. This class uses the Factory Method design pattern. * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently * The {@link InterproceduralCFG} is passed into the constructor so that it can be conveniently * reused for solving multiple different {@link IFDSTabulationProblem}s. * reused for solving multiple different {@link IFDSTabulationProblem}s. * This class is specific to Soot.  * This class is specific to Soot.  *  *  * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. */ */public abstract class DefaultIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>> implements IFDSTabulationProblem<Unit, D, SootMethod,I> {publicabstractclassDefaultIFDSTabulationProblem<D,IextendsInterproceduralCFG<Unit,SootMethod>>implementsIFDSTabulationProblem<Unit,D,SootMethod,I>{ private final I icfg;privatefinalIicfg; private FlowFunctions<Unit, D, SootMethod> flowFunctions;privateFlowFunctions<Unit,D,SootMethod>flowFunctions; private D zeroValue;privateDzeroValue;  public DefaultIFDSTabulationProblem(I icfg) {publicDefaultIFDSTabulationProblem(Iicfg){ this.icfg = icfg;this.icfg=icfg; }}  protected abstract FlowFunctions<Unit, D, SootMethod> createFlowFunctionsFactory();protectedabstractFlowFunctions<Unit,D,SootMethod>createFlowFunctionsFactory(); protected abstract D createZeroValue();protectedabstractDcreateZeroValue(); @Override@Override public final FlowFunctions<Unit, D, SootMethod> flowFunctions() {publicfinalFlowFunctions<Unit,D,SootMethod>flowFunctions(){ if(flowFunctions==null) {if(flowFunctions==null){ flowFunctions = createFlowFunctionsFactory();flowFunctions=createFlowFunctionsFactory(); }} return flowFunctions;returnflowFunctions; }} @Override@Override public final I interproceduralCFG() {publicfinalIinterproceduralCFG(){ return icfg;returnicfg; }} @Override@Override public final D zeroValue() {publicfinalDzeroValue(){ if(zeroValue==null) {if(zeroValue==null){ zeroValue = createZeroValue();zeroValue=createZeroValue(); }} return zeroValue;returnzeroValue; }}}}



Prev


1


2


3


Next





Prev

1

2

3

Next











Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






